%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (Adobe Illustrator Artwork)
%%Creator: (Adobe Illustrator\(R\) 26.2)
%%For: (Yefym Turkin)
%%CreationDate: 10.04.2022
%%BoundingBox: 0 0 800 450
%%HiResBoundingBox: 0 0 800 450
%%CropBox: 0 0 800 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 26.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 26.2.1 x197 R agm 5.5 ct 6.4%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 72 8%%BeginData: 20636 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%280527052805270528052727280527275305270528052805280528052827%2805280528052828280528282805280528052827280528282E0528272805%282728052827280528052805280528052827280528272805282728052805%280528052805280528052805270528052705280527052805280528052705%280527055227270000270027002700270027000500270005002700270027%002700282728002800270528002700280027002800270028052800280027%002805270028002700280527002800270028002700280027002800270028%002700280027052E00270027000500270027002700270027002700270027%002700270027002700270027002700272700270527002805270028052700%2805270027272800280527052805280528052E2728052805282728052805%280528052805280528052805280528052805280528002805280028052800%280528052805280528052805280528052705270027052700270527002705%2700270527002705270028052700282727002705270028050005272E0005%002700050027000500270005002700050027000500280027002800270028%0027002E0527002700270028002700270005002800270028002700282827%002800050028002700270027002800282727002700270005002700270027%002705270027002700050027002700270005002700050027000500270005%00272705282727052827280027282E002805270528052705282E28002827%282728272805280528052827280528522800280527002805270528052700%280528052805280528052805282728052805280528272805282728052827%270028052700280527052805272753052705280527002805270027272700%2705270028272705272E0027002700270027000500280527002700270027%002700270027002805280028002828280027002800270059270500270005%00272753002700050027000500270027002E002700280027002800270028%002700280005272800050028052700270027002700270027002700270027%002700270027002700270005272800270027280528052805270053522700%280528052805270028052700280527052805280528272E05280552272805%280027052700270527002827270027052700270527002805282728052800%280528052828280528052800280527002705270028052705280527002805%270028052700270527002805270028052700280527002805270000270005%00280005272E00050027002700270005002700052E280005272E00270028%002700280027002800050005052700270005002700050027000500270528%F82700050027000528530027005305270027000500270005002700050027%002700270005002700050027000527270005002700270027002700270005%002700272805270528282805280528052805270528282805280527052805%270028282805282728052805280528282800280527002805270028052705%280527002805282727052700282728052828280528052805280527002827%270028052705280527052805280528052705282728057E28280528052805%28052805282827052827280500270027002700270027002700270027002E%050500522E05002700270028052700280028002800270028000500270005%002700050027002700270005002700050028050500280005002700270027%002700270005002E00050027002700270027002700270027002700280027%002800280528002700280027002800270028002827002805270028052700%28052705280527002805287EA92727002727270028052805282828052805%280027052700270527002705270027052700270527002805270528052700%270527002705270028052700270527002705270028052700522727002805%270028052805280528002827280028052827280528052805280528050005%002700050027000500270027282700050027002E28050005002700050028%002700280027002800050027000500270005002700050027002700270005%002700050027000500270005002800050027000500270005F82700050027%000500270005000528280028002800280028272700280028052800272E28%002800270028270528052805280527052805270527052705280527002805%270528052705280528052827280528052827280528052805270528052705%280527052805270528052705282728002805270028272705280527002805%270028272705280527052805270528052805282728272827280528052828%280528052805282728052805282705270027282700280027002700270027%002700270005002700270027002700270027002800270027002700270027%002700270027002700270027002700270027002700270005002700050027%002700270005052E00055228002700270027002700270027002700280027%002828520028052700280027002800270028002700282805270027052700%280527002805270028052700282727002805270028052700270527002805%270028052700280527002805270028052700280527002805270028052700%270527002705270028052700270527052705270028052700280527002805%270027052805282728052828280528052800282728052805280528052800%002700050027002700270027002700050027000500280005002700050027%002700270005002700050027000500270005002700050027000500270005%00270005002700050027002E002700050027000500270005002700270027%000500270005002700050027002705280027002700270028002700280027%0028002700280028280527052800532E2705282828052705280527052805%270528052700280527272805270528052805280527052805270528052727%280527052805270528052805280527052805272728052700272728002805%270028052705270527052805270528052705282728052805280528282805%280528282827280528052805280528270027002700270528002700270027%002700270027002700270027002700270027002700270027002700270027%002700270027002700270027002700270027002700270027002700050027%000500270005002800050027000500270027002700270027002700270027%00280027002E272700282752002800280028002700280027280028052700%280527002805270028052700280527002805270028272700280527002805%270028052700280527002805270028052700280527002805270028052700%280527002705270027052700270527052705270027052700270527002805%270028052700280527002805280028052805280528052805280528052805%282800270027002727270005002700050027000500270505002700050027%000500270005002700050027000500270005002700050027000500270005%002700050027000500270005002700050027000500270005002700050027%000500270028002700050027000500270027002700270028002700280005%282800270028002700282805280527052805270528052705280527052827%2E0028052705280527052805270528052705280527052805270528052705%280527052805270528052705280527052805270028052700280527002805%270028052700280527002805272728052705280527052805270528052705%280528052827280553282805282728052805052800280027002700272827%002700270027002700270027002727270027002700270027002700270027%002700270027002700270027002700270027002700270027002700050027%000500270005002700050027000500270005002700050027002700270027%002700270027002700270027052800270028052700280027002828052805%280527002805270028052700270527002805270028052800280527002805%270028052700280527002805270028052700280527002805270028052700%280527002705270027052700270527002805270027052700270527002705%270028052700280527002805270027002700280528002805280528052805%280528050028052700270005002700050027002705270005002700050027%000500270005002700050027000500270005002700050027000500270005%002700050027000500270005002700050027000500270005002700050027%000500270005002700050027000500282805002700052753000500270005%28590027002800270027002728282E052827280528052705280527052E05%270528052E27280527052805282728052705280527052805270528052705%280527052805270528052705280527052805270528052705280527052805%270528052700280527002805270028052705280527052805280028052700%2E28270528052705A8AF5305280528055353280500280028002800270027%002700270027002700270027272700270027002700270027002700270027%002700270027002700270027002700270027002700270027002700270027%002700270027002700270027002700270005002700050027002700270027%002700270027002700270027002700052753002700280027285300272805%280528052805270028052700280527002805270027052700280527002805%270028052700280527002805270028052700280527002805270028052700%280527002805270028052700280527002805270028052700270527002705%270027052700280527002805270028052700280527002805270028052828%280528002805282800282827002700050027000500270005002800050027%000500270005002700050027000500270005002700050027000500270005%002700050027000500270005002700050027000500270005002700050027%000500270005002700050027000500270005002700050027000500270005%0027000500280027002800270028280528282E0528052805280527052805%270528052805280527052805270528052705280527052805270528052705%280527052805270528052705280527052805270528052705280527052805%270528052705280527002805270028052700280527052805270528052705%28052705280527052E052705282728052827280528050027002800280027%002700270027002700270027002700270027002700270027002700270027%002700270027002700270027002700270027002700270027002700270027%002700270027002700270027002700270005002700050027000500270027%002700270027002700270027002700272827002728280027002800280528%280528052805280028052700280527002705270027052700280527002805%270028052700280527002805270028052700280527002805270028052700%280527002805270028052700280527002805270028052700270527002705%270027052700270527002805270028052700280527002827270028052805%280528052805280500280027002700050027000500270027052700050527%000500270005002700050027000500270005002700050027000500270005%002700050027000500270005002700050027000500270005002700050027%000500270005002700050027002852050005002700050027000500270005%002E00270028002700280528002800272805280559282705280527052805%2705280527007E2E27052805270528052705280527052805270528052705%280527052805270528052705280527052805270528052705280527052805%270528052705280527002805270028052700280527275200270028052705%28052705280528052805280528272805282728052827280500280027532E%002700270027002700270027000505280027002700270027002700270027%002700270027002700270027002700270027002700270027002700270027%002700270027002700270027002700270005002700050027000500270005%002700050027002700270027002700270028272700280028002800270028%002728272805270028052700280528052805270028052700280527002805%270028052700280527002805270028052700280527002805270028052700%280527002805270028052700280527002805270028052700280527002705%270027052700270527002705270028052700280527002805270028052805%282728002805280528050028002700270027000500270527002700050027%000500270005002700050027000500270005002700050027000500270005%002700050027000500270005002700050027000500270005002700050027%000500270005002700050027000500270005002700050027000500270505%002705280028002700280027002800270028280028052E05280527052805%270028052705280527052805270528052705280527052805270528052705%280527052805270528052705280527052805270528052705280527052805%270528052705280527052805270028052700280527002805270028052700%2805270528272E0028052828280528272827280528052828282700270027%000500270027002700270027002700270027002700270027002700270027%002700270027002700270027002700270027002700270027002700270027%002700270027002700270027002700270027002700050027000500270005%002700050027000500270027002700270027002700280528002800280528%052800282827270027052700270527002805280028052700280527002805%270028052700280527002805270028052700280527002805270028052700%280527002805270028052700280527002805270028052700280527002705%270027052700270527002705270027052700282728002805270028052805%280528052828590528052805002800050027000500270005002705050027%000500270005002700050027000500270005002700050027000500270005%002700050027000500270005002700050027000500270005002700050027%000500270005002700050027000500270005002700270027000500270005%002700270028002700280027002800270028002728052700280527002828%280527052705280527052805280528052805280527052805270528052705%280527052805270528052705280527052805270528052705280527052805%270528052705280527052805270028052700280527002805270028052705%280527052805270528052705280528052827280528052805282728050028%282700270505005327270027000500270027002700270027052800270027%002700270027002700270027002700270027002700270027002700270027%002700270027002700270027002700270027002700050027000500270005%002700050027000500270005002700270027002700282827002805280028%002700280027280553052800280527002705270028052800270527002705%270027052700270527002705270027052700270527002705270027052700%280527002805270028052700280527002805270028052700280527002705%270027052700270527002705270027052700270527002805270028052728%7D0528002827280528052805280500270027002700270027002800270028%002700270005002700050027000500270005002700050027000500270005%002700050027000500270005002700050027000500270005002700050027%000500270005002700050027000500270005002700050027000500270005%002800050027050500280528002800282827002700282805280528052805%280528052805280528052827280053282700280527002805270528052700%280527002805270028052700280527052805270528052705280527052805%270528052705280527052805270528052700280527002805270028052700%280527052805270528052705280528052827280528272805280528052827%002700282828002800050028052700280027002800050527000500270527%002700270027000500270005002700050027000500270027002700270027%002700270027002700270027002700270027002700270027000500270005%002700050027000500270027002700270027002700280027002800270028%002700280027002828052800280528847E05280028052800280528002805%270028052700280527002705270027052700270527002705270027052700%270527002805270028052700280527002805270028052700280527002805%270027052700270527002705270027052700270527002705270028052828%2805270028052805280528002805280500282805002727A8532800270027%002827270027002700270505000500270005002700050027000500270005%002700050027000500270005002700050027000500270005002700050027%000500270005002700050027000500270005002700050027000500270005%002700050027000500270028002700270028002800280027282728052805%272728272805280528052805280528052700270527002805270028052700%280527002805270028052700280527002805270528052705280527052805%270528052705280527052805270528052705280527002805270028052700%280527002805270028052705280527052805272828052705280528052805%280500280027002800050028052705280027002800270027000500270005%002700270027000500270005002700050027000500270005002700270027%002700270027002700270027002700270027002700270027002700270005%002700050027000500270005002700050027002700270027002700050027%002E59280027002828272805280528272805280028052805280528002805%270028052700270527002805270528052700270527002705270027052700%270527002805270028052700280527002805270028052700280527002805%270028052700270527002705270027272700270527002705270028052700%280527002805270028272800280528052805002700280028002800270028%002700270027002700050027000500270005002700050027000500270005%002700050027002700270005002700050027000500270005002700050027%000500270005002700050027000500270005002700050027000500270005%002700050027000500270005002700270027000500280027002828052827%280528272805282728052805280528052705522727052805270528052705%280527052805270028052700280527052805280028052705280527052805%270528052705280527052805270528052705280527052805270028052700%280527002805270028272705280527052805270528052E05280528052827%280528270027002800270028002700280527002805270027002705270027%052700270027002700270005002700270027000500270005002700270027%002700270027002700270027002700270027002700270027002700270027%002700270027000500270005002700050027002700270027002800270027%00270028002700280528002828052805282728052827280528282E002805%270552052700280528002805270028052700272727002805270027052700%270527002805270028052805280527002805270028052700280527002805%270028052700280527002805270027052700270527002705270028052700%280527052805270028052705280527052805280500280027002800270028%002700280505002700272727000500270005002700050027000500270005%002700050027000500270005002700050027002700270005002700050027%000500270005002700050027000500270005002700050027000500270005%002700050027000500270005002700050027000500270027002800272827%280528052805280528052805270528052705270527275205270528052705%280528052805270028052700280527002805270528052705280527052805%270528052705280527052805270528052705280527052805270528052705%280527052805270528052827280527052827270528052705280527052828%280528272805002800270028002700280027282800270027002700270027%05270027002700270028002700270005002E000500270005002700270027%002700270027002700270027002700270027002700270027002700270027%002700272727002700270027002700270027052800270027002800270027%002700270027002805270028002728052805282828272805280528052805%270553002700280527002805270027052705270527002705270527052700%280527002805270028052700280527002805270028272700280527002805%270028052700280527002805270028052700280527002805270027052700%280527002805275359002700280527002805280528050027002800050528%002700280005002700598428000500270005002700052727000500270027%002700050027000500270005002700050027000500270005002700050027%000500270005002700050027000500270005272800050027000500270027%002700050027002700272705002700280527000500270027002827270028%2805282728052805280528052705280553A9FF7E28002805270528052705%7E2827002805270528052700270527002805270528052705280527052805%270528052700280527002805270528052705280527052805280528052705%280527052805280528052705530527005327280528052700280527052805%280528282E0028270027002805270028002800270027002700537E270005%002800270028000500270005002700050027000500270027002700270027%052700270027002700280027052800270527002700270027002700280027%0027002700270027002700270027002700270027272700052E2800270028%002700270027002805270028002800282805280528052805282828002705%2700270528002805280028052800280527002727270027272E0027052700%280527002805270028052700280527002805270028282700282827002805%270028052705280527002805270028052700280527002805270028052700%280527002805270528052805280528002805280528052805002800270028%002700280005002700050027000500280027002700270028002700270005%002700050027000500270005002700050027000500270005002700050027%000500270005002700050027000500270005002705280027002700280027%002800270027002700270027002700270028002700282828002800270028%002728272805282728052805280528052700280528052828280028282805%282728052805272828052705280528052805280028052805280527052805%270528052705280527052805270028052805280527052827280528052805%282728002827280528282805282728052827280528052827282728052827%2E0528272805282728050028002700280028052700270027002700280027%005205270028002700280027002800270027002700272828002700050528%002700270027002700270028052700270027002700280027002700270005%055300270027002700280053052800270028002700280027002800270028%282800280027002800270028002700280027280528052805282E28052805%280028272800280528002805280528052805280528052805270028052700%280527002700280527052700280527052805270528052700280527002828%27002805270028052700280527002805280028532E002805280528052805%280528052805280528052805280528052805280528052805280505280028%052800270553002700270027002700270027002800270028002700280527%002800270027000500270005055300050028000500270027002700050027%000500270527002700050027000500270005002700050027002700270028%002800270028002800280028052800270028002700280027002800270028%002700282805282728272E05282728052805280528272805280528272805%282828052827280528272805280528052827270028282705280527052827%270528052705280527052805522728052805282727052805280528052705%280528052805282828272805282728052827282853052805282728052827%2805280528282E0528052805002700280028282805270028052700280027%002800280028052700280027002800270028002700282727002800270027%000500270027002700270027002700280027002805280028002700280027%002705270027002700270028002800270028282800280027002805270028%002700280027002800270528002805280028282828052828280528282E05%280028052800280528052805280528052805280528052805282728052827%520528052805280028272700280527002805280528282805280528002E27%28002E282805280528002805270527052700270528052805280053282805%280528052805280528052805280528052805282828052827280528050028%002800280027002800270027002700270027002800270028002700280027%002800280028002700280027002800270028002700280027002800270028%002700280027002800270528002705280027002800270027002705270027%002800270028002705280027002800270028052700280027002800050028%052800280027%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.b0f8be9, 2021/12/08-19:11:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Друк</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2022-04-09T13:05:17+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2022-04-09T13:05:17+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2022-04-09T13:05:17+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>144</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAkAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A4Pb2lzcmQW8TymKNpZAg&#xA;LcY0FWc06BR1ObBxlLFW1ZlYMpKspqrDYgjuMVaBpuOuKq01xLdXb3F5M8ks8he4naruzOas5qfi&#xA;JrXriqkGI6HDaq0cgKtVQSRSprtuDUUP0b5MG1dklVJhAGHoszrxUsXUKQ5UcwAGbYNWh7jsOmBW&#xA;4Ip7maG2i+KSRxHEpYKOTmg3YhRv44qtaaZo0jZ2aOOvpoSSq8jU8R2riq1WABqoaooCa7e4ocKt&#xA;VHjgtV6SOYniUKysQ7HipYcARs1OQHxbgGh79BjarQxAIBoD1HjirXMAEbb7177Yqvu7e5tLh7a5&#xA;iaC4jNJIpAVZT13BxVTiimmYpEjSMFZyqgkhUUu7bdlVST7YqsxVUHTFVT0ZPQ9fb0+XD7S8q0r9&#xA;mvKnvSmKrCSdya/P2xVbNPBxjESMHC0lYsGDNyJqooOI40FN99+9BEzVS5TBRKGAHKgow5VFD9mt&#xA;e/WmQ4iram44NIFJjHwMxWqguDQGopUgGmNlVikg1IDDwNafhTFXFnPXemwxVtqqFJ/aFRQg9yN6&#xA;dOnfFXCZgjIGIRiCy1NCR0qPauNq5TGT8RIFD0Fd6bdx3xVaWGNqvlmnuJPVndpHIA5uSTRQFG58&#xA;AKYFcAtG5Eg0+EAVqajruKbYVaoaVpsdgcVTC8jNjcWd5DfQ3lxMi3bmMM3pSlyfTlEiqC441PUb&#xA;4qgndpZJJXYc2Jc7UqSd6BRQdcVaDkRlKChIatBy2BGx603xVfa3VxaXEdzbSGKeI8o5F6g4qqXl&#xA;jd6fdfV7uP0pgqOUqD8Mih1PwkjdWBwgqqXFvdQrD68LRCWMSQF0Kc4yTR1JA5AkEcssV0RtBbzC&#xA;VZDcHj9XZWUIN/j5qVJO3ShGKrI1hMcxeX03RA0ScSebclHGo+z8JLVPhTFVXSdRTT9RgvZLWG9S&#xA;FuRtrkFon2pRgCuJVBUeYyMnFFQFypYLtUCi8jVjv0FTlRlaqNT44Eoq6uLOSC0S3tzBNFGVupTI&#xA;X9Zy7MHC0HCikLT2xQhanxxSrW0V1cSelbxPPIFdykalm4RqXdqL2VFLE9gK5ISKF9tLa+pW4V2j&#xA;4t8KMFblxPDchhQNSu3TJCStMxYlmNSdyTuSTklV7iwvLVbd7iFoluoxPblhTnGWKhh7VQ4qultZ&#xA;Y7eG4YoUn5cArozjgaHmgJZPbkBXtiqgzqOuAlVqXSqJQ0KSiRCi8yw4EkHmvFl3FKb1HtkDK1UY&#xA;wOQLCqg7r0qMiq8BS4FQik9TUgD3pU4VaxVWW8uEtJLRXpbyuksiUG7xhghrSuwkbFVHFW3R0NHU&#xA;qSAwBFNmFQfpBrirS/CwYAVBqKgEbeIOxxV3oPzKcW5rXktNxx3NR7UxpVSCSOIShoUm9RCil+VU&#xA;JIPNeLL8QpTeo9sVdbXE1tcR3ELcZomDxtQGjKag0NRiqniq4ySGNYyxMaksqEmgLUqQPegxVbiq&#xA;tHayvazXKlBHAyI6tIiuTJypxQkO4+A1Kg079cVaknD28UPpIpiLEyqCHflTZzWh4022xVkkegeV&#xA;D5Dl1dtZA15bpYl070n+wYy3Hl03P7XTanfFWLoFZ1DNxUkAsamg8dsVVVkZgAxJ4igr2HtlkSq5&#xA;QCdzQUO/Xem2SVYw3rgVTkmk9Mwhj6ZIZkqeJYAgGnjvkJFVLIJdiq5ag1pX2PTFWxFIUL0+AEKW&#xA;7VNSB+GNIcFI6Gnbb3xpV9Lf0AArevyPJqjhwoKALSta13rhVa7bKFAXiKEiu+5NTU+9MbpV0P1i&#xA;ZgiBpGVTRVBYhRVjsOw3OESKtF2PfGyqxm7ZFVzyxtDHGIUR0LFpgX5OGpQMCxX4abcQPeuKWySe&#xA;prsBv4AUGFC+OONo5WaVY2jUFIyGJkJYDitAQKA8viI6eOKrAzAFQSAeo7GmKqktrcQuqTxtEzok&#xA;ihwQSkihkYV7MpBGEC1XAUXiCaVrSu1fHJ8IVGX97qWpzNqF/JLduvpQy3MlWPwpxjUua78IzSvW&#xA;mGlQZVKmgoO2NBW3tuCRueNJAWXiysQASvxAElTUdG+fTBwhVe+tLy39G3u4zEViWSFSACY5h6it&#xA;Ubmoau+PCFQ9Nh/kig++v8cQFUXChiEJKVPEkUJHaoqafflaqs8sc1wZFgWGM0rDCW4gAAGhcyNv&#xA;13OKqOKuxV2Kr5InRY2alJV5pRgTQMV3AJKmqnY/PoRiq3keIXagJPQV3p369sVaBpiq8SnuMlxK&#xA;4yHttjxK00haNUIWiVIIVQ2/iwFT9ORVpmZjViWIAFTvsBQD6AMVaxV2KuxVvi3ENQ8SSA3YkUqP&#xA;xxVsH05FZSrFaMKjkK9aEMKH32pirUFtcXU3pW8TTS8WYIgLNxRS7Gg/lVSTgVYhofDFXFuwxVdA&#xA;8CMxmjMqlHCqG40cqQrVoa8W3p3xSr2U8CQXcL2S3U08VIJi0gaAowdpFVCA3wKwPIUHXFVAYUOx&#xA;V2KqkXQ+OTiqtIHHFWatFHGjBgA3xU2J8dx45NV9xLbMkKwRNEVjAuCz8xJIGY8wOK8RxIHHfp13&#xA;wKsM0xhWEuxhVi6xVPEMwALBelSFFT7Yq06qporBxQGor1IqRuB06YVaBFfiqRQ9DTem3jirgpJo&#xA;BU7nbwG5xVQZaH9WVEKjdNvL+zhvJbUxhJITb3HqemzGOU0IRX+I9OqjbAqFtrme2mWaBuEqV4ts&#xA;aVFD19jiqnirsVcQQSCKEbEHFW04c151KVHIL1p3pXFW43eN1kQlXQhlYdQRuDiq0kkkk1J3JOKt&#xA;1NCOx3+7FWsVdiraOUdXABKkEBgCNvEHY4q53LuzkAFiSQoAG/gBsMVaxV2KuPTFVPAl2KrjI5jW&#xA;MsfTUllXsCwAJ+niMVcxj9NQoYSCvMkggjtQU2+/FVuKrlPbFCs9vcJDHO8TrDMWEUpUhXKU5BWO&#xA;x41FaYVU8VXGVyEBNQg4qPAVLU+84QVXhjxDMCFJIDdiRSv68kJKrGWM26xiJA6uzGcF+bBgoCEc&#xA;uFF4kii13NSdqSVdazRQzc5YEuU4uvpSF1WrIVVqoyNVGIYb0qN6jbFVkcM0gcxoziJechUE8VqB&#xA;yanQVIFcKrWJJJPU77Cg+4YqvgR5JkjRgjSEIHZgijl8PxMaADfcnAqxwXHIjbZQQKDYe3fEhVBl&#xA;KnKyKVUV4VhkRkEkj8SktWHCleQpsDXAqlirZDo9CCrqenQgjFV08808zzzu0s0rF5JHJZmZjUkk&#xA;7kk4q0DH6TAqTKWUq9dgoB5ArTeu29e3viq3FXYq7FXYq7FXYq7FXYq7FXYqpkUwJdTFW+JxpDip&#xA;GKtYpdiq9TUYUN4qqC2uGtnuRGxt43WJ5afCHcMyqT4kIx+jFVPFURc2F/aJbyXNvJAl1H61s0il&#xA;RJGSV5pUfEtQd8VU1kXieVeVRQjpTvkxJUdNa6lYwQyyLJbw6jAZIjuolh9Qr9K84vwySoTCrsVR&#xA;E0l7FAtlJI4twRcLb8iU5SopD8QacilN+uBVG6t5oJJIJ42iniYrJE4KsrLsQyncEYDyVDspUlWF&#xA;GGxB6g5WrWKqn7+4m/almkPU1LE/TiroZ/TSZfTR/WThycVKfErck8G+GlfAnFVPFV0b8G5cQ2xF&#xA;GFRuKYqtxV2KuxV2KuxV2KuxV2KuxV2KuxV2KtHpiqzAl2KuBocVVMKHYq7FV7SvIiiSRm9JeEKn&#xA;cKtSxAqfhFWJ2xVarMrBlNGU1BHYjFWT+Y/zB8yeZNO0zTtSuOdvpkHoqAFHqMGJEj0A+LhxT/Y1&#xA;6k5KKpHMkCpCYpfUZ05TLxK8H5MONa/F8IDV96dsmqIv9Ta8t7KE28EH1KEwiSGMRtLV2fnKR9pv&#xA;ipXwxVBYVdcSySMzyMXkcku7EkknqSTkZFVDK1diq6SN43ZJFKOpoysKEEdiDirTKymjAg0Bodti&#xA;Kg/dirbqFagYOKA8lrTcVpuB06YqtxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVx6Yqp4EuxVdFFJL&#xA;IkUSNJLIwWONQSzMTQAAbkk4qr3lleWF5NY3sL293buY5oJAVZHU0IIOKFLCrsVb4mhanwjYntU/&#xA;7WKogr6dgAY4XNy4ZJQxM0Yi5KV4q1FD86/Eu9BTvVVuH6usEqvGzTNx9JwwCrQ/FyXieVR7jLAK&#xA;VpELkgUFATuQuwFe9PuyStVHErxFa15b1+XWmKuKFIUlLKUcsAoYFhxp9pQagGu1euC1RGuavHqt&#xA;4lzHZQWISCGD0rYMEPoxrHzPIt8TcanKyVS/Aq6SMpxqVPJQw4kNSvY06H2xVpVZjRQSaE0G+wFS&#xA;fuxVGatrGoatcpc30glmjhit1YKF/dwoI0HwgfsriqCxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KtN0xVZgS7FXA03GKr5ZpZpXmldpJZGLySOSzMzGpYk7kk4q4GowobxVxFNj1xVERkrAUaNfjYOJ&#xA;CPioARQHwNcnEK1k1bbjyPEkrX4SRQ0+VTirWKqUylUU1FGr0IJ223HbK5lVs1xPPKZZpGkkagZ2&#xA;JJNBQbnwAyCXNyU8XUq1AaEU2IqMKFwUGNn5AEEAJvU1ruNu1MVW4q7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FVrdMBVbil2KuxVsKzV4gmgqadh44q2p7YhC/iOHLkK1pw3r8+lPxwqukllmme&#xA;WV2klkYtJI5LMzMaliTuSTiqvJPNKIxLI0giURxBiTxQEkKtegqTtlqrSxIUGnwigoAO5O9OvXvh&#xA;VERQ2LWE80lyUvEeNYLURlhIjBubGStF4UXbvXAqnJM8scYcqBAnpxgKFJUsW3KgcjVju2+KqSra&#xA;NbS+o0guQyegqgFCu/PkSQQelKA98BFqoen8J2q1RQ12pvXamQ4CqJFzF9ThtzZQmSJpWa4Jk9Rx&#xA;KqqoajhaRleS0HXrUY8JVC+m3jjwFW5F4n4CWXbcih6b7b4kFVokIBFBvsdvpyNqqQyxK5MsfqLx&#xA;cBQ3GjFSFav+SxBp36Y2qnzGNq7mMNq7mMFq7njau5+2Nq7njarsKuxV2KuxV2KuxV2KrW6YCq3F&#xA;LsVdirsVdiqqiF60I2BY1IGw8KkV+WFDgCSAOp6YqmawaaNMneW4lTVY50jjs/TBjMVG9RjJy2ZW&#xA;CinHv91oKoXhwCtIjcXUmOnw16qDuDUBhiq4WtwbVrsRk2yOsTy/sh3DMq/MhCfoxVSwq39XlaF5&#xA;1FY42VXNRsXqV26/snAqeeS/LVr5m802Ok/Wo9Pt7mRFd7iQciP2ljPEBnah4CnWgwFUt13Sl0rV&#xA;bmwW7gvlt3ZBdWrc4n4kiqnbwwqgj8bnioXkdkWp69hUk4q3PBNBNJBOjRTRMUljcFWVlNGVgdwQ&#xA;cVbh1C7g+tpGyn68npXDSKjkqXV9mcEqeSj4hvlR5qh5Y2ileJipaNirFGV1qDTZlJVh7g0wJWsV&#xA;r8IIFBsTXem/Yd8VdyPErtQkHoK7V79e+KtYq7FXYq7FV69MKG8VdirsVdirsVdirRFRiqzAl2Ku&#xA;xV2KtljxC7UBJGwrvTv17YquXphQq24tzKBcM6xUNWjAZq0PHYlR9qld8VaiEjOEjUu7GgUCpJ9g&#xA;MINKvVwfn4ZMG1XKrMaKCTQmg32AqfwyStYq7FV6c4jHPFJwlV6oVJDqVoQ3tv0+WBVMn92qcBUE&#xA;kuK1NQNjvSgptt3xVp+FfgBAoK8tzWg5dPfpirQUFWYsBxFaHqd6bYqomjVNd+wykpaCnFDfAY0q&#xA;7hH6ZPIiSo4rQUI3qSa/LtjSqZFMUuxV2Kt8W4hqHiSQG7EilR+OKr8KHYq7FXYq7FXYq7FXYqsY&#xA;UwK1iltQCwBIUE0LGtB7mlTirWKuxVevTChvFV0UssMiyxO0cqHkjoSrAjuCOmKuiZFlRnXmgYFk&#xA;rxqAdxXtXFUfq13p13ql1Pp1qbGxkkZre0LmQxoTsvI0rlkTaqA9H0WqG9bkvAgjjxoeVRSta0ph&#xA;VaONDUkGnw0Famvffwwq4igBqDUV27b03xVxUgAmnxCooQe9N6dOmKqhhQWnrmaPlz4fV/i9SgFe&#xA;f2ePHt9qvtgVCs1fllZNqiJw9k9xZh4J1cIGmjCyDaj/ALtyKjwNMCodTHxbkCWoOBBAANd6im+2&#xA;KrcVdirTgcQaipJ+HeopTfw3wFVrca/DWlB18ab/AI4paxVco3riEL/h4jY8qmprtTam1MKuABDE&#xA;sBQVANd9wKCg+nfFWsVdirsVdirsVdirsVWlfDBStcTil1D4YqvheWJw8btG4BAZCQaMKEVHiDTF&#xA;DsKtildxUe22KtYqqNMZZDJPykJXjUEA1C8U7HYUH+e+KrY/tZKPNVZuNfhBAoOprvTfsO+WK1iq&#xA;qYojEhjkLScWaZWCoFoaAKS3x1G/TAqlirrx7VpybVZFgotFlIZuXEc91CinKtNumVk2qaWnk/Xb&#xA;ryteeZYbaRtNsp44JJAhIPqByzg/yxlVDf6wwKkmKqs80t1cyzMiiSVmkZYkWNB1Y8Y4wqqo8AKD&#xA;FVMKzBioLBBycgVoKgVPhuQMVad4yF4KQQPiJNamvUbCmC1WFX4hyDxYkBqbEjrT78Ur3aAwxqiM&#xA;swLeq5YFWBpxovEcad9zXFVgClTueVRQU2pvXeuKrgKDChvFXYq7FW141+IkCh6Cu9Nu474q1irs&#xA;VdirsVVIoJJUldOPGFeclWVTQsE+EEgsasNl379MValdZJGdY1iDbiNK8R8uRY/jiqzFWypBoRQ7&#xA;HfwO4xVfDKInLGNZaq6cXrQF1K8hQjda1HviqniqpOJUYRSJweKqkUAbqT8Xid8VRh0+wGhrfjUI&#xA;zfm4aI6Zxk9QRBQRLz48KVNKVxVL8VV0krAsfpqOLM3qgfGeQUcSa9Bx2+ZycQq50KOUb7S7H55N&#xA;VuKtsAGIU1AOx6VGKuk9MQghj6hJDJTYAAUNa998BVQLERqwUD4jRq/FsB2r27bZTavQNM/O3zjZ&#xA;eSbvy8l2WuZJY1tL5hymjtmV/XQOe5bhxJ3ALe1CrA5DK80kly3rSyVZnLciWbfkWB3OSEVWcV8M&#xA;lQVG2uqatZafeWlpO8VnqKCK7hUkK4R1kG3zA+jIyiqXMtADWtRUgV23pQ5BK4RR/VzL6qiQOFEF&#xA;G5kEEl6040FKda4qtULxaoPL9kg7de+2KGwKYVbFKiu47gYq40qabDsDirsVbLAqBxAIrVt6mvjv&#xA;TbFVSX6r6MPpB/W4t9Y5048uR48Kb040rXvirUqwBYjFIzsyVlDLx4vyI4g1bkOIBrt8sVWcTQNT&#xA;4TsD2qP9vFXLxr8QJFD0NN6bdj3xVoGm464qvSKaYuURpCql5CoLUUdWNO3viq0Kx6DDSt+m3hjw&#xA;lXGNxSoO+4xoqqx3MsdrNbCKMrOyM0jRq0i+nWgRyOSA8vi49dq40VVLO8W3t7yJrSK4a6iESSyh&#xA;i0JEivzioRRvh4/I40qGVTUVUkdwNsaKtrESDUhaCoBrvv0FMPCVVIoGoZOBdI6F9jxAJoORHSuE&#xA;RVtGZGVkJVlIKsNiCOhGSVdNNLNK80zmSWRi8kjElmZjUkk9SThVaystOQIqARXwPTFVa3jt1u4V&#xA;vTIlqWQztCFeQRtQkorFVLcTtUjAq25sLqCC3uZYytvdh2tpDT4wjFG2qaUIxVCiKIhixINPgAAI&#xA;JqNjuKbVyPCFcAB0wgKiJHhaJYY41Bjdybj4g7q1OIZSxUceO1B33rthVazFuNQBxHEUAGw8aDf5&#xA;4q1hVdG0tvcJNEeE0LBlJAYBlPcGoORMVQ5UjrkCFVbeWCMS+rAJi8ZSIlmXg5Io/wAPWgrsdsCr&#xA;7Cx1G/lNpYwS3MpVpTBCrOSIlLFuK/yrXFVIiJzEsQKuRSQuy8S9TuDReIpTriqnirZC8QQ1WNar&#xA;Tp4Yq4lOAAB51PJq7EbUAFPn3xVrFVS3Fv6o+s8xFQ19OnKvE8ftbdaV9sVU8VdiqIuLi3ktraKO&#xA;1SGWFWE06s5aYsxIZgzFV4r8PwgYqoJ9rrSuxwhUx0pdMbUbcao8qaeXH1lrdVaUJXfiGKiuWKhX&#xA;ChiEJK1PEkUJHaoqaffhVxZiACSQoooPYVrt9JxVcYpBEsxUiJ2ZFfsWQAsPoDDFVtDStNhsTiq+&#xA;KWNFlDxLKZE4ozFgY25A814lamgI+Ko36dMCqeFVyySKrIrEI9OagkA0NRUd8VW4q7FV8EaSTRxv&#xA;IsKOwVpn5FUBNCzcA7UHU8VJ9sCr45Y/SNu6KFeRXa4CkyKFBBC7gUPKpHsMVUZVXmeDFkBIUkUJ&#xA;FdtqmmKrXChvgJK7bsKHpvtU4q5nd+IY1CDivsKk/wAcVVAESShpIinelQGAPaorv8sVbhmmglWW&#xA;FzHIv2XU0Irt1GKrMKtqATQkL7mv8K4q1t36YFXzparcy/Vi0luGcQtKoRyhqFZkVnCtTegY0Pc4&#xA;OFVJBLG3KNyrUK1UkGjChG3iDTI8Kue2kWNJCVIkrQBlLChp8Sg1H04OEq1H6iMSAKkMvxAMKMCp&#xA;2IO++x7dRh4SrQiPc48KrvSTiNyWqaim1Nqb4eFXcF8MPCFV7uVp5Vd5ZJyI405y/aARAvAbt8KU&#xA;4rv0HQdMNBC2WFIWQxzLIWRXLR8xxLDdDyVfiXoabe+DhCVF4GU0NQaA0IpsRUfhg4VcygtUrwXj&#xA;SiVO4Wldz+0ev4eGR4SqnQjAqsSyMUkUo67FWFDkxJV5kdlVSxZUFEBNQATXb6ckqpdLaCUC1eR4&#xA;uCVaVVRuZQeoKKzjiHqFNdx4dMVU3jdDxdSpIDAMKGjAMp38QajCq8XF0ts1uJXFrI6yPCGIjZ4w&#xA;QrFehZQ5oe1T44FU+LcS1DxBALdqmtP1YVaxVViMLyO1zI4qrsGVQ7GShKhuTLsW+0e3gcCromkk&#xA;ha3AiCgmYu4RW+FT8Ic0O/Za7nFVMSIIWjMal2ZWE1W5KACCoFeNGqCaiu23eqr/AP/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:57cf8e19-5ed2-4843-92d0-3368ec3657c0</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:4bf4e089-b52c-ed45-8cd9-c9bd3921cad0</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:3e535318-d7b4-4668-a6c3-9f77ca9ab311</stRef:instanceID>
            <stRef:documentID>xmp.did:81ba3066-d92e-b64e-9ae2-7acc7e997b81</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:81ba3066-d92e-b64e-9ae2-7acc7e997b81</stEvt:instanceID>
                  <stEvt:when>2022-04-06T16:35:09+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4bf4e089-b52c-ed45-8cd9-c9bd3921cad0</stEvt:instanceID>
                  <stEvt:when>2022-04-09T13:05:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
800 450 li
800 0 li
cp
clp
799.998 450 mo
0 450 li
0 0 li
799.998 0 li
799.998 450 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.0705882 .12549 .219608 rgb
f
468.145 0 mo
495.653 0 466.644 26.5001 464.144 76.5 cv
461.643 126.5 500.655 68.9999 535.666 34.5 cv
570.677 0 624.49 4.74991 654.578 9.25009 cv
684.665 13.7501 735.728 21.5 757.234 16.5 cv
778.741 11.5 787.244 0 787.244 0 cv
468.145 0 li
.0784314 .137255 .239216 rgb
f
0 271 mo
13.72 310 93.2517 347 163.662 317.5 cv
234.072 288 270.584 347.5 204.063 365.5 cv
137.543 383.5 56.8684 380.383 52.1916 412.192 cv
47.5147 444 90.193 450 90.193 450 cv
0 450 li
0 271 li
f
0 196.473 mo
31.2253 221.171 50.2384 252.77 163.662 262.885 cv
200.436 266.164 232.859 264.797 259.272 263.43 cv
314.324 260.581 343.27 257.731 331.102 296.956 cv
313.097 355 282.087 414.567 216.067 397.783 cv
150.046 381 116.829 450 116.829 450 cv
799.998 450 li
799.998 0 li
799.998 0 778.241 56 702.217 28 cv
626.194 0 504.318 27.8996 565.167 113.66 cv
626.017 199.42 699.882 321.691 630.028 342.346 cv
560.173 363 498.154 308.047 517.16 220.024 cv
536.166 132 507.157 131.368 469.145 147.184 cv
431.133 163 405.125 139 431.133 86 cv
457.142 33 399.501 65 295.28 78.0001 cv
243.718 84.4316 228.042 67.8553 232.85 51.279 cv
237.762 34.35 264.04 17.421 295.28 24.9999 cv
357.11 40 441.137 0 441.137 0 cv
0 0 li
0 196.473 li
f
34.193 362.654 mo
34.3845 363.579 li
34.4682 363.983 34.784 364.299 35.1881 364.382 cv
36.1133 364.574 li
35.1883 364.765 li
34.784 364.848 34.4682 365.164 34.3845 365.568 cv
34.193 366.493 li
34.0017 365.568 li
33.9182 365.164 33.6025 364.848 33.1984 364.765 cv
32.2732 364.574 li
33.1986 364.382 li
33.6027 364.298 33.9182 363.983 34.0017 363.579 cv
34.193 362.654 li
.831373 .890196 1 rgb
f
542.334 369.045 mo
542.523 369.955 li
542.605 370.353 542.916 370.663 543.313 370.745 cv
544.223 370.934 li
543.313 371.122 li
542.916 371.204 542.605 371.514 542.523 371.912 cv
542.334 372.822 li
542.146 371.912 li
542.064 371.514 541.753 371.204 541.356 371.122 cv
540.445 370.934 li
541.356 370.745 li
541.753 370.663 542.064 370.353 542.146 369.955 cv
542.334 369.045 li
cp
f
295.817 419.974 mo
296.198 421.816 li
296.364 422.62 296.993 423.248 297.797 423.415 cv
299.639 423.796 li
297.798 424.176 li
296.993 424.343 296.364 424.971 296.198 425.776 cv
295.817 427.617 li
295.436 425.776 li
295.27 424.971 294.641 424.343 293.836 424.177 cv
291.994 423.796 li
293.837 423.415 li
294.641 423.248 295.27 422.62 295.436 421.816 cv
295.817 419.974 li
cp
f
508.812 405.504 mo
509.12 406.992 li
509.255 407.642 509.762 408.15 510.412 408.284 cv
511.901 408.592 li
510.413 408.9 li
509.763 409.034 509.255 409.542 509.12 410.192 cv
508.812 411.68 li
508.504 410.192 li
508.37 409.542 507.862 409.034 507.212 408.9 cv
505.724 408.592 li
507.212 408.284 li
507.862 408.15 508.37 407.642 508.504 406.992 cv
508.812 405.504 li
cp
f
58.9854 418.654 mo
59.3227 420.282 li
59.4698 420.994 60.0256 421.55 60.7371 421.697 cv
62.3663 422.034 li
60.7371 422.37 li
60.0256 422.517 59.4698 423.073 59.3227 423.784 cv
58.9854 425.413 li
58.6486 423.784 li
58.5016 423.073 57.9456 422.517 57.234 422.37 cv
55.6049 422.034 li
57.2344 421.697 li
57.9458 421.549 58.5016 420.993 58.6486 420.282 cv
58.9854 418.654 li
f
56.729 38.5451 mo
57.1341 40.5028 li
57.311 41.3577 57.9793 42.0258 58.8346 42.2027 cv
60.7929 42.6078 li
58.8346 43.0125 li
57.9794 43.1892 57.3111 43.8571 57.1342 44.712 cv
56.729 46.6701 li
56.3241 44.7124 li
56.1473 43.8574 55.479 43.1892 54.6236 43.0125 cv
52.6653 42.6078 li
54.6236 42.2027 li
55.4791 42.0258 56.1474 41.3575 56.3242 40.5023 cv
56.729 38.5451 li
cp
f
762.743 428.471 mo
762.93 429.377 li
763.012 429.773 763.321 430.082 763.717 430.164 cv
764.623 430.351 li
763.718 430.538 li
763.322 430.62 763.012 430.929 762.93 431.325 cv
762.743 432.231 li
762.556 431.325 li
762.474 430.93 762.164 430.62 761.769 430.538 cv
760.863 430.351 li
761.769 430.164 li
762.165 430.082 762.474 429.773 762.556 429.377 cv
762.743 428.471 li
f
678.836 47.8554 mo
679.222 49.7225 li
679.391 50.5381 680.028 51.1752 680.844 51.344 cv
682.712 51.7303 li
680.844 52.1163 li
680.029 52.2849 679.391 52.9221 679.222 53.7373 cv
678.836 55.6049 li
678.45 53.7379 li
678.281 52.9223 677.644 52.2849 676.828 52.1163 cv
674.96 51.7303 li
676.828 51.344 li
677.644 51.1752 678.281 50.5379 678.45 49.7221 cv
678.836 47.8554 li
f
60.7428 254.094 mo
61.0607 255.63 li
61.1995 256.301 61.7238 256.825 62.3948 256.964 cv
63.9312 257.282 li
62.3951 257.599 li
61.724 257.738 61.1995 258.262 61.0607 258.933 cv
60.7428 260.469 li
60.4252 258.933 li
60.2865 258.262 59.7621 257.738 59.0911 257.599 cv
57.5547 257.282 li
59.0914 256.964 li
59.7623 256.825 60.2865 256.301 60.4252 255.63 cv
60.7428 254.094 li
cp
f
191.391 372.751 mo
191.859 375.015 li
192.064 376.003 192.836 376.776 193.825 376.98 cv
196.089 377.448 li
193.826 377.916 li
192.837 378.121 192.064 378.893 191.859 379.882 cv
191.391 382.145 li
190.923 379.882 li
190.718 378.893 189.946 378.121 188.957 377.916 cv
186.692 377.448 li
188.957 376.98 li
189.946 376.775 190.718 376.003 190.923 375.015 cv
191.391 372.751 li
cp
f
429.816 424.503 mo
430.016 425.469 li
430.103 425.89 430.433 426.22 430.854 426.307 cv
431.82 426.507 li
430.855 426.706 li
430.433 426.793 430.103 427.123 430.016 427.545 cv
429.816 428.51 li
429.616 427.545 li
429.529 427.123 429.199 426.793 428.777 426.706 cv
427.812 426.507 li
428.778 426.307 li
429.2 426.22 429.529 425.89 429.616 425.469 cv
429.816 424.503 li
cp
f
667.216 378.201 mo
667.577 379.949 li
667.735 380.712 668.332 381.309 669.096 381.467 cv
670.844 381.828 li
669.096 382.19 li
668.332 382.347 667.735 382.944 667.577 383.707 cv
667.216 385.456 li
666.854 383.707 li
666.696 382.944 666.099 382.347 665.336 382.19 cv
663.587 381.828 li
665.336 381.466 li
666.1 381.309 666.696 380.712 666.854 379.949 cv
667.216 378.201 li
cp
f
431.82 387.821 mo
432.01 388.737 li
432.093 389.137 432.406 389.45 432.806 389.533 cv
433.723 389.723 li
432.806 389.912 li
432.406 389.995 432.093 390.307 432.01 390.707 cv
431.82 391.624 li
431.631 390.708 li
431.548 390.307 431.235 389.995 430.835 389.912 cv
429.918 389.723 li
430.835 389.533 li
431.235 389.45 431.548 389.137 431.631 388.737 cv
431.82 387.821 li
cp
f
29.7874 201.665 mo
30.2906 204.096 li
30.5103 205.158 31.3401 205.987 32.4022 206.207 cv
34.834 206.71 li
32.4026 207.213 li
31.3405 207.432 30.5103 208.262 30.2906 209.324 cv
29.7874 211.754 li
29.2847 209.324 li
29.0651 208.262 28.2353 207.432 27.1732 207.213 cv
24.7412 206.71 li
27.1736 206.207 li
28.2355 205.987 29.0651 205.158 29.2847 204.096 cv
29.7874 201.665 li
f
242.172 38.8801 mo
242.355 39.765 li
242.435 40.1516 242.737 40.4535 243.124 40.5334 cv
244.009 40.7165 li
243.124 40.8993 li
242.737 40.9792 242.435 41.2812 242.355 41.6678 cv
242.172 42.5528 li
241.989 41.668 li
241.909 41.2814 241.607 40.9792 241.22 40.8993 cv
240.335 40.7165 li
241.22 40.5334 li
241.607 40.4533 241.909 40.1514 241.989 39.7648 cv
242.172 38.8801 li
f
775.485 373.826 mo
775.712 374.926 li
775.811 375.406 776.187 375.781 776.667 375.88 cv
777.766 376.108 li
776.667 376.335 li
776.187 376.434 775.812 376.809 775.712 377.289 cv
775.485 378.388 li
775.257 377.289 li
775.158 376.809 774.783 376.434 774.303 376.335 cv
773.203 376.108 li
774.303 375.88 li
774.783 375.781 775.158 375.406 775.257 374.926 cv
775.485 373.826 li
f
71.8589 100.964 mo
72.0521 101.897 li
72.1365 102.305 72.455 102.623 72.8627 102.707 cv
73.7963 102.9 li
72.8627 103.093 li
72.4551 103.178 72.1365 103.496 72.0522 103.904 cv
71.8589 104.837 li
71.666 103.904 li
71.5817 103.496 71.2631 103.178 70.8553 103.093 cv
69.9218 102.9 li
70.8553 102.707 li
71.2632 102.623 71.5818 102.304 71.666 101.897 cv
71.8589 100.964 li
cp
f
153.769 43.8731 mo
154.071 45.3325 li
154.203 45.9699 154.701 46.4679 155.339 46.5998 cv
156.799 46.9017 li
155.339 47.2034 li
154.701 47.3352 154.203 47.8331 154.071 48.4704 cv
153.769 49.9301 li
153.467 48.4707 li
153.335 47.8333 152.837 47.3352 152.2 47.2034 cv
150.74 46.9017 li
152.2 46.5997 li
152.837 46.4678 153.335 45.9698 153.467 45.3325 cv
153.769 43.8731 li
cp
f
601.307 194.554 mo
601.729 196.594 li
601.914 197.486 602.61 198.182 603.501 198.366 cv
605.542 198.788 li
603.501 199.21 li
602.61 199.394 601.914 200.09 601.729 200.981 cv
601.307 203.022 li
600.885 200.982 li
600.701 200.09 600.004 199.394 599.113 199.21 cv
597.072 198.788 li
599.113 198.366 li
600.004 198.182 600.701 197.485 600.885 196.594 cv
601.307 194.554 li
cp
f
421.143 34.5724 mo
421.331 35.48 li
421.413 35.8764 421.723 36.1862 422.119 36.2681 cv
423.027 36.456 li
422.119 36.6435 li
421.723 36.7254 421.413 37.0351 421.331 37.4316 cv
421.143 38.3389 li
420.956 37.4316 li
420.873 37.0351 420.564 36.7254 420.167 36.6435 cv
419.259 36.456 li
420.167 36.2681 li
420.564 36.186 420.873 35.8762 420.956 35.48 cv
421.143 34.5724 li
f
237.934 389.722 mo
238.154 390.781 li
238.249 391.244 238.611 391.605 239.073 391.701 cv
240.133 391.92 li
239.073 392.139 li
238.611 392.235 238.249 392.596 238.154 393.058 cv
237.934 394.118 li
237.715 393.059 li
237.62 392.596 237.258 392.235 236.796 392.139 cv
235.736 391.92 li
236.796 391.701 li
237.258 391.605 237.62 391.244 237.715 390.781 cv
237.934 389.722 li
cp
f
272.421 27.4056 mo
272.855 29.5058 li
273.045 30.4227 273.762 31.1396 274.68 31.3293 cv
276.78 31.7639 li
274.68 32.1981 li
273.762 32.3876 273.045 33.104 272.855 34.0212 cv
272.421 36.1217 li
271.986 34.0216 li
271.797 33.1042 271.08 32.3876 270.162 32.1981 cv
268.062 31.7639 li
270.162 31.3293 li
271.08 31.1396 271.797 30.4225 271.987 29.5051 cv
272.421 27.4056 li
f
712.179 361.151 mo
712.68 363.573 li
712.899 364.631 713.726 365.458 714.784 365.676 cv
717.207 366.178 li
714.784 366.678 li
713.726 366.897 712.899 367.723 712.68 368.781 cv
712.179 371.204 li
711.678 368.782 li
711.459 367.724 710.632 366.897 709.574 366.678 cv
707.151 366.178 li
709.575 365.676 li
710.633 365.457 711.459 364.631 711.678 363.573 cv
712.179 361.151 li
cp
f
38.4893 429.389 mo
38.6994 430.404 li
38.7912 430.847 39.1379 431.193 39.5813 431.285 cv
40.5968 431.495 li
39.5815 431.705 li
39.1379 431.797 38.7912 432.143 38.6994 432.587 cv
38.4893 433.602 li
38.2795 432.587 li
38.1878 432.143 37.8411 431.797 37.3976 431.705 cv
36.3821 431.495 li
37.3978 431.285 li
37.8413 431.193 38.1878 430.847 38.2795 430.404 cv
38.4893 429.389 li
f
751.8 304.699 mo
752.286 307.045 li
752.498 308.07 753.299 308.87 754.323 309.082 cv
756.67 309.568 li
754.323 310.053 li
753.299 310.265 752.498 311.065 752.286 312.089 cv
751.8 314.436 li
751.315 312.09 li
751.103 311.065 750.302 310.265 749.277 310.053 cv
746.931 309.568 li
749.277 309.082 li
750.302 308.87 751.103 308.069 751.315 307.045 cv
751.8 304.699 li
f
541.79 80.2327 mo
542.137 81.908 li
542.289 82.6397 542.86 83.2114 543.592 83.3628 cv
545.268 83.7095 li
543.593 84.0557 li
542.861 84.207 542.289 84.7788 542.137 85.5106 cv
541.79 87.1859 li
541.444 85.5106 li
541.293 84.7788 540.721 84.207 539.989 84.0558 cv
538.313 83.7095 li
539.989 83.3628 li
540.721 83.2114 541.293 82.6395 541.444 81.9077 cv
541.79 80.2327 li
cp
f
333.039 31.1461 mo
333.384 32.8111 li
333.534 33.5383 334.103 34.1065 334.83 34.2569 cv
336.496 34.6014 li
334.83 34.9455 li
334.103 35.0959 333.534 35.6641 333.384 36.3914 cv
333.039 38.0564 li
332.695 36.3914 li
332.545 35.6642 331.976 35.0959 331.249 34.9456 cv
329.583 34.6014 li
331.249 34.2568 li
331.976 34.1064 332.545 33.5382 332.695 32.8111 cv
333.039 31.1461 li
cp
f
140.796 328.108 mo
141.009 329.136 li
141.102 329.585 141.453 329.936 141.902 330.029 cv
142.931 330.241 li
141.902 330.454 li
141.453 330.547 141.102 330.897 141.009 331.346 cv
140.796 332.375 li
140.584 331.347 li
140.491 330.898 140.14 330.547 139.69 330.454 cv
138.662 330.241 li
139.691 330.029 li
140.14 329.936 140.491 329.585 140.584 329.136 cv
140.796 328.108 li
cp
f
65.3963 132.159 mo
65.598 133.133 li
65.686 133.559 66.0186 133.891 66.4443 133.979 cv
67.4189 134.181 li
66.4443 134.382 li
66.0186 134.47 65.6861 134.803 65.598 135.228 cv
65.3963 136.203 li
65.1949 135.228 li
65.1068 134.803 64.7742 134.47 64.3486 134.382 cv
63.374 134.181 li
64.3486 133.979 li
64.7742 133.891 65.1069 133.559 65.1949 133.133 cv
65.3963 132.159 li
cp
f
755.058 69.5833 mo
755.339 70.9383 li
755.461 71.5298 755.924 71.9923 756.516 72.1148 cv
757.871 72.395 li
756.516 72.6751 li
755.924 72.7975 755.461 73.2598 755.339 73.8516 cv
755.058 75.2068 li
754.778 73.8516 li
754.656 73.2598 754.193 72.7975 753.601 72.6753 cv
752.246 72.395 li
753.601 72.1148 li
754.193 71.9923 754.656 71.5298 754.778 70.9379 cv
755.058 69.5833 li
f
142.872 275.622 mo
143.184 277.13 li
143.32 277.789 143.835 278.303 144.494 278.44 cv
146.002 278.751 li
144.494 279.063 li
143.835 279.199 143.32 279.714 143.184 280.372 cv
142.872 281.881 li
142.56 280.373 li
142.424 279.714 141.909 279.199 141.25 279.063 cv
139.742 278.751 li
141.251 278.439 li
141.909 278.303 142.424 277.789 142.56 277.13 cv
142.872 275.622 li
cp
f
713.527 260.314 mo
713.945 262.334 li
714.128 263.216 714.817 263.906 715.7 264.088 cv
717.721 264.506 li
715.701 264.924 li
714.818 265.106 714.128 265.796 713.945 266.678 cv
713.527 268.698 li
713.109 266.678 li
712.927 265.796 712.237 265.106 711.355 264.924 cv
709.334 264.506 li
711.355 264.088 li
712.238 263.906 712.927 263.216 713.109 262.334 cv
713.527 260.314 li
f
43.6993 99.4627 mo
44.1013 101.405 li
44.2769 102.253 44.9399 102.916 45.7885 103.091 cv
47.7313 103.493 li
45.7889 103.895 li
44.9402 104.07 44.277 104.733 44.1013 105.581 cv
43.6993 107.524 li
43.2977 105.581 li
43.1223 104.733 42.4592 104.07 41.6107 103.895 cv
39.6678 103.493 li
41.6111 103.091 li
42.4594 102.916 43.1223 102.253 43.2977 101.405 cv
43.6993 99.4627 li
cp
f
456.967 44.7809 mo
457.267 46.2298 li
457.398 46.8623 457.893 47.3567 458.526 47.4876 cv
459.975 47.7875 li
458.526 48.0868 li
457.893 48.2177 457.398 48.7121 457.267 49.3451 cv
456.967 50.7938 li
456.668 49.3451 li
456.537 48.7121 456.042 48.2177 455.409 48.087 cv
453.96 47.7875 li
455.41 47.4876 li
456.042 47.3567 456.537 46.8623 456.668 46.2298 cv
456.967 44.7809 li
f
129.766 198.599 mo
130.206 200.726 li
130.398 201.655 131.124 202.381 132.054 202.573 cv
134.182 203.013 li
132.054 203.453 li
131.125 203.645 130.398 204.371 130.206 205.3 cv
129.766 207.428 li
129.326 205.3 li
129.134 204.371 128.407 203.645 127.478 203.453 cv
125.35 203.013 li
127.478 202.573 li
128.407 202.381 129.134 201.655 129.326 200.725 cv
129.766 198.599 li
cp
f
764.269 237.25 mo
764.589 238.799 li
764.729 239.475 765.258 240.003 765.934 240.143 cv
767.483 240.463 li
765.935 240.783 li
765.258 240.923 764.729 241.452 764.589 242.128 cv
764.269 243.676 li
763.949 242.128 li
763.809 241.452 763.28 240.923 762.604 240.783 cv
761.055 240.463 li
762.604 240.143 li
763.28 240.003 763.809 239.475 763.949 238.798 cv
764.269 237.25 li
f
135.251 406.021 mo
135.456 407.012 li
135.545 407.445 135.884 407.783 136.317 407.872 cv
137.308 408.077 li
136.317 408.282 li
135.884 408.372 135.545 408.71 135.456 409.143 cv
135.251 410.134 li
135.046 409.143 li
134.956 408.71 134.618 408.372 134.185 408.282 cv
133.194 408.077 li
134.185 407.872 li
134.618 407.783 134.956 407.445 135.046 407.012 cv
135.251 406.021 li
f
782.462 151.679 mo
782.9 153.792 li
783.091 154.715 783.812 155.436 784.735 155.627 cv
786.849 156.064 li
784.735 156.501 li
783.812 156.692 783.091 157.413 782.9 158.336 cv
782.462 160.449 li
782.025 158.336 li
781.834 157.413 781.113 156.692 780.19 156.501 cv
778.076 156.064 li
780.19 155.627 li
781.113 155.436 781.834 154.715 782.025 153.792 cv
782.462 151.679 li
f
126.096 124.068 mo
126.307 125.088 li
126.399 125.534 126.747 125.882 127.193 125.974 cv
128.213 126.185 li
127.193 126.396 li
126.747 126.488 126.399 126.836 126.307 127.281 cv
126.096 128.301 li
125.885 127.281 li
125.793 126.836 125.444 126.488 124.999 126.396 cv
123.979 126.185 li
124.999 125.974 li
125.445 125.882 125.793 125.534 125.885 125.088 cv
126.096 124.068 li
cp
f
572.707 408.987 mo
573.116 410.962 li
573.294 411.824 573.969 412.498 574.831 412.676 cv
576.806 413.085 li
574.831 413.493 li
573.969 413.671 573.295 414.345 573.116 415.208 cv
572.707 417.182 li
572.299 415.208 li
572.121 414.345 571.447 413.671 570.584 413.493 cv
568.609 413.085 li
570.584 412.676 li
571.447 412.498 572.121 411.824 572.299 410.962 cv
572.707 408.987 li
f
709.414 192.43 mo
709.609 193.373 li
709.695 193.785 710.017 194.107 710.429 194.193 cv
711.373 194.388 li
710.429 194.583 li
710.017 194.668 709.695 194.99 709.609 195.402 cv
709.414 196.346 li
709.219 195.402 li
709.134 194.99 708.812 194.668 708.399 194.583 cv
707.455 194.388 li
708.4 194.193 li
708.812 194.107 709.134 193.785 709.219 193.373 cv
709.414 192.43 li
cp
f
682.3 145.561 mo
682.662 147.309 li
682.82 148.072 683.416 148.669 684.18 148.827 cv
685.928 149.189 li
684.18 149.55 li
683.416 149.708 682.82 150.304 682.662 151.067 cv
682.3 152.815 li
681.938 151.068 li
681.781 150.304 681.184 149.708 680.42 149.55 cv
678.672 149.189 li
680.421 148.827 li
681.184 148.669 681.781 148.072 681.938 147.309 cv
682.3 145.561 li
cp
f
gsave
799.998 450 mo
0 450 li
0 0 li
799.998 0 li
799.998 450 li
clp
92.1705 414.172 mo
92.1705 413.768 92.4977 413.441 92.9016 413.441 cv
93.3053 413.441 93.6327 413.768 93.6327 414.172 cv
93.6327 414.575 93.3053 414.902 92.9016 414.902 cv
92.4977 414.902 92.1705 414.575 92.1705 414.172 cv
f
221.346 403.303 mo
221.346 402.471 222.02 401.798 222.851 401.798 cv
223.683 401.798 224.357 402.471 224.357 403.303 cv
224.357 404.134 223.683 404.808 222.851 404.808 cv
222.02 404.808 221.346 404.134 221.346 403.303 cv
cp
f
365.302 1.12776 mo
365.302 .902125 365.484 .719251 365.71 .719251 cv
365.936 .719251 366.119 .902125 366.119 1.12776 cv
366.119 1.35339 365.936 1.53626 365.71 1.53626 cv
365.484 1.53626 365.302 1.35339 365.302 1.12776 cv
f
344.455 428.937 mo
344.455 428.49 344.817 428.128 345.264 428.128 cv
345.711 428.128 346.073 428.49 346.073 428.937 cv
346.073 429.384 345.711 429.746 345.264 429.746 cv
344.817 429.746 344.455 429.384 344.455 428.937 cv
cp
f
91.2347 41.25 mo
91.2347 41.0244 91.4176 40.8416 91.6433 40.8416 cv
91.8689 40.8416 92.0518 41.0244 92.0518 41.25 cv
92.0518 41.4756 91.8689 41.6584 91.6433 41.6584 cv
91.4176 41.6584 91.2347 41.4756 91.2347 41.25 cv
cp
f
288.05 364.468 mo
288.05 364.213 288.256 364.007 288.511 364.007 cv
288.766 364.007 288.972 364.213 288.972 364.468 cv
288.972 364.722 288.766 364.929 288.511 364.929 cv
288.256 364.929 288.05 364.722 288.05 364.468 cv
cp
f
88.0426 70.4264 mo
88.0426 69.4635 88.8235 68.6829 89.7867 68.6829 cv
90.7499 68.6829 91.5306 69.4635 91.5306 70.4264 cv
91.5306 71.3892 90.7499 72.1698 89.7867 72.1698 cv
88.8235 72.1698 88.0426 71.3892 88.0426 70.4264 cv
cp
f
262.142 52.1857 mo
262.142 51.6831 262.549 51.2754 263.052 51.2754 cv
263.555 51.2754 263.963 51.6831 263.963 52.1857 cv
263.963 52.6886 263.555 53.0961 263.052 53.0961 cv
262.549 53.0961 262.142 52.6886 262.142 52.1857 cv
f
787.411 182.17 mo
787.411 181.888 787.639 181.661 787.92 181.661 cv
788.202 181.661 788.43 181.888 788.43 182.17 cv
788.43 182.451 788.202 182.679 787.92 182.679 cv
787.639 182.679 787.411 182.451 787.411 182.17 cv
f
768.649 195.07 mo
768.649 194.638 769 194.287 769.432 194.287 cv
769.865 194.287 770.216 194.638 770.216 195.07 cv
770.216 195.503 769.865 195.854 769.432 195.854 cv
769 195.854 768.649 195.503 768.649 195.07 cv
f
732.433 272.475 mo
732.433 272.032 732.792 271.673 733.235 271.673 cv
733.679 271.673 734.038 272.032 734.038 272.475 cv
734.038 272.918 733.679 273.278 733.235 273.278 cv
732.792 273.278 732.433 272.918 732.433 272.475 cv
f
152.839 192.596 mo
152.839 192.144 153.205 191.778 153.657 191.778 cv
154.109 191.778 154.475 192.144 154.475 192.596 cv
154.475 193.048 154.109 193.414 153.657 193.414 cv
153.205 193.414 152.839 193.048 152.839 192.596 cv
cp
f
119.757 223.331 mo
119.757 223.025 120.005 222.777 120.311 222.777 cv
120.618 222.777 120.866 223.025 120.866 223.331 cv
120.866 223.637 120.618 223.885 120.311 223.885 cv
120.005 223.885 119.757 223.637 119.757 223.331 cv
cp
f
99.5453 298.137 mo
99.5453 297.309 100.217 296.638 101.045 296.638 cv
101.873 296.638 102.545 297.309 102.545 298.137 cv
102.545 298.965 101.873 299.637 101.045 299.637 cv
100.217 299.637 99.5453 298.965 99.5453 298.137 cv
f
470.172 74.0306 mo
470.172 73.4561 470.638 72.9903 471.213 72.9903 cv
471.788 72.9903 472.254 73.4561 472.254 74.0306 cv
472.254 74.6052 471.788 75.071 471.213 75.071 cv
470.638 75.071 470.172 74.6052 470.172 74.0306 cv
cp
f
482.502 45.4991 mo
482.502 44.4982 483.314 43.687 484.315 43.687 cv
485.316 43.687 486.128 44.4982 486.128 45.4991 cv
486.128 46.5 485.316 47.3114 484.315 47.3114 cv
483.314 47.3114 482.502 46.5 482.502 45.4991 cv
f
743.736 260.745 mo
743.736 260.408 744.009 260.135 744.346 260.135 cv
744.683 260.135 744.957 260.408 744.957 260.745 cv
744.957 261.082 744.683 261.355 744.346 261.355 cv
744.009 261.355 743.736 261.082 743.736 260.745 cv
f
602.369 438.494 mo
602.369 437.41 603.248 436.532 604.332 436.532 cv
605.417 436.532 606.295 437.41 606.295 438.494 cv
606.295 439.578 605.417 440.457 604.332 440.457 cv
603.248 440.457 602.369 439.578 602.369 438.494 cv
f
258.156 360.36 mo
258.156 359.557 258.808 358.905 259.611 358.905 cv
260.414 358.905 261.066 359.557 261.066 360.36 cv
261.066 361.163 260.414 361.814 259.611 361.814 cv
258.808 361.814 258.156 361.163 258.156 360.36 cv
cp
f
583.28 123.429 mo
583.28 122.619 583.937 121.962 584.747 121.962 cv
585.558 121.962 586.215 122.619 586.215 123.429 cv
586.215 124.24 585.558 124.896 584.747 124.896 cv
583.937 124.896 583.28 124.24 583.28 123.429 cv
cp
f
607.204 400.431 mo
607.204 400.127 607.451 399.88 607.755 399.88 cv
608.06 399.88 608.307 400.127 608.307 400.431 cv
608.307 400.735 608.06 400.982 607.755 400.982 cv
607.451 400.982 607.204 400.735 607.204 400.431 cv
f
739.758 400.04 mo
739.758 399.275 740.378 398.655 741.143 398.655 cv
741.909 398.655 742.529 399.275 742.529 400.04 cv
742.529 400.806 741.909 401.426 741.143 401.426 cv
740.378 401.426 739.758 400.806 739.758 400.04 cv
f
427.205 26.3732 mo
427.205 26.145 427.39 25.9597 427.619 25.9597 cv
427.847 25.9597 428.033 26.145 428.033 26.3732 cv
428.033 26.6018 427.847 26.7869 427.619 26.7869 cv
427.39 26.7869 427.205 26.6018 427.205 26.3732 cv
f
653.497 94.8909 mo
653.497 94.4658 653.842 94.1211 654.267 94.1211 cv
654.692 94.1211 655.037 94.4658 655.037 94.8909 cv
655.037 95.3159 654.692 95.6608 654.267 95.6608 cv
653.842 95.6608 653.497 95.3159 653.497 94.8909 cv
f
767.881 240.404 mo
767.881 240.136 768.099 239.918 768.368 239.918 cv
768.637 239.918 768.854 240.136 768.854 240.404 cv
768.854 240.673 768.637 240.891 768.368 240.891 cv
768.099 240.891 767.881 240.673 767.881 240.404 cv
f
687.733 448.326 mo
687.733 448.096 687.919 447.91 688.149 447.91 cv
688.379 447.91 688.565 448.096 688.565 448.326 cv
688.565 448.556 688.379 448.742 688.149 448.742 cv
687.919 448.742 687.733 448.556 687.733 448.326 cv
f
234 2.35327 mo
234 2.13346 234.178 1.95521 234.398 1.95521 cv
234.618 1.95521 234.797 2.13346 234.797 2.35327 cv
234.797 2.57328 234.618 2.75154 234.398 2.75154 cv
234.178 2.75154 234 2.57328 234 2.35327 cv
f
410.527 61.7519 mo
410.527 60.9907 411.144 60.3737 411.906 60.3737 cv
412.667 60.3737 413.284 60.9907 413.284 61.7519 cv
413.284 62.5131 412.667 63.1302 411.906 63.1302 cv
411.144 63.1302 410.527 62.5131 410.527 61.7519 cv
cp
f
632.614 102.96 mo
632.614 102.558 632.94 102.232 633.342 102.232 cv
633.743 102.232 634.069 102.558 634.069 102.96 cv
634.069 103.361 633.743 103.687 633.342 103.687 cv
632.94 103.687 632.614 103.361 632.614 102.96 cv
cp
f
126.053 343.704 mo
126.053 342.62 126.932 341.741 128.017 341.741 cv
129.101 341.741 129.981 342.62 129.981 343.704 cv
129.981 344.788 129.101 345.667 128.017 345.667 cv
126.932 345.667 126.053 344.788 126.053 343.704 cv
cp
f
629.572 448.795 mo
629.572 448.333 629.946 447.959 630.408 447.959 cv
630.87 447.959 631.244 448.333 631.244 448.795 cv
631.244 449.256 630.87 449.631 630.408 449.631 cv
629.946 449.631 629.572 449.256 629.572 448.795 cv
f
292.817 8.74323 mo
292.817 8.46982 293.039 8.2482 293.312 8.2482 cv
293.585 8.2482 293.807 8.46982 293.807 8.74323 cv
293.807 9.01663 293.585 9.23805 293.312 9.23805 cv
293.039 9.23805 292.817 9.01663 292.817 8.74323 cv
f
101.354 150.343 mo
101.354 149.685 101.887 149.152 102.545 149.152 cv
103.203 149.152 103.736 149.685 103.736 150.343 cv
103.736 151.001 103.203 151.534 102.545 151.534 cv
101.887 151.534 101.354 151.001 101.354 150.343 cv
cp
f
781.047 228.802 mo
781.047 228.02 781.681 227.386 782.463 227.386 cv
783.245 227.386 783.879 228.02 783.879 228.802 cv
783.879 229.583 783.245 230.217 782.463 230.217 cv
781.681 230.217 781.047 229.583 781.047 228.802 cv
f
699.579 272.198 mo
699.579 271.702 699.981 271.299 700.478 271.299 cv
700.975 271.299 701.377 271.702 701.377 272.198 cv
701.377 272.695 700.975 273.097 700.478 273.097 cv
699.981 273.097 699.579 272.695 699.579 272.198 cv
cp
f
165.22 336.792 mo
165.22 336.284 165.632 335.872 166.14 335.872 cv
166.648 335.872 167.059 336.284 167.059 336.792 cv
167.059 337.299 166.648 337.711 166.14 337.711 cv
165.632 337.711 165.22 337.299 165.22 336.792 cv
cp
f
141.058 156.185 mo
141.058 155.256 141.811 154.502 142.741 154.502 cv
143.671 154.502 144.425 155.256 144.425 156.185 cv
144.425 157.115 143.671 157.869 142.741 157.869 cv
141.811 157.869 141.058 157.115 141.058 156.185 cv
cp
f
125.563 275.944 mo
125.563 275.654 125.798 275.419 126.087 275.419 cv
126.377 275.419 126.612 275.654 126.612 275.944 cv
126.612 276.233 126.377 276.468 126.087 276.468 cv
125.798 276.468 125.563 276.233 125.563 275.944 cv
cp
f
205.658 361.12 mo
205.658 360.617 206.066 360.209 206.57 360.209 cv
207.073 360.209 207.481 360.617 207.481 361.12 cv
207.481 361.624 207.073 362.031 206.57 362.031 cv
206.066 362.031 205.658 361.624 205.658 361.12 cv
cp
f
690.208 164.915 mo
690.208 164.706 690.377 164.537 690.586 164.537 cv
690.794 164.537 690.963 164.706 690.963 164.915 cv
690.963 165.123 690.794 165.292 690.586 165.292 cv
690.377 165.292 690.208 165.123 690.208 164.915 cv
cp
f
163.131 134.952 mo
163.131 134.338 163.629 133.841 164.243 133.841 cv
164.857 133.841 165.354 134.338 165.354 134.952 cv
165.354 135.566 164.857 136.063 164.243 136.063 cv
163.629 136.063 163.131 135.566 163.131 134.952 cv
cp
f
17.3182 339.716 mo
17.3182 339.462 17.524 339.256 17.7777 339.256 cv
18.0315 339.256 18.2372 339.462 18.2372 339.716 cv
18.2372 339.969 18.0315 340.175 17.7777 340.175 cv
17.524 340.175 17.3182 339.969 17.3182 339.716 cv
f
583.236 427.14 mo
583.236 426.708 583.587 426.357 584.02 426.357 cv
584.452 426.357 584.803 426.708 584.803 427.14 cv
584.803 427.573 584.452 427.923 584.02 427.923 cv
583.587 427.923 583.236 427.573 583.236 427.14 cv
f
406.978 387.33 mo
406.978 386.338 407.783 385.534 408.775 385.534 cv
409.767 385.534 410.571 386.338 410.571 387.33 cv
410.571 388.322 409.767 389.125 408.775 389.125 cv
407.783 389.125 406.978 388.322 406.978 387.33 cv
cp
f
385.363 440.139 mo
385.363 439.88 385.573 439.67 385.832 439.67 cv
386.091 439.67 386.301 439.88 386.301 440.139 cv
386.301 440.398 386.091 440.608 385.832 440.608 cv
385.573 440.608 385.363 440.398 385.363 440.139 cv
f
-.132141 88.462 mo
-.132141 88.0897 .169853 87.7878 .542368 87.7878 cv
.914783 87.7878 1.21678 88.0897 1.21678 88.462 cv
1.21678 88.8344 .914783 89.1363 .542368 89.1363 cv
.169853 89.1363 -.132141 88.8344 -.132141 88.462 cv
cp
f
27.3781 286.199 mo
27.3781 285.617 27.85 285.146 28.432 285.146 cv
29.0139 285.146 29.4857 285.617 29.4857 286.199 cv
29.4857 286.781 29.0139 287.253 28.432 287.253 cv
27.85 287.253 27.3781 286.781 27.3781 286.199 cv
f
777.098 2.01909 mo
777.098 1.30246 777.679 .721507 778.396 .721507 cv
779.113 .721507 779.694 1.30246 779.694 2.01909 cv
779.694 2.73573 779.113 3.31668 778.396 3.31668 cv
777.679 3.31668 777.098 2.73573 777.098 2.01909 cv
cp
f
49.0476 439.921 mo
49.0476 439.29 49.5589 438.779 50.19 438.779 cv
50.8209 438.779 51.3324 439.29 51.3324 439.921 cv
51.3324 440.552 50.8209 441.063 50.19 441.063 cv
49.5589 441.063 49.0476 440.552 49.0476 439.921 cv
f
46.5721 413.268 mo
46.5721 412.197 47.4405 411.329 48.5116 411.329 cv
49.5826 411.329 50.451 412.197 50.451 413.268 cv
50.451 414.338 49.5826 415.207 48.5116 415.207 cv
47.4405 415.207 46.5721 414.338 46.5721 413.268 cv
f
761.596 272.467 mo
761.596 271.447 762.424 270.62 763.445 270.62 cv
764.465 270.62 765.293 271.447 765.293 272.467 cv
765.293 273.488 764.465 274.315 763.445 274.315 cv
762.424 274.315 761.596 273.488 761.596 272.467 cv
f
170.173 374.274 mo
170.173 374.043 170.361 373.855 170.592 373.855 cv
170.823 373.855 171.01 374.043 171.01 374.274 cv
171.01 374.505 170.823 374.692 170.592 374.692 cv
170.361 374.692 170.173 374.505 170.173 374.274 cv
cp
f
741.088 125.241 mo
741.088 124.145 741.977 123.257 743.073 123.257 cv
744.169 123.257 745.058 124.145 745.058 125.241 cv
745.058 126.337 744.169 127.226 743.073 127.226 cv
741.977 127.226 741.088 126.337 741.088 125.241 cv
f
55.4728 142.123 mo
55.4728 141.771 55.7583 141.485 56.1103 141.485 cv
56.4624 141.485 56.7479 141.771 56.7479 142.123 cv
56.7479 142.475 56.4624 142.76 56.1103 142.76 cv
55.7583 142.76 55.4728 142.475 55.4728 142.123 cv
cp
f
743.124 438.831 mo
743.124 437.981 743.813 437.292 744.663 437.292 cv
745.513 437.292 746.202 437.981 746.202 438.831 cv
746.202 439.68 745.513 440.369 744.663 440.369 cv
743.813 440.369 743.124 439.68 743.124 438.831 cv
f
72.6871 28.5841 mo
72.6871 27.4999 73.5664 26.621 74.6509 26.621 cv
75.7354 26.621 76.6147 27.4999 76.6147 28.5841 cv
76.6147 29.6684 75.7354 30.5473 74.6509 30.5473 cv
73.5664 30.5473 72.6871 29.6684 72.6871 28.5841 cv
cp
f
533.35 58.0371 mo
533.35 57.1936 534.034 56.5098 534.878 56.5098 cv
535.721 56.5098 536.405 57.1936 536.405 58.0371 cv
536.405 58.8806 535.721 59.5644 534.878 59.5644 cv
534.034 59.5644 533.35 58.8806 533.35 58.0371 cv
cp
f
596.7 -.569098 mo
596.7 -1.00109 597.051 -1.35138 597.483 -1.35138 cv
597.915 -1.35138 598.265 -1.00109 598.265 -.569098 cv
598.265 -.137105 597.915 .212985 597.483 .212985 cv
597.051 .212985 596.7 -.137105 596.7 -.569098 cv
f
597.682 317.068 mo
597.682 316.825 597.879 316.628 598.122 316.628 cv
598.365 316.628 598.563 316.825 598.563 317.068 cv
598.563 317.311 598.365 317.508 598.122 317.508 cv
597.879 317.508 597.682 317.311 597.682 317.068 cv
cp
f
25.1282 174.416 mo
25.1282 173.414 25.9406 172.602 26.9427 172.602 cv
27.9448 172.602 28.7572 173.414 28.7572 174.416 cv
28.7572 175.418 27.9448 176.23 26.9427 176.23 cv
25.9406 176.23 25.1282 175.418 25.1282 174.416 cv
f
147.96 434.617 mo
147.96 434.273 148.238 433.995 148.581 433.995 cv
148.925 433.995 149.203 434.273 149.203 434.617 cv
149.203 434.96 148.925 435.238 148.581 435.238 cv
148.238 435.238 147.96 434.96 147.96 434.617 cv
f
257.489 .199937 mo
257.489 -.773652 258.278 -1.56276 259.252 -1.56276 cv
260.226 -1.56276 261.015 -.773652 261.015 .199937 cv
261.015 1.17353 260.226 1.96283 259.252 1.96283 cv
258.278 1.96283 257.489 1.17353 257.489 .199937 cv
f
265.286 386.973 mo
265.286 386.657 265.542 386.401 265.857 386.401 cv
266.173 386.401 266.429 386.657 266.429 386.973 cv
266.429 387.288 266.173 387.544 265.857 387.544 cv
265.542 387.544 265.286 387.288 265.286 386.973 cv
cp
f
586.018 20.8407 mo
586.018 20.3369 586.427 19.9285 586.931 19.9285 cv
587.435 19.9285 587.843 20.3369 587.843 20.8407 cv
587.843 21.3446 587.435 21.753 586.931 21.753 cv
586.427 21.753 586.018 21.3446 586.018 20.8407 cv
cp
f
359.155 415.536 mo
359.155 415.221 359.41 414.966 359.725 414.966 cv
360.04 414.966 360.295 415.221 360.295 415.536 cv
360.295 415.851 360.04 416.106 359.725 416.106 cv
359.41 416.106 359.155 415.851 359.155 415.536 cv
cp
f
212.921 279.826 mo
212.921 279.609 213.097 279.433 213.314 279.433 cv
213.531 279.433 213.707 279.609 213.707 279.826 cv
213.707 280.043 213.531 280.218 213.314 280.218 cv
213.097 280.218 212.921 280.043 212.921 279.826 cv
cp
f
338.391 4.45241 mo
338.391 3.77672 338.939 3.2289 339.615 3.2289 cv
340.291 3.2289 340.839 3.77672 340.839 4.45241 cv
340.839 5.1281 340.291 5.67592 339.615 5.67592 cv
338.939 5.67592 338.391 5.1281 338.391 4.45241 cv
f
471.189 425.683 mo
471.189 425.404 471.415 425.177 471.694 425.177 cv
471.974 425.177 472.2 425.404 472.2 425.683 cv
472.2 425.962 471.974 426.189 471.694 426.189 cv
471.415 426.189 471.189 425.962 471.189 425.683 cv
cp
f
26.7884 82.5046 mo
26.7884 81.6049 27.5179 80.8755 28.418 80.8755 cv
29.318 80.8755 30.0475 81.6049 30.0475 82.5046 cv
30.0475 83.4043 29.318 84.1337 28.418 84.1337 cv
27.5179 84.1337 26.7884 83.4043 26.7884 82.5046 cv
cp
f
346.27 56.2558 mo
346.27 55.9829 346.491 55.7617 346.764 55.7617 cv
347.037 55.7617 347.259 55.9829 347.259 56.2558 cv
347.259 56.5287 347.037 56.75 346.764 56.75 cv
346.491 56.75 346.27 56.5287 346.27 56.2558 cv
cp
f
590.149 66.8613 mo
590.149 66.1346 590.738 65.5454 591.465 65.5454 cv
592.192 65.5454 592.782 66.1346 592.782 66.8613 cv
592.782 67.5881 592.192 68.1772 591.465 68.1772 cv
590.738 68.1772 590.149 67.5881 590.149 66.8613 cv
cp
f
206.476 391.328 mo
206.476 391.012 206.731 390.757 207.047 390.757 cv
207.362 390.757 207.618 391.012 207.618 391.328 cv
207.618 391.643 207.362 391.898 207.047 391.898 cv
206.731 391.898 206.476 391.643 206.476 391.328 cv
cp
f
603.298 374.017 mo
603.298 373.803 603.472 373.63 603.685 373.63 cv
603.899 373.63 604.072 373.803 604.072 374.017 cv
604.072 374.23 603.899 374.403 603.685 374.403 cv
603.472 374.403 603.298 374.23 603.298 374.017 cv
cp
f
634.5 280.218 mo
634.5 279.891 634.765 279.625 635.093 279.625 cv
635.421 279.625 635.687 279.891 635.687 280.218 cv
635.687 280.546 635.421 280.812 635.093 280.812 cv
634.765 280.812 634.5 280.546 634.5 280.218 cv
cp
f
662.075 426.211 mo
662.075 425.185 662.907 424.353 663.934 424.353 cv
664.961 424.353 665.793 425.185 665.793 426.211 cv
665.793 427.238 664.961 428.069 663.934 428.069 cv
662.907 428.069 662.075 427.238 662.075 426.211 cv
f
787.281 433.21 mo
787.281 432.437 787.908 431.81 788.681 431.81 cv
789.455 431.81 790.082 432.437 790.082 433.21 cv
790.082 433.983 789.455 434.61 788.681 434.61 cv
787.908 434.61 787.281 433.983 787.281 433.21 cv
f
48.2844 84.8974 mo
48.2844 84.6625 48.4749 84.472 48.71 84.472 cv
48.9449 84.472 49.1355 84.6625 49.1355 84.8974 cv
49.1355 85.1323 48.9449 85.3228 48.71 85.3228 cv
48.4749 85.3228 48.2844 85.1323 48.2844 84.8974 cv
cp
f
336.396 335.954 mo
336.396 335.703 336.6 335.499 336.851 335.499 cv
337.102 335.499 337.306 335.703 337.306 335.954 cv
337.306 336.205 337.102 336.409 336.851 336.409 cv
336.6 336.409 336.396 336.205 336.396 335.954 cv
cp
f
713.622 137.5 mo
713.622 137.283 713.799 137.106 714.016 137.106 cv
714.234 137.106 714.411 137.283 714.411 137.5 cv
714.411 137.718 714.234 137.894 714.016 137.894 cv
713.799 137.894 713.622 137.718 713.622 137.5 cv
f
755.999 165.462 mo
755.999 164.539 756.748 163.791 757.672 163.791 cv
758.595 163.791 759.344 164.539 759.344 165.462 cv
759.344 166.385 758.595 167.134 757.672 167.134 cv
756.748 167.134 755.999 166.385 755.999 165.462 cv
f
278.49 76.0347 mo
278.49 75.7315 278.735 75.4857 279.039 75.4857 cv
279.342 75.4857 279.588 75.7315 279.588 76.0347 cv
279.588 76.3379 279.342 76.5837 279.039 76.5837 cv
278.735 76.5837 278.49 76.3379 278.49 76.0347 cv
cp
f
254.493 337.511 mo
254.493 337.294 254.669 337.118 254.886 337.118 cv
255.103 337.118 255.279 337.294 255.279 337.511 cv
255.279 337.728 255.103 337.904 254.886 337.904 cv
254.669 337.904 254.493 337.728 254.493 337.511 cv
cp
f
400.835 23.0823 mo
400.835 22.0246 401.693 21.167 402.751 21.167 cv
403.81 21.167 404.667 22.0246 404.667 23.0823 cv
404.667 24.1402 403.81 24.9977 402.751 24.9977 cv
401.693 24.9977 400.835 24.1402 400.835 23.0823 cv
f
768.517 444.347 mo
768.517 443.726 769.02 443.222 769.642 443.222 cv
770.263 443.222 770.767 443.726 770.767 444.347 cv
770.767 444.968 770.263 445.472 769.642 445.472 cv
769.02 445.472 768.517 444.968 768.517 444.347 cv
f
493.941 385.967 mo
493.941 385.736 494.129 385.549 494.359 385.549 cv
494.59 385.549 494.777 385.736 494.777 385.967 cv
494.777 386.197 494.59 386.384 494.359 386.384 cv
494.129 386.384 493.941 386.197 493.941 385.967 cv
cp
f
759.657 356.488 mo
759.657 355.649 760.337 354.969 761.177 354.969 cv
762.016 354.969 762.697 355.649 762.697 356.488 cv
762.697 357.328 762.016 358.008 761.177 358.008 cv
760.337 358.008 759.657 357.328 759.657 356.488 cv
cp
f
184.977 396.993 mo
184.977 396.774 185.154 396.597 185.372 396.597 cv
185.59 396.597 185.768 396.774 185.768 396.993 cv
185.768 397.211 185.59 397.388 185.372 397.388 cv
185.154 397.388 184.977 397.211 184.977 396.993 cv
f
712.698 182.311 mo
712.698 181.388 713.447 180.639 714.371 180.639 cv
715.295 180.639 716.043 181.388 716.043 182.311 cv
716.043 183.234 715.295 183.983 714.371 183.983 cv
713.447 183.983 712.698 183.234 712.698 182.311 cv
cp
f
88.7615 243.318 mo
88.7615 242.781 89.197 242.345 89.7344 242.345 cv
90.2716 242.345 90.7072 242.781 90.7072 243.318 cv
90.7072 243.855 90.2716 244.29 89.7344 244.29 cv
89.197 244.29 88.7615 243.855 88.7615 243.318 cv
cp
f
691.373 408.107 mo
691.373 407.285 692.039 406.619 692.862 406.619 cv
693.684 406.619 694.35 407.285 694.35 408.107 cv
694.35 408.929 693.684 409.595 692.862 409.595 cv
692.039 409.595 691.373 408.929 691.373 408.107 cv
f
362.229 72.3817 mo
362.229 71.9787 362.556 71.6521 362.959 71.6521 cv
363.362 71.6521 363.689 71.9787 363.689 72.3817 cv
363.689 72.7846 363.362 73.1113 362.959 73.1113 cv
362.556 73.1113 362.229 72.7846 362.229 72.3817 cv
cp
f
308.497 444.455 mo
308.497 443.888 308.957 443.428 309.524 443.428 cv
310.091 443.428 310.55 443.888 310.55 444.455 cv
310.55 445.022 310.091 445.481 309.524 445.481 cv
308.957 445.481 308.497 445.022 308.497 444.455 cv
f
270.677 431.496 mo
270.677 431.174 270.938 430.913 271.26 430.913 cv
271.582 430.913 271.843 431.174 271.843 431.496 cv
271.843 431.817 271.582 432.078 271.26 432.078 cv
270.938 432.078 270.677 431.817 270.677 431.496 cv
cp
f
727.55 327.85 mo
727.55 327.223 728.058 326.715 728.685 326.715 cv
729.312 326.715 729.82 327.223 729.82 327.85 cv
729.82 328.477 729.312 328.985 728.685 328.985 cv
728.058 328.985 727.55 328.477 727.55 327.85 cv
cp
f
769.459 297.443 mo
769.459 297.18 769.672 296.967 769.934 296.967 cv
770.197 296.967 770.41 297.18 770.41 297.443 cv
770.41 297.705 770.197 297.918 769.934 297.918 cv
769.672 297.918 769.459 297.705 769.459 297.443 cv
f
405.203 92.8621 mo
405.203 92.607 405.41 92.4002 405.665 92.4002 cv
405.921 92.4002 406.127 92.607 406.127 92.8621 cv
406.127 93.1173 405.921 93.3241 405.665 93.3241 cv
405.41 93.3241 405.203 93.1173 405.203 92.8621 cv
cp
f
389.13 5.98586 mo
389.13 5.77228 389.304 5.59924 389.517 5.59924 cv
389.731 5.59924 389.904 5.77228 389.904 5.98586 cv
389.904 6.19965 389.731 6.37269 389.517 6.37269 cv
389.304 6.37269 389.13 6.19965 389.13 5.98586 cv
f
597.909 41.977 mo
597.909 41.729 598.11 41.528 598.358 41.528 cv
598.606 41.528 598.807 41.729 598.807 41.977 cv
598.807 42.225 598.606 42.426 598.358 42.426 cv
598.11 42.426 597.909 42.225 597.909 41.977 cv
cp
f
729.365 91.2519 mo
729.365 90.8306 729.706 90.4887 730.128 90.4887 cv
730.55 90.4887 730.892 90.8306 730.892 91.2519 cv
730.892 91.6737 730.55 92.0154 730.128 92.0154 cv
729.706 92.0154 729.365 91.6737 729.365 91.2519 cv
f
543.995 98.3303 mo
543.995 97.9507 544.303 97.643 544.683 97.643 cv
545.062 97.643 545.37 97.9507 545.37 98.3303 cv
545.37 98.7099 545.062 99.0176 544.683 99.0176 cv
544.303 99.0176 543.995 98.7099 543.995 98.3303 cv
cp
f
479.126 448.209 mo
479.126 447.914 479.365 447.674 479.661 447.674 cv
479.957 447.674 480.197 447.914 480.197 448.209 cv
480.197 448.505 479.957 448.745 479.661 448.745 cv
479.365 448.745 479.126 448.505 479.126 448.209 cv
f
128.005 394.672 mo
128.005 394.343 128.271 394.077 128.6 394.077 cv
128.928 394.077 129.194 394.343 129.194 394.672 cv
129.194 395 128.928 395.266 128.6 395.266 cv
128.271 395.266 128.005 395 128.005 394.672 cv
f
757.661 53.5441 mo
757.661 52.7976 758.266 52.1925 759.013 52.1925 cv
759.76 52.1925 760.365 52.7976 760.365 53.5441 cv
760.365 54.2906 759.76 54.8957 759.013 54.8957 cv
758.266 54.8957 757.661 54.2906 757.661 53.5441 cv
cp
f
460.212 398.66 mo
460.212 398.441 460.39 398.264 460.609 398.264 cv
460.828 398.264 461.006 398.441 461.006 398.66 cv
461.006 398.879 460.828 399.057 460.609 399.057 cv
460.39 399.057 460.212 398.879 460.212 398.66 cv
cp
f
694.833 288.018 mo
694.833 287.096 695.581 286.349 696.503 286.349 cv
697.425 286.349 698.172 287.096 698.172 288.018 cv
698.172 288.94 697.425 289.687 696.503 289.687 cv
695.581 289.687 694.833 288.94 694.833 288.018 cv
cp
f
4.87677 128.818 mo
4.87677 128.557 5.08856 128.345 5.34992 128.345 cv
5.61108 128.345 5.82306 128.557 5.82306 128.818 cv
5.82306 129.079 5.61108 129.291 5.34992 129.291 cv
5.08856 129.291 4.87677 129.079 4.87677 128.818 cv
f
384.798 410.813 mo
384.798 410.463 385.082 410.18 385.431 410.18 cv
385.781 410.18 386.065 410.463 386.065 410.813 cv
386.065 411.163 385.781 411.446 385.431 411.446 cv
385.082 411.446 384.798 411.163 384.798 410.813 cv
cp
f
34.3028 50.6622 mo
34.3028 50.0289 34.8164 49.5155 35.4499 49.5155 cv
36.0835 49.5155 36.597 50.0289 36.597 50.6622 cv
36.597 51.2955 36.0835 51.8089 35.4499 51.8089 cv
34.8164 51.8089 34.3028 51.2955 34.3028 50.6622 cv
cp
f
5.37963 423.687 mo
5.37963 423.405 5.60827 423.176 5.89031 423.176 cv
6.17235 423.176 6.40099 423.405 6.40099 423.687 cv
6.40099 423.969 6.17235 424.197 5.89031 424.197 cv
5.60827 424.197 5.37963 423.969 5.37963 423.687 cv
f
419.132 364.614 mo
419.132 364.359 419.339 364.153 419.593 364.153 cv
419.848 364.153 420.054 364.359 420.054 364.614 cv
420.054 364.868 419.848 365.075 419.593 365.075 cv
419.339 365.075 419.132 364.868 419.132 364.614 cv
cp
f
444.858 412.622 mo
444.858 411.741 445.573 411.026 446.455 411.026 cv
447.337 411.026 448.051 411.741 448.051 412.622 cv
448.051 413.504 447.337 414.218 446.455 414.218 cv
445.573 414.218 444.858 413.504 444.858 412.622 cv
cp
f
77.0843 283.437 mo
77.0843 283.134 77.3298 282.888 77.6327 282.888 cv
77.9357 282.888 78.1814 283.134 78.1814 283.437 cv
78.1814 283.739 77.9357 283.985 77.6327 283.985 cv
77.3298 283.985 77.0843 283.739 77.0843 283.437 cv
f
52.1751 172.345 mo
52.1751 172.136 52.3441 171.967 52.5525 171.967 cv
52.7608 171.967 52.9297 172.136 52.9297 172.345 cv
52.9297 172.553 52.7608 172.722 52.5525 172.722 cv
52.3441 172.722 52.1751 172.553 52.1751 172.345 cv
cp
f
3.40334 171.828 mo
3.40334 171.138 3.96261 170.579 4.65235 170.579 cv
5.34209 170.579 5.90135 171.138 5.90135 171.828 cv
5.90135 172.517 5.34209 173.076 4.65235 173.076 cv
3.96261 173.076 3.40334 172.517 3.40334 171.828 cv
f
744.218 336.668 mo
744.218 336.214 744.586 335.845 745.041 335.845 cv
745.495 335.845 745.864 336.214 745.864 336.668 cv
745.864 337.123 745.495 337.491 745.041 337.491 cv
744.586 337.491 744.218 337.123 744.218 336.668 cv
cp
f
750.763 104.411 mo
750.763 104.203 750.932 104.035 751.14 104.035 cv
751.348 104.035 751.516 104.203 751.516 104.411 cv
751.516 104.619 751.348 104.787 751.14 104.787 cv
750.932 104.787 750.763 104.619 750.763 104.411 cv
f
518.219 84.9023 mo
518.219 84.0435 518.916 83.3472 519.775 83.3472 cv
520.634 83.3472 521.331 84.0435 521.331 84.9023 cv
521.331 85.7612 520.634 86.4574 519.775 86.4574 cv
518.916 86.4574 518.219 85.7612 518.219 84.9023 cv
cp
f
790.011 243.083 mo
790.011 242.861 790.191 242.681 790.413 242.681 cv
790.635 242.681 790.815 242.861 790.815 243.083 cv
790.815 243.305 790.635 243.485 790.413 243.485 cv
790.191 243.485 790.011 243.305 790.011 243.083 cv
f
235.52 342.306 mo
235.52 342.065 235.715 341.869 235.956 341.869 cv
236.197 341.869 236.393 342.065 236.393 342.306 cv
236.393 342.546 236.197 342.742 235.956 342.742 cv
235.715 342.742 235.52 342.546 235.52 342.306 cv
cp
f
309.726 322.476 mo
309.726 322.245 309.913 322.058 310.143 322.058 cv
310.374 322.058 310.561 322.245 310.561 322.476 cv
310.561 322.706 310.374 322.893 310.143 322.893 cv
309.913 322.893 309.726 322.706 309.726 322.476 cv
cp
f
504.385 432.097 mo
504.385 431.728 504.684 431.428 505.054 431.428 cv
505.424 431.428 505.724 431.728 505.724 432.097 cv
505.724 432.467 505.424 432.767 505.054 432.767 cv
504.684 432.767 504.385 432.467 504.385 432.097 cv
cp
f
367.324 341.869 mo
367.324 341.572 367.564 341.332 367.861 341.332 cv
368.158 341.332 368.399 341.572 368.399 341.869 cv
368.399 342.166 368.158 342.407 367.861 342.407 cv
367.564 342.407 367.324 342.166 367.324 341.869 cv
cp
f
688.364 198.714 mo
688.364 198.466 688.565 198.265 688.813 198.265 cv
689.061 198.265 689.262 198.466 689.262 198.714 cv
689.262 198.962 689.061 199.163 688.813 199.163 cv
688.565 199.163 688.364 198.962 688.364 198.714 cv
cp
f
13.0399 262.989 mo
13.0399 261.958 13.8757 261.123 14.9067 261.123 cv
15.9379 261.123 16.7738 261.958 16.7738 262.989 cv
16.7738 264.02 15.9379 264.855 14.9067 264.855 cv
13.8757 264.855 13.0399 264.02 13.0399 262.989 cv
f
160.609 78.618 mo
160.609 78.4007 160.785 78.2246 161.003 78.2246 cv
161.22 78.2246 161.396 78.4007 161.396 78.618 cv
161.396 78.8352 161.22 79.0113 161.003 79.0113 cv
160.785 79.0113 160.609 78.8352 160.609 78.618 cv
cp
f
17.4162 23.0398 mo
17.4162 22.0413 18.2258 21.2319 19.2246 21.2319 cv
20.2234 21.2319 21.033 22.0413 21.033 23.0398 cv
21.033 24.0382 20.2234 24.8476 19.2246 24.8476 cv
18.2258 24.8476 17.4162 24.0382 17.4162 23.0398 cv
cp
f
115.375 318.617 mo
115.375 318.238 115.683 317.93 116.063 317.93 cv
116.442 317.93 116.75 318.238 116.75 318.617 cv
116.75 318.997 116.442 319.305 116.063 319.305 cv
115.683 319.305 115.375 318.997 115.375 318.617 cv
f
71.9296 1.4593 mo
71.9296 1.17549 72.1596 .945419 72.4436 .945419 cv
72.7275 .945419 72.9576 1.17549 72.9576 1.4593 cv
72.9576 1.74311 72.7275 1.97319 72.4436 1.97319 cv
72.1596 1.97319 71.9296 1.74311 71.9296 1.4593 cv
cp
f
432.407 56.7859 mo
432.407 56.4318 432.694 56.1448 433.048 56.1448 cv
433.402 56.1448 433.689 56.4318 433.689 56.7859 cv
433.689 57.1399 433.402 57.427 433.048 57.427 cv
432.694 57.427 432.407 57.1399 432.407 56.7859 cv
cp
f
169.027 259.65 mo
169.027 258.882 169.65 258.259 170.418 258.259 cv
171.186 258.259 171.809 258.882 171.809 259.65 cv
171.809 260.418 171.186 261.041 170.418 261.041 cv
169.65 261.041 169.027 260.418 169.027 259.65 cv
cp
f
732.195 70.1706 mo
732.195 69.4193 732.804 68.81 733.556 68.81 cv
734.307 68.81 734.917 69.4193 734.917 70.1706 cv
734.917 70.922 734.307 71.5313 733.556 71.5313 cv
732.804 71.5313 732.195 70.922 732.195 70.1706 cv
f
8.56336 244.427 mo
8.56336 244.051 8.86889 243.745 9.24588 243.745 cv
9.62287 243.745 9.92839 244.051 9.92839 244.427 cv
9.92839 244.804 9.62287 245.11 9.24588 245.11 cv
8.86889 245.11 8.56336 244.804 8.56336 244.427 cv
f
200.453 422.257 mo
200.453 422.042 200.627 421.867 200.843 421.867 cv
201.058 421.867 201.233 422.042 201.233 422.257 cv
201.233 422.472 201.058 422.647 200.843 422.647 cv
200.627 422.647 200.453 422.472 200.453 422.257 cv
f
249.818 438.736 mo
249.818 437.833 250.55 437.101 251.453 437.101 cv
252.357 437.101 253.089 437.833 253.089 438.736 cv
253.089 439.639 252.357 440.371 251.453 440.371 cv
250.55 440.371 249.818 439.639 249.818 438.736 cv
f
213.507 36.8442 mo
213.507 35.7821 214.369 34.9207 215.431 34.9207 cv
216.494 34.9207 217.355 35.7821 217.355 36.8442 cv
217.355 37.9065 216.494 38.7679 215.431 38.7679 cv
214.369 38.7679 213.507 37.9065 213.507 36.8442 cv
f
710.575 76.8637 mo
710.575 76.2013 711.112 75.6643 711.774 75.6643 cv
712.437 75.6643 712.974 76.2013 712.974 76.8637 cv
712.974 77.5261 712.437 78.0631 711.774 78.0631 cv
711.112 78.0631 710.575 77.5261 710.575 76.8637 cv
f
617.992 249.256 mo
617.992 248.922 618.263 248.652 618.596 248.652 cv
618.93 248.652 619.201 248.922 619.201 249.256 cv
619.201 249.59 618.93 249.86 618.596 249.86 cv
618.263 249.86 617.992 249.59 617.992 249.256 cv
cp
f
745.652 13.6206 mo
745.652 13.3344 745.884 13.1024 746.17 13.1024 cv
746.456 13.1024 746.688 13.3344 746.688 13.6206 cv
746.688 13.9067 746.456 14.1387 746.17 14.1387 cv
745.884 14.1387 745.652 13.9067 745.652 13.6206 cv
cp
f
145.557 27.4061 mo
145.557 26.3958 146.376 25.5768 147.387 25.5768 cv
148.398 25.5768 149.217 26.3958 149.217 27.4061 cv
149.217 28.4164 148.398 29.2354 147.387 29.2354 cv
146.376 29.2354 145.557 28.4164 145.557 27.4061 cv
cp
f
519.368 438.24 mo
519.368 438.019 519.548 437.84 519.769 437.84 cv
519.99 437.84 520.169 438.019 520.169 438.24 cv
520.169 438.46 519.99 438.639 519.769 438.639 cv
519.548 438.639 519.368 438.46 519.368 438.24 cv
cp
f
661.255 450.163 mo
661.255 449.885 661.48 449.66 661.758 449.66 cv
662.036 449.66 662.262 449.885 662.262 450.163 cv
662.262 450.441 662.036 450.666 661.758 450.666 cv
661.48 450.666 661.255 450.441 661.255 450.163 cv
f
69.6896 257.908 mo
69.6896 257.289 70.1918 256.787 70.8113 256.787 cv
71.4308 256.787 71.933 257.289 71.933 257.908 cv
71.933 258.527 71.4308 259.029 70.8113 259.029 cv
70.1918 259.029 69.6896 258.527 69.6896 257.908 cv
cp
f
731.637 229.428 mo
731.637 229.139 731.871 228.904 732.161 228.904 cv
732.45 228.904 732.685 229.139 732.685 229.428 cv
732.685 229.717 732.45 229.952 732.161 229.952 cv
731.871 229.952 731.637 229.717 731.637 229.428 cv
f
140.396 315.964 mo
140.396 315.743 140.575 315.563 140.797 315.563 cv
141.018 315.563 141.197 315.743 141.197 315.964 cv
141.197 316.185 141.018 316.365 140.797 316.365 cv
140.575 316.365 140.396 316.185 140.396 315.964 cv
cp
f
170.796 427.174 mo
170.796 426.479 171.359 425.915 172.055 425.915 cv
172.75 425.915 173.314 426.479 173.314 427.174 cv
173.314 427.869 172.75 428.433 172.055 428.433 cv
171.359 428.433 170.796 427.869 170.796 427.174 cv
f
125.523 415.112 mo
125.523 414.822 125.758 414.587 126.049 414.587 cv
126.339 414.587 126.574 414.822 126.574 415.112 cv
126.574 415.402 126.339 415.637 126.049 415.637 cv
125.758 415.637 125.523 415.402 125.523 415.112 cv
f
798.317 119.571 mo
798.317 118.59 799.112 117.795 800.094 117.795 cv
801.075 117.795 801.871 118.59 801.871 119.571 cv
801.871 120.552 801.075 121.348 800.094 121.348 cv
799.112 121.348 798.317 120.552 798.317 119.571 cv
f
195.43 156.165 mo
195.43 155.676 195.826 155.281 196.315 155.281 cv
196.803 155.281 197.199 155.676 197.199 156.165 cv
197.199 156.654 196.803 157.049 196.315 157.049 cv
195.826 157.049 195.43 156.654 195.43 156.165 cv
cp
f
85.508 342.908 mo
85.508 341.916 86.3117 341.113 87.303 341.113 cv
88.2942 341.113 89.098 341.916 89.098 342.908 cv
89.098 343.899 88.2942 344.702 87.303 344.702 cv
86.3117 344.702 85.508 343.899 85.508 342.908 cv
f
783.184 53.3333 mo
783.184 53.045 783.418 52.8112 783.706 52.8112 cv
783.995 52.8112 784.229 53.045 784.229 53.3333 cv
784.229 53.6217 783.995 53.8554 783.706 53.8554 cv
783.418 53.8554 783.184 53.6217 783.184 53.3333 cv
cp
f
677.018 372.581 mo
677.018 372.078 677.426 371.669 677.93 371.669 cv
678.433 371.669 678.841 372.078 678.841 372.581 cv
678.841 373.085 678.433 373.493 677.93 373.493 cv
677.426 373.493 677.018 373.085 677.018 372.581 cv
cp
f
747.426 382.375 mo
747.426 382.156 747.603 381.978 747.822 381.978 cv
748.041 381.978 748.219 382.156 748.219 382.375 cv
748.219 382.594 748.041 382.771 747.822 382.771 cv
747.603 382.771 747.426 382.594 747.426 382.375 cv
f
34.6055 318.213 mo
34.6055 317.786 34.9518 317.44 35.3788 317.44 cv
35.806 317.44 36.1522 317.786 36.1522 318.213 cv
36.1522 318.64 35.806 318.986 35.3788 318.986 cv
34.9518 318.986 34.6055 318.64 34.6055 318.213 cv
f
766.595 32.5497 mo
766.595 31.6047 767.362 30.8386 768.307 30.8386 cv
769.252 30.8386 770.019 31.6047 770.019 32.5497 cv
770.019 33.4946 769.252 34.2607 768.307 34.2607 cv
767.362 34.2607 766.595 33.4946 766.595 32.5497 cv
cp
f
258.405 79.271 mo
258.405 78.6666 258.895 78.1766 259.5 78.1766 cv
260.104 78.1766 260.595 78.6666 260.595 79.271 cv
260.595 79.8754 260.104 80.3654 259.5 80.3654 cv
258.895 80.3654 258.405 79.8754 258.405 79.271 cv
cp
f
149.454 295.227 mo
149.454 294.596 149.966 294.084 150.597 294.084 cv
151.229 294.084 151.74 294.596 151.74 295.227 cv
151.74 295.859 151.229 296.37 150.597 296.37 cv
149.966 296.37 149.454 295.859 149.454 295.227 cv
cp
f
508.708 111.577 mo
508.708 111.063 509.125 110.646 509.64 110.646 cv
510.155 110.646 510.572 111.063 510.572 111.577 cv
510.572 112.092 510.155 112.509 509.64 112.509 cv
509.125 112.509 508.708 112.092 508.708 111.577 cv
cp
f
131.723 96.0472 mo
131.723 95.3757 132.267 94.8314 132.939 94.8314 cv
133.611 94.8314 134.155 95.3757 134.155 96.0472 cv
134.155 96.7187 133.611 97.2631 132.939 97.2631 cv
132.267 97.2631 131.723 96.7187 131.723 96.0472 cv
cp
f
721.154 300.303 mo
721.154 299.464 721.834 298.784 722.674 298.784 cv
723.513 298.784 724.193 299.464 724.193 300.303 cv
724.193 301.142 723.513 301.822 722.674 301.822 cv
721.834 301.822 721.154 301.142 721.154 300.303 cv
cp
f
541.749 32.842 mo
541.749 31.8766 542.532 31.094 543.498 31.094 cv
544.463 31.094 545.246 31.8766 545.246 32.842 cv
545.246 33.8075 544.463 34.5901 543.498 34.5901 cv
542.532 34.5901 541.749 33.8075 541.749 32.842 cv
cp
f
443.791 23.0751 mo
443.791 22.361 444.37 21.7823 445.085 21.7823 cv
445.799 21.7823 446.378 22.361 446.378 23.0751 cv
446.378 23.7891 445.799 24.3678 445.085 24.3678 cv
444.37 24.3678 443.791 23.7891 443.791 23.0751 cv
f
661.897 50.6664 mo
661.897 50.4435 662.078 50.2627 662.301 50.2627 cv
662.524 50.2627 662.704 50.4435 662.704 50.6664 cv
662.704 50.8894 662.524 51.0701 662.301 51.0701 cv
662.078 51.0701 661.897 50.8894 661.897 50.6664 cv
cp
f
77.1172 361.814 mo
77.1172 360.881 77.8736 360.125 78.8071 360.125 cv
79.7403 360.125 80.4969 360.881 80.4969 361.814 cv
80.4969 362.747 79.7403 363.503 78.8071 363.503 cv
77.8736 363.503 77.1172 362.747 77.1172 361.814 cv
f
78.8071 311.835 mo
78.8071 311.394 79.1646 311.037 79.6056 311.037 cv
80.0464 311.037 80.404 311.394 80.404 311.835 cv
80.404 312.276 80.0464 312.634 79.6056 312.634 cv
79.1646 312.634 78.8071 312.276 78.8071 311.835 cv
f
50.7403 27.4171 mo
50.7403 26.9835 51.0919 26.6319 51.5256 26.6319 cv
51.9594 26.6319 52.3111 26.9835 52.3111 27.4171 cv
52.3111 27.8507 51.9594 28.2022 51.5256 28.2022 cv
51.0919 28.2022 50.7403 27.8507 50.7403 27.4171 cv
cp
f
167.112 8.15365 mo
167.112 7.82825 167.376 7.56428 167.702 7.56428 cv
168.027 7.56428 168.291 7.82825 168.291 8.15365 cv
168.291 8.47925 168.027 8.74323 167.702 8.74323 cv
167.376 8.74323 167.112 8.47925 167.112 8.15365 cv
f
725.237 47.713 mo
725.237 47.5027 725.408 47.3323 725.618 47.3323 cv
725.829 47.3323 725.999 47.5027 725.999 47.713 cv
725.999 47.9233 725.829 48.0938 725.618 48.0938 cv
725.408 48.0938 725.237 47.9233 725.237 47.713 cv
cp
f
613.634 23.1515 mo
613.634 22.7306 613.975 22.3894 614.396 22.3894 cv
614.817 22.3894 615.158 22.7306 615.158 23.1515 cv
615.158 23.5725 614.817 23.9137 614.396 23.9137 cv
613.975 23.9137 613.634 23.5725 613.634 23.1515 cv
cp
f
125.86 443.173 mo
125.86 442.907 126.077 442.69 126.344 442.69 cv
126.611 442.69 126.827 442.907 126.827 443.173 cv
126.827 443.44 126.611 443.657 126.344 443.657 cv
126.077 443.657 125.86 443.44 125.86 443.173 cv
f
553.993 51.9018 mo
553.993 51.6761 554.176 51.4931 554.401 51.4931 cv
554.627 51.4931 554.81 51.6761 554.81 51.9018 cv
554.81 52.1275 554.627 52.3104 554.401 52.3104 cv
554.176 52.3104 553.993 52.1275 553.993 51.9018 cv
cp
f
637.098 27.8804 mo
637.098 26.8267 637.953 25.9726 639.007 25.9726 cv
640.061 25.9726 640.915 26.8267 640.915 27.8804 cv
640.915 28.9341 640.061 29.7883 639.007 29.7883 cv
637.953 29.7883 637.098 28.9341 637.098 27.8804 cv
cp
f
59.64 307.004 mo
59.64 306.548 60.0096 306.178 60.4655 306.178 cv
60.9213 306.178 61.2907 306.548 61.2907 307.004 cv
61.2907 307.459 60.9213 307.829 60.4655 307.829 cv
60.0096 307.829 59.64 307.459 59.64 307.004 cv
f
682.639 356.076 mo
682.639 355.574 683.046 355.167 683.549 355.167 cv
684.052 355.167 684.459 355.574 684.459 356.076 cv
684.459 356.579 684.052 356.986 683.549 356.986 cv
683.046 356.986 682.639 356.579 682.639 356.076 cv
cp
f
31.7014 343.898 mo
31.7014 343.626 31.9219 343.406 32.1939 343.406 cv
32.4657 343.406 32.6863 343.626 32.6863 343.898 cv
32.6863 344.17 32.4657 344.39 32.1939 344.39 cv
31.9219 344.39 31.7014 344.17 31.7014 343.898 cv
f
428.851 439.43 mo
428.851 438.87 429.305 438.416 429.865 438.416 cv
430.425 438.416 430.88 438.87 430.88 439.43 cv
430.88 439.99 430.425 440.444 429.865 440.444 cv
429.305 440.444 428.851 439.99 428.851 439.43 cv
f
8.59066 219.392 mo
8.59066 218.681 9.16779 218.104 9.87941 218.104 cv
10.5912 218.104 11.1682 218.681 11.1682 219.392 cv
11.1682 220.104 10.5912 220.68 9.87941 220.68 cv
9.16779 220.68 8.59066 220.104 8.59066 219.392 cv
f
105.735 428.242 mo
105.735 427.702 106.172 427.264 106.712 427.264 cv
107.252 427.264 107.689 427.702 107.689 428.242 cv
107.689 428.781 107.252 429.219 106.712 429.219 cv
106.172 429.219 105.735 428.781 105.735 428.242 cv
f
384.226 381.978 mo
384.226 381.662 384.482 381.407 384.798 381.407 cv
385.114 381.407 385.37 381.662 385.37 381.978 cv
385.37 382.294 385.114 382.55 384.798 382.55 cv
384.482 382.55 384.226 382.294 384.226 381.978 cv
cp
f
643.599 356.721 mo
643.599 355.936 644.236 355.3 645.021 355.3 cv
645.806 355.3 646.443 355.936 646.443 356.721 cv
646.443 357.506 645.806 358.142 645.021 358.142 cv
644.236 358.142 643.599 357.506 643.599 356.721 cv
cp
f
324.834 385.164 mo
324.834 384.906 325.043 384.697 325.301 384.697 cv
325.559 384.697 325.768 384.906 325.768 385.164 cv
325.768 385.422 325.559 385.631 325.301 385.631 cv
325.043 385.631 324.834 385.422 324.834 385.164 cv
cp
f
22.1793 442.276 mo
22.1793 441.485 22.8211 440.843 23.6126 440.843 cv
24.4044 440.843 25.0459 441.485 25.0459 442.276 cv
25.0459 443.067 24.4044 443.709 23.6126 443.709 cv
22.8211 443.709 22.1793 443.067 22.1793 442.276 cv
f
26.1225 390.881 mo
26.1225 390.636 26.3208 390.438 26.5655 390.438 cv
26.81 390.438 27.0083 390.636 27.0083 390.881 cv
27.0083 391.125 26.81 391.324 26.5655 391.324 cv
26.3208 391.324 26.1225 391.125 26.1225 390.881 cv
f
42.8066 370.08 mo
42.8066 369.608 43.1892 369.225 43.6609 369.225 cv
44.1329 369.225 44.5155 369.608 44.5155 370.08 cv
44.5155 370.551 44.1329 370.934 43.6609 370.934 cv
43.1892 370.934 42.8066 370.551 42.8066 370.08 cv
f
99.7999 2.00892 mo
99.7999 1.08939 100.546 .343963 101.465 .343963 cv
102.385 .343963 103.131 1.08939 103.131 2.00892 cv
103.131 2.92845 102.385 3.67388 101.465 3.67388 cv
100.546 3.67388 99.7999 2.92845 99.7999 2.00892 cv
cp
f
13.295 296.584 mo
13.295 295.835 13.9026 295.227 14.6524 295.227 cv
15.402 295.227 16.0098 295.835 16.0098 296.584 cv
16.0098 297.334 15.402 297.941 14.6524 297.941 cv
13.9026 297.941 13.295 297.334 13.295 296.584 cv
f
684.922 107.797 mo
684.922 107.013 685.558 106.377 686.343 106.377 cv
687.127 106.377 687.763 107.013 687.763 107.797 cv
687.763 108.581 687.127 109.217 686.343 109.217 cv
685.558 109.217 684.922 108.581 684.922 107.797 cv
f
751.707 213.303 mo
751.707 213.005 751.949 212.764 752.247 212.764 cv
752.544 212.764 752.786 213.005 752.786 213.303 cv
752.786 213.6 752.544 213.842 752.247 213.842 cv
751.949 213.842 751.707 213.6 751.707 213.303 cv
f
173.266 65.8823 mo
173.266 65.5114 173.567 65.2107 173.938 65.2107 cv
174.309 65.2107 174.609 65.5114 174.609 65.8823 cv
174.609 66.2532 174.309 66.5539 173.938 66.5539 cv
173.567 66.5539 173.266 66.2532 173.266 65.8823 cv
cp
f
29.2235 421.862 mo
29.2235 421.46 29.5493 421.135 29.951 421.135 cv
30.3529 421.135 30.6787 421.46 30.6787 421.862 cv
30.6787 422.264 30.3529 422.59 29.951 422.59 cv
29.5493 422.59 29.2235 422.264 29.2235 421.862 cv
f
680.047 85.291 mo
680.047 84.27 680.875 83.4424 681.896 83.4424 cv
682.917 83.4424 683.745 84.27 683.745 85.291 cv
683.745 86.3117 682.917 87.1396 681.896 87.1396 cv
680.875 87.1396 680.047 86.3117 680.047 85.291 cv
f
321.777 419.909 mo
321.777 419.575 322.047 419.305 322.381 419.305 cv
322.715 419.305 322.985 419.575 322.985 419.909 cv
322.985 420.242 322.715 420.513 322.381 420.513 cv
322.047 420.513 321.777 420.242 321.777 419.909 cv
cp
f
796.708 28.2908 mo
796.708 27.4513 797.389 26.7707 798.229 26.7707 cv
799.069 26.7707 799.749 27.4513 799.749 28.2908 cv
799.749 29.1303 799.069 29.8109 798.229 29.8109 cv
797.389 29.8109 796.708 29.1303 796.708 28.2908 cv
cp
f
288.245 401.428 mo
288.245 401.077 288.53 400.793 288.881 400.793 cv
289.232 400.793 289.516 401.077 289.516 401.428 cv
289.516 401.779 289.232 402.063 288.881 402.063 cv
288.53 402.063 288.245 401.779 288.245 401.428 cv
cp
f
739.31 185.411 mo
739.31 184.59 739.976 183.924 740.798 183.924 cv
741.619 183.924 742.286 184.59 742.286 185.411 cv
742.286 186.232 741.619 186.898 740.798 186.898 cv
739.976 186.898 739.31 186.232 739.31 185.411 cv
f
150.597 354.802 mo
150.597 353.957 151.282 353.273 152.127 353.273 cv
152.972 353.273 153.657 353.957 153.657 354.802 cv
153.657 355.647 152.972 356.332 152.127 356.332 cv
151.282 356.332 150.597 355.647 150.597 354.802 cv
cp
f
183.303 28.7439 mo
183.303 28.4723 183.524 28.2521 183.795 28.2521 cv
184.067 28.2521 184.287 28.4723 184.287 28.7439 cv
184.287 29.0155 184.067 29.2358 183.795 29.2358 cv
183.524 29.2358 183.303 29.0155 183.303 28.7439 cv
f
787.472 312.285 mo
787.472 311.609 788.021 311.06 788.698 311.06 cv
789.375 311.06 789.924 311.609 789.924 312.285 cv
789.924 312.962 789.375 313.511 788.698 313.511 cv
788.021 313.511 787.472 312.962 787.472 312.285 cv
f
454.388 442.233 mo
454.388 441.384 455.077 440.696 455.926 440.696 cv
456.775 440.696 457.463 441.384 457.463 442.233 cv
457.463 443.082 456.775 443.77 455.926 443.77 cv
455.077 443.77 454.388 443.082 454.388 442.233 cv
f
715.886 391.329 mo
715.886 391.004 716.149 390.741 716.474 390.741 cv
716.799 390.741 717.062 391.004 717.062 391.329 cv
717.062 391.654 716.799 391.917 716.474 391.917 cv
716.149 391.917 715.886 391.654 715.886 391.329 cv
cp
f
528.248 -.109604 mo
528.248 -.365146 528.455 -.57251 528.711 -.57251 cv
528.966 -.57251 529.173 -.365146 529.173 -.109604 cv
529.173 .145938 528.966 .353101 528.711 .353101 cv
528.455 .353101 528.248 .145938 528.248 -.109604 cv
f
683.18 20.7743 mo
683.18 20.4892 683.411 20.2581 683.696 20.2581 cv
683.981 20.2581 684.213 20.4892 684.213 20.7743 cv
684.213 21.0593 683.981 21.2904 683.696 21.2904 cv
683.411 21.2904 683.18 21.0593 683.18 20.7743 cv
cp
f
213.02 313.511 mo
213.02 313.131 213.327 312.823 213.707 312.823 cv
214.087 312.823 214.395 313.131 214.395 313.511 cv
214.395 313.891 214.087 314.198 213.707 314.198 cv
213.327 314.198 213.02 313.891 213.02 313.511 cv
cp
f
574.024 34.3347 mo
574.024 34.0199 574.279 33.7647 574.594 33.7647 cv
574.909 33.7647 575.164 34.0199 575.164 34.3347 cv
575.164 34.6496 574.909 34.9048 574.594 34.9048 cv
574.279 34.9048 574.024 34.6496 574.024 34.3347 cv
cp
f
726.815 427.382 mo
726.815 427.155 727 426.97 727.227 426.97 cv
727.455 426.97 727.639 427.155 727.639 427.382 cv
727.639 427.609 727.455 427.794 727.227 427.794 cv
727 427.794 726.815 427.609 726.815 427.382 cv
f
57.9169 344.527 mo
57.9169 344.157 58.217 343.857 58.5873 343.857 cv
58.9577 343.857 59.258 344.157 59.258 344.527 cv
59.258 344.898 58.9577 345.198 58.5873 345.198 cv
58.217 345.198 57.9169 344.898 57.9169 344.527 cv
f
203.918 13.7117 mo
203.918 12.9533 204.533 12.3385 205.292 12.3385 cv
206.051 12.3385 206.666 12.9533 206.666 13.7117 cv
206.666 14.4701 206.051 15.085 205.292 15.085 cv
204.533 15.085 203.918 14.4701 203.918 13.7117 cv
f
121.222 172.462 mo
121.222 171.973 121.618 171.577 122.106 171.577 cv
122.594 171.577 122.99 171.973 122.99 172.462 cv
122.99 172.95 122.594 173.346 122.106 173.346 cv
121.618 173.346 121.222 172.95 121.222 172.462 cv
cp
f
744.598 48.3269 mo
744.598 48.0726 744.804 47.8665 745.058 47.8665 cv
745.313 47.8665 745.519 48.0726 745.519 48.3269 cv
745.519 48.5812 745.313 48.7873 745.058 48.7873 cv
744.804 48.7873 744.598 48.5812 744.598 48.3269 cv
cp
f
713.853 .293584 mo
713.853 -.335365 714.363 -.845229 714.992 -.845229 cv
715.621 -.845229 716.131 -.335365 716.131 .293584 cv
716.131 .922533 715.621 1.4324 714.992 1.4324 cv
714.363 1.4324 713.853 .922533 713.853 .293584 cv
cp
f
615.399 50.6431 mo
615.399 50.4339 615.569 50.2643 615.778 50.2643 cv
615.988 50.2643 616.157 50.4339 616.157 50.6431 cv
616.157 50.8523 615.988 51.0219 615.778 51.0219 cv
615.569 51.0219 615.399 50.8523 615.399 50.6431 cv
cp
f
638.091 380.287 mo
638.091 379.203 638.97 378.324 640.055 378.324 cv
641.139 378.324 642.018 379.203 642.018 380.287 cv
642.018 381.371 641.139 382.25 640.055 382.25 cv
638.97 382.25 638.091 381.371 638.091 380.287 cv
cp
f
444.381 98.191 mo
444.381 97.244 445.149 96.4764 446.096 96.4764 cv
447.043 96.4764 447.811 97.244 447.811 98.191 cv
447.811 99.138 447.043 99.9057 446.096 99.9057 cv
445.149 99.9057 444.381 99.138 444.381 98.191 cv
cp
f
178.208 286.02 mo
178.208 285.624 178.529 285.303 178.925 285.303 cv
179.322 285.303 179.643 285.624 179.643 286.02 cv
179.643 286.416 179.322 286.737 178.925 286.737 cv
178.529 286.737 178.208 286.416 178.208 286.02 cv
cp
f
656.683 77.0098 mo
656.683 76.7952 656.856 76.6214 657.071 76.6214 cv
657.286 76.6214 657.46 76.7952 657.46 77.0098 cv
657.46 77.2244 657.286 77.3983 657.071 77.3983 cv
656.856 77.3983 656.683 77.2244 656.683 77.0098 cv
f
102.704 262.989 mo
102.704 262.633 102.993 262.344 103.349 262.344 cv
103.705 262.344 103.994 262.633 103.994 262.989 cv
103.994 263.345 103.705 263.634 103.349 263.634 cv
102.993 263.634 102.704 263.345 102.704 262.989 cv
cp
f
551.721 357.293 mo
551.721 356.677 552.221 356.177 552.837 356.177 cv
553.453 356.177 553.953 356.677 553.953 357.293 cv
553.953 357.91 553.453 358.409 552.837 358.409 cv
552.221 358.409 551.721 357.91 551.721 357.293 cv
cp
f
661.237 122.543 mo
661.237 122.33 661.409 122.158 661.622 122.158 cv
661.835 122.158 662.007 122.33 662.007 122.543 cv
662.007 122.756 661.835 122.928 661.622 122.928 cv
661.409 122.928 661.237 122.756 661.237 122.543 cv
cp
f
53.1109 247.749 mo
53.1109 247.49 53.321 247.28 53.5802 247.28 cv
53.8394 247.28 54.0495 247.49 54.0495 247.749 cv
54.0495 248.008 53.8394 248.218 53.5802 248.218 cv
53.321 248.218 53.1109 248.008 53.1109 247.749 cv
cp
f
343.383 23.1329 mo
343.383 22.8753 343.591 22.6667 343.849 22.6667 cv
344.107 22.6667 344.315 22.8753 344.315 23.1329 cv
344.315 23.3902 344.107 23.599 343.849 23.599 cv
343.591 23.599 343.383 23.3902 343.383 23.1329 cv
f
172.725 112.213 mo
172.725 111.804 173.057 111.473 173.466 111.473 cv
173.875 111.473 174.206 111.804 174.206 112.213 cv
174.206 112.621 173.875 112.953 173.466 112.953 cv
173.057 112.953 172.725 112.621 172.725 112.213 cv
cp
f
795.07 99.8984 mo
795.07 99.5814 795.327 99.3245 795.645 99.3245 cv
795.962 99.3245 796.219 99.5814 796.219 99.8984 cv
796.219 100.216 795.962 100.472 795.645 100.472 cv
795.327 100.472 795.07 100.216 795.07 99.8984 cv
f
393.79 48.7202 mo
393.79 47.7359 394.588 46.938 395.573 46.938 cv
396.557 46.938 397.355 47.7359 397.355 48.7202 cv
397.355 49.7045 396.557 50.5025 395.573 50.5025 cv
394.588 50.5025 393.79 49.7045 393.79 48.7202 cv
cp
f
511.221 21.1903 mo
511.221 20.3885 511.871 19.7386 512.673 19.7386 cv
513.476 19.7386 514.126 20.3885 514.126 21.1903 cv
514.126 21.9923 513.476 22.6423 512.673 22.6423 cv
511.871 22.6423 511.221 21.9923 511.221 21.1903 cv
f
246.956 21.696 mo
246.956 20.8832 247.615 20.2241 248.428 20.2241 cv
249.241 20.2241 249.9 20.8832 249.9 21.696 cv
249.9 22.5088 249.241 23.1678 248.428 23.1678 cv
247.615 23.1678 246.956 22.5088 246.956 21.696 cv
f
86.5604 381.978 mo
86.5604 381.725 86.7653 381.521 87.018 381.521 cv
87.2707 381.521 87.4756 381.725 87.4756 381.978 cv
87.4756 382.231 87.2707 382.435 87.018 382.435 cv
86.7653 382.435 86.5604 382.231 86.5604 381.978 cv
cp
f
423.25 79.0673 mo
423.25 78.7399 423.516 78.4745 423.843 78.4745 cv
424.17 78.4745 424.436 78.7399 424.436 79.0673 cv
424.436 79.3947 424.17 79.6601 423.843 79.6601 cv
423.516 79.6601 423.25 79.3947 423.25 79.0673 cv
cp
f
620.273 4.48374 mo
620.273 4.24306 620.468 4.04794 620.709 4.04794 cv
620.949 4.04794 621.145 4.24306 621.145 4.48374 cv
621.145 4.72442 620.949 4.91953 620.709 4.91953 cv
620.468 4.91953 620.273 4.72442 620.273 4.48374 cv
cp
f
722.988 28.8576 mo
722.988 28.6132 723.186 28.4152 723.43 28.4152 cv
723.675 28.4152 723.873 28.6132 723.873 28.8576 cv
723.873 29.102 723.675 29.3001 723.43 29.3001 cv
723.186 29.3001 722.988 29.102 722.988 28.8576 cv
cp
f
770.529 85.9386 mo
770.529 85.7264 770.701 85.5545 770.913 85.5545 cv
771.125 85.5545 771.297 85.7264 771.297 85.9386 cv
771.297 86.1505 771.125 86.3224 770.913 86.3224 cv
770.701 86.3224 770.529 86.1505 770.529 85.9386 cv
f
39.0773 261.678 mo
39.0773 261.426 39.2814 261.222 39.533 261.222 cv
39.7847 261.222 39.9888 261.426 39.9888 261.678 cv
39.9888 261.929 39.7847 262.133 39.533 262.133 cv
39.2814 262.133 39.0773 261.929 39.0773 261.678 cv
cp
f
266.429 409.126 mo
266.429 408.038 267.311 407.157 268.399 407.157 cv
269.488 407.157 270.369 408.038 270.369 409.126 cv
270.369 410.214 269.488 411.095 268.399 411.095 cv
267.311 411.095 266.429 410.214 266.429 409.126 cv
cp
f
239.091 103.146 mo
239.091 102.934 239.263 102.762 239.475 102.762 cv
239.687 102.762 239.859 102.934 239.859 103.146 cv
239.859 103.358 239.687 103.53 239.475 103.53 cv
239.263 103.53 239.091 103.358 239.091 103.146 cv
cp
f
16.3207 39.7011 mo
16.3207 39.386 16.5762 39.1305 16.8915 39.1305 cv
17.2068 39.1305 17.4623 39.386 17.4623 39.7011 cv
17.4623 40.0163 17.2068 40.2718 16.8915 40.2718 cv
16.5762 40.2718 16.3207 40.0163 16.3207 39.7011 cv
cp
f
699.28 60.9051 mo
699.28 60.6477 699.489 60.439 699.747 60.439 cv
700.004 60.439 700.213 60.6477 700.213 60.9051 cv
700.213 61.1626 700.004 61.3712 699.747 61.3712 cv
699.489 61.3712 699.28 61.1626 699.28 60.9051 cv
f
524.924 375.495 mo
524.924 375.278 525.1 375.102 525.317 375.102 cv
525.535 375.102 525.711 375.278 525.711 375.495 cv
525.711 375.712 525.535 375.888 525.317 375.888 cv
525.1 375.888 524.924 375.712 524.924 375.495 cv
cp
f
711.947 206.532 mo
711.947 205.854 712.497 205.304 713.175 205.304 cv
713.854 205.304 714.404 205.854 714.404 206.532 cv
714.404 207.211 713.854 207.76 713.175 207.76 cv
712.497 207.76 711.947 207.211 711.947 206.532 cv
f
39.149 120.601 mo
39.149 119.82 39.7825 119.187 40.564 119.187 cv
41.3453 119.187 41.9788 119.82 41.9788 120.601 cv
41.9788 121.382 41.3453 122.015 40.564 122.015 cv
39.7825 122.015 39.149 121.382 39.149 120.601 cv
cp
f
77.8321 438.389 mo
77.8321 438.056 78.1021 437.787 78.4351 437.787 cv
78.7681 437.787 79.0381 438.056 79.0381 438.389 cv
79.0381 438.722 78.7681 438.992 78.4351 438.992 cv
78.1021 438.992 77.8321 438.722 77.8321 438.389 cv
f
123.029 15.1914 mo
123.029 14.7782 123.364 14.4432 123.777 14.4432 cv
124.19 14.4432 124.526 14.7782 124.526 15.1914 cv
124.526 15.6046 124.19 15.9395 123.777 15.9395 cv
123.364 15.9395 123.029 15.6046 123.029 15.1914 cv
cp
f
141.418 255.55 mo
141.418 255.324 141.602 255.14 141.828 255.14 cv
142.055 255.14 142.239 255.324 142.239 255.55 cv
142.239 255.777 142.055 255.961 141.828 255.961 cv
141.602 255.961 141.418 255.777 141.418 255.55 cv
cp
f
385.391 97.7184 mo
385.391 97.3542 385.686 97.0589 386.051 97.0589 cv
386.415 97.0589 386.71 97.3542 386.71 97.7184 cv
386.71 98.0826 386.415 98.3778 386.051 98.3778 cv
385.686 98.3778 385.391 98.0826 385.391 97.7184 cv
cp
f
645.332 326.715 mo
645.332 326.102 645.829 325.605 646.443 325.605 cv
647.056 325.605 647.553 326.102 647.553 326.715 cv
647.553 327.328 647.056 327.825 646.443 327.825 cv
645.829 327.825 645.332 327.328 645.332 326.715 cv
cp
f
556.859 10.5276 mo
556.859 9.84308 557.414 9.28823 558.099 9.28823 cv
558.784 9.28823 559.339 9.84308 559.339 10.5276 cv
559.339 11.2121 558.784 11.767 558.099 11.767 cv
557.414 11.767 556.859 11.2121 556.859 10.5276 cv
f
637.041 147.711 mo
637.041 146.811 637.771 146.082 638.671 146.082 cv
639.571 146.082 640.3 146.811 640.3 147.711 cv
640.3 148.611 639.571 149.34 638.671 149.34 cv
637.771 149.34 637.041 148.611 637.041 147.711 cv
cp
f
221.048 441.116 mo
221.048 440.882 221.238 440.692 221.472 440.692 cv
221.706 440.692 221.896 440.882 221.896 441.116 cv
221.896 441.35 221.706 441.54 221.472 441.54 cv
221.238 441.54 221.048 441.35 221.048 441.116 cv
f
323.741 105.458 mo
323.741 104.811 324.265 104.287 324.912 104.287 cv
325.56 104.287 326.084 104.811 326.084 105.458 cv
326.084 106.105 325.56 106.63 324.912 106.63 cv
324.265 106.63 323.741 106.105 323.741 105.458 cv
cp
f
662.382 241.397 mo
662.382 241.124 662.604 240.902 662.877 240.902 cv
663.151 240.902 663.373 241.124 663.373 241.397 cv
663.373 241.671 663.151 241.892 662.877 241.892 cv
662.604 241.892 662.382 241.671 662.382 241.397 cv
cp
f
687.848 74.0307 mo
687.848 73.4076 688.353 72.9023 688.977 72.9023 cv
689.6 72.9023 690.105 73.4076 690.105 74.0307 cv
690.105 74.6538 689.6 75.1588 688.977 75.1588 cv
688.353 75.1588 687.848 74.6538 687.848 74.0307 cv
f
198.44 102.397 mo
198.44 101.813 198.913 101.341 199.496 101.341 cv
200.079 101.341 200.552 101.813 200.552 102.397 cv
200.552 102.98 200.079 103.453 199.496 103.453 cv
198.913 103.453 198.44 102.98 198.44 102.397 cv
cp
f
107.921 56.6744 mo
107.921 55.7084 108.704 54.9253 109.67 54.9253 cv
110.637 54.9253 111.42 55.7084 111.42 56.6744 cv
111.42 57.6405 110.637 58.4236 109.67 58.4236 cv
108.704 58.4236 107.921 57.6405 107.921 56.6744 cv
cp
f
85.7274 396.544 mo
85.7274 396.188 86.0163 395.899 86.3727 395.899 cv
86.7291 395.899 87.018 396.188 87.018 396.544 cv
87.018 396.9 86.7291 397.189 86.3727 397.189 cv
86.0163 397.189 85.7274 396.9 85.7274 396.544 cv
cp
f
305.625 411.82 mo
305.625 411.125 306.189 410.562 306.884 410.562 cv
307.579 410.562 308.142 411.125 308.142 411.82 cv
308.142 412.515 307.579 413.078 306.884 413.078 cv
306.189 413.078 305.625 412.515 305.625 411.82 cv
cp
f
80.0649 219.307 mo
80.0649 218.725 80.5367 218.253 81.1188 218.253 cv
81.7009 218.253 82.1727 218.725 82.1727 219.307 cv
82.1727 219.889 81.7009 220.361 81.1188 220.361 cv
80.5367 220.361 80.0649 219.889 80.0649 219.307 cv
cp
f
696.676 385.456 mo
696.676 385.222 696.865 385.033 697.099 385.033 cv
697.333 385.033 697.523 385.222 697.523 385.456 cv
697.523 385.69 697.333 385.88 697.099 385.88 cv
696.865 385.88 696.676 385.69 696.676 385.456 cv
cp
f
27.139 227.274 mo
27.139 226.563 27.7159 225.986 28.4275 225.986 cv
29.1391 225.986 29.716 226.563 29.716 227.274 cv
29.716 227.986 29.1391 228.562 28.4275 228.562 cv
27.7159 228.562 27.139 227.986 27.139 227.274 cv
cp
f
778.247 335.035 mo
778.247 334.772 778.46 334.559 778.722 334.559 cv
778.985 334.559 779.198 334.772 779.198 335.035 cv
779.198 335.297 778.985 335.51 778.722 335.51 cv
778.46 335.51 778.247 335.297 778.247 335.035 cv
f
675.056 226.047 mo
675.056 225.386 675.592 224.85 676.253 224.85 cv
676.914 224.85 677.45 225.386 677.45 226.047 cv
677.45 226.708 676.914 227.244 676.253 227.244 cv
675.592 227.244 675.056 226.708 675.056 226.047 cv
cp
f
719.037 108.207 mo
719.037 107.174 719.875 106.337 720.908 106.337 cv
721.941 106.337 722.778 107.174 722.778 108.207 cv
722.778 109.24 721.941 110.077 720.908 110.077 cv
719.875 110.077 719.037 109.24 719.037 108.207 cv
f
179.757 49.0729 mo
179.757 47.9776 180.645 47.0898 181.741 47.0898 cv
182.837 47.0898 183.725 47.9776 183.725 49.0729 cv
183.725 50.1683 182.837 51.0562 181.741 51.0562 cv
180.645 51.0562 179.757 50.1683 179.757 49.0729 cv
f
292.159 45.4507 mo
292.159 44.814 292.675 44.2978 293.312 44.2978 cv
293.949 44.2978 294.465 44.814 294.465 45.4507 cv
294.465 46.0874 293.949 46.6035 293.312 46.6035 cv
292.675 46.6035 292.159 46.0874 292.159 45.4507 cv
cp
f
542.736 399.057 mo
542.736 398.362 543.3 397.798 543.995 397.798 cv
544.69 397.798 545.254 398.362 545.254 399.057 cv
545.254 399.752 544.69 400.315 543.995 400.315 cv
543.3 400.315 542.736 399.752 542.736 399.057 cv
cp
f
219.567 65.8822 mo
219.567 65.5942 219.801 65.3605 220.089 65.3605 cv
220.377 65.3605 220.611 65.5942 220.611 65.8822 cv
220.611 66.1705 220.377 66.404 220.089 66.404 cv
219.801 66.404 219.567 66.1705 219.567 65.8822 cv
f
112.434 30.6483 mo
112.434 30.1616 112.828 29.767 113.315 29.767 cv
113.802 29.767 114.197 30.1616 114.197 30.6483 cv
114.197 31.135 113.802 31.5295 113.315 31.5295 cv
112.828 31.5295 112.434 31.135 112.434 30.6483 cv
cp
f
101.663 198.083 mo
101.663 197.618 102.041 197.241 102.506 197.241 cv
102.972 197.241 103.349 197.618 103.349 198.083 cv
103.349 198.549 102.972 198.926 102.506 198.926 cv
102.041 198.926 101.663 198.549 101.663 198.083 cv
cp
f
668.241 270.685 mo
668.241 270.259 668.587 269.913 669.014 269.913 cv
669.44 269.913 669.786 270.259 669.786 270.685 cv
669.786 271.112 669.44 271.457 669.014 271.457 cv
668.587 271.457 668.241 271.112 668.241 270.685 cv
cp
f
10.1129 151.433 mo
10.1129 150.361 10.9823 149.492 12.0544 149.492 cv
13.1266 149.492 13.9958 150.361 13.9958 151.433 cv
13.9958 152.505 13.1266 153.374 12.0544 153.374 cv
10.9823 153.374 10.1129 152.505 10.1129 151.433 cv
f
696.336 336.301 mo
696.336 336.091 696.507 335.92 696.717 335.92 cv
696.928 335.92 697.099 336.091 697.099 336.301 cv
697.099 336.512 696.928 336.683 696.717 336.683 cv
696.507 336.683 696.336 336.512 696.336 336.301 cv
cp
f
485.146 102.994 mo
485.146 102.541 485.513 102.174 485.965 102.174 cv
486.418 102.174 486.785 102.541 486.785 102.994 cv
486.785 103.446 486.418 103.813 485.965 103.813 cv
485.513 103.813 485.146 103.446 485.146 102.994 cv
cp
f
551.929 449.424 mo
551.929 448.923 552.336 448.516 552.837 448.516 cv
553.338 448.516 553.744 448.923 553.744 449.424 cv
553.744 449.925 553.338 450.331 552.837 450.331 cv
552.336 450.331 551.929 449.925 551.929 449.424 cv
cp
f
60.5086 390.1 mo
60.5086 389.58 60.9304 389.159 61.4507 389.159 cv
61.9708 389.159 62.3926 389.58 62.3926 390.1 cv
62.3926 390.621 61.9708 391.042 61.4507 391.042 cv
60.9304 391.042 60.5086 390.621 60.5086 390.1 cv
f
777.595 368.77 mo
777.595 368.517 777.801 368.312 778.054 368.312 cv
778.307 368.312 778.512 368.517 778.512 368.77 cv
778.512 369.023 778.307 369.228 778.054 369.228 cv
777.801 369.228 777.595 369.023 777.595 368.77 cv
f
704.857 225.933 mo
704.857 225.052 705.572 224.337 706.454 224.337 cv
707.336 224.337 708.051 225.052 708.051 225.933 cv
708.051 226.815 707.336 227.529 706.454 227.529 cv
705.572 227.529 704.857 226.815 704.857 225.933 cv
f
234.355 372.996 mo
234.355 372.697 234.597 372.456 234.896 372.456 cv
235.194 372.456 235.436 372.697 235.436 372.996 cv
235.436 373.294 235.194 373.536 234.896 373.536 cv
234.597 373.536 234.355 373.294 234.355 372.996 cv
cp
f
143.252 384.056 mo
143.252 383.748 143.501 383.499 143.809 383.499 cv
144.117 383.499 144.367 383.748 144.367 384.056 cv
144.367 384.364 144.117 384.614 143.809 384.614 cv
143.501 384.614 143.252 384.364 143.252 384.056 cv
f
654.441 -1.04668 mo
654.441 -1.97961 655.197 -2.7359 656.13 -2.7359 cv
657.064 -2.7359 657.82 -1.97961 657.82 -1.04668 cv
657.82 -.113741 657.064 .642551 656.13 .642551 cv
655.197 .642551 654.441 -.113741 654.441 -1.04668 cv
cp
f
155.56 404.875 mo
155.56 404.443 155.91 404.093 156.342 404.093 cv
156.774 404.093 157.125 404.443 157.125 404.875 cv
157.125 405.307 156.774 405.657 156.342 405.657 cv
155.91 405.657 155.56 405.307 155.56 404.875 cv
f
635.093 422.404 mo
635.093 421.779 635.6 421.273 636.225 421.273 cv
636.849 421.273 637.356 421.779 637.356 422.404 cv
637.356 423.029 636.849 423.535 636.225 423.535 cv
635.6 423.535 635.093 423.029 635.093 422.404 cv
f
646.574 8.64059 mo
646.574 8.34598 646.813 8.10716 647.107 8.10716 cv
647.402 8.10716 647.641 8.34598 647.641 8.64059 cv
647.641 8.93519 647.402 9.17402 647.107 9.17402 cv
646.813 9.17402 646.574 8.93519 646.574 8.64059 cv
cp
f
628.884 73.1113 mo
628.884 72.2699 629.566 71.5879 630.408 71.5879 cv
631.249 71.5879 631.932 72.2699 631.932 73.1113 cv
631.932 73.9526 631.249 74.6346 630.408 74.6346 cv
629.566 74.6346 628.884 73.9526 628.884 73.1113 cv
cp
f
grestore
137.799 56.8228 mo
138.688 61.1158 li
139.076 62.9905 140.541 64.4557 142.417 64.8436 cv
146.711 65.7319 li
142.417 66.6193 li
140.541 67.0072 139.076 68.4724 138.688 70.3471 cv
137.799 74.6401 li
136.911 70.3471 li
136.523 68.4724 135.058 67.0072 133.182 66.6193 cv
128.888 65.7319 li
133.182 64.8436 li
135.058 64.4557 136.523 62.9905 136.911 61.1158 cv
137.799 56.8228 li
cp
f
114.184 363.039 mo
115.621 369.982 li
116.248 373.014 118.619 375.384 121.652 376.011 cv
128.597 377.448 li
121.652 378.883 li
118.619 379.51 116.248 381.88 115.621 384.912 cv
114.184 391.855 li
112.748 384.912 li
112.12 381.88 109.75 379.51 106.717 378.883 cv
99.7716 377.448 li
106.717 376.011 li
109.75 375.384 112.12 373.014 112.748 369.982 cv
114.184 363.039 li
cp
f
48.7932 284.141 mo
49.7462 288.745 li
50.1623 290.755 51.7339 292.326 53.7449 292.742 cv
58.3497 293.695 li
53.7449 294.646 li
51.7339 295.063 50.1623 296.634 49.7462 298.644 cv
48.7932 303.247 li
47.8413 298.644 li
47.4254 296.634 45.8536 295.063 43.8428 294.646 cv
39.238 293.695 li
43.8428 292.742 li
45.8536 292.326 47.4254 290.755 47.8413 288.745 cv
48.7932 284.141 li
f
732.683 143.262 mo
733.635 147.865 li
734.052 149.875 735.623 151.447 737.634 151.863 cv
742.239 152.815 li
737.634 153.767 li
735.623 154.183 734.052 155.754 733.635 157.764 cv
732.683 162.368 li
731.731 157.764 li
731.315 155.754 729.743 154.183 727.732 153.767 cv
723.127 152.815 li
727.732 151.863 li
729.743 151.447 731.315 149.875 731.731 147.865 cv
732.683 143.262 li
f
116.829 450 mo
90.193 450 li
90.193 450 47.5147 444 52.1916 412.192 cv
53.4615 403.554 60.337 397.492 71.0095 392.882 cv
71.2578 394.078 71.5649 395.299 71.9329 396.544 cv
74.9904 406.887 80.5899 410.739 87.7917 410.739 cv
98.2802 410.739 112.17 402.577 126.583 394.414 cv
140.993 386.251 155.926 378.088 168.491 378.088 cv
175.447 378.088 181.675 380.587 186.693 386.973 cv
188.916 389.801 191.393 392.537 194.081 395.171 cv
142.667 396.306 116.829 450 116.829 450 cv
78.4351 437.787 mo
78.1021 437.787 77.8321 438.056 77.8321 438.389 cv
77.8321 438.722 78.1021 438.992 78.4351 438.992 cv
78.7681 438.992 79.0381 438.722 79.0381 438.389 cv
79.0381 438.056 78.7681 437.787 78.4351 437.787 cv
106.712 427.264 mo
106.172 427.264 105.735 427.702 105.735 428.242 cv
105.735 428.781 106.172 429.219 106.712 429.219 cv
107.252 429.219 107.689 428.781 107.689 428.242 cv
107.689 427.702 107.252 427.264 106.712 427.264 cv
58.9854 418.654 mo
58.6486 420.282 li
58.5016 420.993 57.9458 421.549 57.2344 421.697 cv
55.6049 422.034 li
57.234 422.37 li
57.9456 422.517 58.5016 423.073 58.6486 423.784 cv
58.9854 425.413 li
59.3227 423.784 li
59.4698 423.073 60.0256 422.517 60.7371 422.37 cv
62.3663 422.034 li
60.7371 421.697 li
60.0256 421.55 59.4698 420.994 59.3227 420.282 cv
58.9854 418.654 li
126.049 414.587 mo
125.758 414.587 125.523 414.822 125.523 415.112 cv
125.523 415.402 125.758 415.637 126.049 415.637 cv
126.339 415.637 126.574 415.402 126.574 415.112 cv
126.574 414.822 126.339 414.587 126.049 414.587 cv
92.9016 413.441 mo
92.4977 413.441 92.1705 413.768 92.1705 414.172 cv
92.1705 414.575 92.4977 414.902 92.9016 414.902 cv
93.3053 414.902 93.6327 414.575 93.6327 414.172 cv
93.6327 413.768 93.3053 413.441 92.9016 413.441 cv
135.251 406.021 mo
135.046 407.012 li
134.956 407.445 134.618 407.783 134.185 407.872 cv
133.194 408.077 li
134.185 408.282 li
134.618 408.372 134.956 408.71 135.046 409.143 cv
135.251 410.134 li
135.456 409.143 li
135.545 408.71 135.884 408.372 136.317 408.282 cv
137.308 408.077 li
136.317 407.872 li
135.884 407.783 135.545 407.445 135.456 407.012 cv
135.251 406.021 li
156.342 404.093 mo
155.91 404.093 155.56 404.443 155.56 404.875 cv
155.56 405.307 155.91 405.657 156.342 405.657 cv
156.774 405.657 157.125 405.307 157.125 404.875 cv
157.125 404.443 156.774 404.093 156.342 404.093 cv
128.6 394.077 mo
128.271 394.077 128.005 394.343 128.005 394.672 cv
128.005 395 128.271 395.266 128.6 395.266 cv
128.928 395.266 129.194 395 129.194 394.672 cv
129.194 394.343 128.928 394.077 128.6 394.077 cv
109.725 328.165 mo
57.2478 328.165 10.2515 300.141 0 271 cv
0 196.473 li
8.18177 202.945 15.526 209.891 23.949 216.799 cv
11.9102 235.538 5.25248 246.988 22.8018 261.252 cv
29.207 266.458 38.6737 267.908 49.3797 267.908 cv
56.1011 267.908 63.3106 267.336 70.5589 266.765 cv
77.8063 266.194 85.0933 265.623 91.9664 265.623 cv
110.939 265.623 126.768 269.973 129.981 290.683 cv
132.413 306.359 125.406 317.895 115.42 328.055 cv
113.517 328.129 111.616 328.165 109.725 328.165 cv
116.063 317.93 mo
115.683 317.93 115.375 318.238 115.375 318.617 cv
115.375 318.997 115.683 319.305 116.063 319.305 cv
116.442 319.305 116.75 318.997 116.75 318.617 cv
116.75 318.238 116.442 317.93 116.063 317.93 cv
79.6056 311.037 mo
79.1646 311.037 78.8071 311.394 78.8071 311.835 cv
78.8071 312.276 79.1646 312.634 79.6056 312.634 cv
80.0464 312.634 80.404 312.276 80.404 311.835 cv
80.404 311.394 80.0464 311.037 79.6056 311.037 cv
60.4655 306.178 mo
60.0096 306.178 59.64 306.548 59.64 307.004 cv
59.64 307.459 60.0096 307.829 60.4655 307.829 cv
60.9213 307.829 61.2907 307.459 61.2907 307.004 cv
61.2907 306.548 60.9213 306.178 60.4655 306.178 cv
48.7932 284.141 mo
47.8413 288.745 li
47.4254 290.755 45.8536 292.326 43.8428 292.742 cv
39.238 293.695 li
43.8428 294.646 li
45.8536 295.063 47.4254 296.634 47.8413 298.644 cv
48.7932 303.247 li
49.7462 298.644 li
50.1623 296.634 51.7339 295.063 53.7449 294.646 cv
58.3497 293.695 li
53.7449 292.742 li
51.7339 292.326 50.1623 290.755 49.7462 288.745 cv
48.7932 284.141 li
101.045 296.638 mo
100.217 296.638 99.5453 297.309 99.5453 298.137 cv
99.5453 298.965 100.217 299.637 101.045 299.637 cv
101.873 299.637 102.545 298.965 102.545 298.137 cv
102.545 297.309 101.873 296.638 101.045 296.638 cv
28.432 285.146 mo
27.85 285.146 27.3781 285.617 27.3781 286.199 cv
27.3781 286.781 27.85 287.253 28.432 287.253 cv
29.0139 287.253 29.4857 286.781 29.4857 286.199 cv
29.4857 285.617 29.0139 285.146 28.432 285.146 cv
77.6327 282.888 mo
77.3298 282.888 77.0843 283.134 77.0843 283.437 cv
77.0843 283.739 77.3298 283.985 77.6327 283.985 cv
77.9357 283.985 78.1814 283.739 78.1814 283.437 cv
78.1814 283.134 77.9357 282.888 77.6327 282.888 cv
14.9067 261.123 mo
13.8757 261.123 13.0399 261.958 13.0399 262.989 cv
13.0399 264.02 13.8757 264.855 14.9067 264.855 cv
15.9379 264.855 16.7738 264.02 16.7738 262.989 cv
16.7738 261.958 15.9379 261.123 14.9067 261.123 cv
9.24588 243.745 mo
8.86889 243.745 8.56336 244.051 8.56336 244.427 cv
8.56336 244.804 8.86889 245.11 9.24588 245.11 cv
9.62287 245.11 9.92839 244.804 9.92839 244.427 cv
9.92839 244.051 9.62287 243.745 9.24588 243.745 cv
9.87941 218.104 mo
9.16779 218.104 8.59066 218.681 8.59066 219.392 cv
8.59066 220.104 9.16779 220.68 9.87941 220.68 cv
10.5912 220.68 11.1682 220.104 11.1682 219.392 cv
11.1682 218.681 10.5912 218.104 9.87941 218.104 cv
.0941176 .137255 .282353 rgb
f
90.193 450 mo
0 450 li
0 271 li
10.2515 300.141 57.2478 328.165 109.725 328.165 cv
111.616 328.165 113.517 328.129 115.42 328.055 cv
104.332 339.336 89.569 348.92 79.9724 360.59 cv
79.6692 360.302 79.2588 360.125 78.8071 360.125 cv
77.8736 360.125 77.1172 360.881 77.1172 361.814 cv
77.1172 362.417 77.4336 362.947 77.9096 363.246 cv
71.8286 371.566 68.5458 381.025 71.0095 392.882 cv
60.337 397.492 53.4615 403.554 52.1916 412.192 cv
47.5147 444 90.193 450 90.193 450 cv
90.193 450 li
23.6126 440.843 mo
22.8211 440.843 22.1793 441.485 22.1793 442.276 cv
22.1793 443.067 22.8211 443.709 23.6126 443.709 cv
24.4044 443.709 25.0459 443.067 25.0459 442.276 cv
25.0459 441.485 24.4044 440.843 23.6126 440.843 cv
50.19 438.779 mo
49.5589 438.779 49.0476 439.29 49.0476 439.921 cv
49.0476 440.552 49.5589 441.063 50.19 441.063 cv
50.8209 441.063 51.3324 440.552 51.3324 439.921 cv
51.3324 439.29 50.8209 438.779 50.19 438.779 cv
38.4893 429.389 mo
38.2795 430.404 li
38.1878 430.847 37.8413 431.193 37.3978 431.285 cv
36.3821 431.495 li
37.3976 431.705 li
37.8411 431.797 38.1878 432.143 38.2795 432.587 cv
38.4893 433.602 li
38.6994 432.587 li
38.7912 432.143 39.1379 431.797 39.5815 431.705 cv
40.5968 431.495 li
39.5813 431.285 li
39.1379 431.193 38.7912 430.847 38.6994 430.404 cv
38.4893 429.389 li
5.89031 423.176 mo
5.60827 423.176 5.37963 423.405 5.37963 423.687 cv
5.37963 423.969 5.60827 424.197 5.89031 424.197 cv
6.17235 424.197 6.40099 423.969 6.40099 423.687 cv
6.40099 423.405 6.17235 423.176 5.89031 423.176 cv
29.951 421.135 mo
29.5493 421.135 29.2235 421.46 29.2235 421.862 cv
29.2235 422.264 29.5493 422.59 29.951 422.59 cv
30.3529 422.59 30.6787 422.264 30.6787 421.862 cv
30.6787 421.46 30.3529 421.135 29.951 421.135 cv
48.5116 411.329 mo
47.4405 411.329 46.5721 412.197 46.5721 413.268 cv
46.5721 414.338 47.4405 415.207 48.5116 415.207 cv
49.5826 415.207 50.451 414.338 50.451 413.268 cv
50.451 412.197 49.5826 411.329 48.5116 411.329 cv
26.5655 390.438 mo
26.3208 390.438 26.1225 390.636 26.1225 390.881 cv
26.1225 391.125 26.3208 391.324 26.5655 391.324 cv
26.81 391.324 27.0083 391.125 27.0083 390.881 cv
27.0083 390.636 26.81 390.438 26.5655 390.438 cv
61.4507 389.159 mo
60.9304 389.159 60.5086 389.58 60.5086 390.1 cv
60.5086 390.621 60.9304 391.042 61.4507 391.042 cv
61.9708 391.042 62.3926 390.621 62.3926 390.1 cv
62.3926 389.58 61.9708 389.159 61.4507 389.159 cv
43.6609 369.225 mo
43.1892 369.225 42.8066 369.608 42.8066 370.08 cv
42.8066 370.551 43.1892 370.934 43.6609 370.934 cv
44.1329 370.934 44.5155 370.551 44.5155 370.08 cv
44.5155 369.608 44.1329 369.225 43.6609 369.225 cv
34.193 362.654 mo
34.0017 363.579 li
33.9182 363.983 33.6027 364.298 33.1986 364.382 cv
32.2732 364.574 li
33.1984 364.765 li
33.6025 364.848 33.9182 365.164 34.0017 365.568 cv
34.193 366.493 li
34.3845 365.568 li
34.4682 365.164 34.784 364.848 35.1883 364.765 cv
36.1133 364.574 li
35.1881 364.382 li
34.784 364.299 34.4682 363.983 34.3845 363.579 cv
34.193 362.654 li
58.5873 343.857 mo
58.217 343.857 57.9169 344.157 57.9169 344.527 cv
57.9169 344.898 58.217 345.198 58.5873 345.198 cv
58.9577 345.198 59.258 344.898 59.258 344.527 cv
59.258 344.157 58.9577 343.857 58.5873 343.857 cv
87.303 341.113 mo
86.3117 341.113 85.508 341.916 85.508 342.908 cv
85.508 343.899 86.3117 344.702 87.303 344.702 cv
88.2942 344.702 89.098 343.899 89.098 342.908 cv
89.098 341.916 88.2942 341.113 87.303 341.113 cv
32.1939 343.406 mo
31.9219 343.406 31.7014 343.626 31.7014 343.898 cv
31.7014 344.17 31.9219 344.39 32.1939 344.39 cv
32.4657 344.39 32.6863 344.17 32.6863 343.898 cv
32.6863 343.626 32.4657 343.406 32.1939 343.406 cv
17.7777 339.256 mo
17.524 339.256 17.3182 339.462 17.3182 339.716 cv
17.3182 339.969 17.524 340.175 17.7777 340.175 cv
18.0315 340.175 18.2372 339.969 18.2372 339.716 cv
18.2372 339.462 18.0315 339.256 17.7777 339.256 cv
35.3788 317.44 mo
34.9518 317.44 34.6055 317.786 34.6055 318.213 cv
34.6055 318.64 34.9518 318.986 35.3788 318.986 cv
35.806 318.986 36.1522 318.64 36.1522 318.213 cv
36.1522 317.786 35.806 317.44 35.3788 317.44 cv
14.6524 295.227 mo
13.9026 295.227 13.295 295.835 13.295 296.584 cv
13.295 297.334 13.9026 297.941 14.6524 297.941 cv
15.402 297.941 16.0098 297.334 16.0098 296.584 cv
16.0098 295.835 15.402 295.227 14.6524 295.227 cv
.101961 .14902 .298039 rgb
f
542.736 450 mo
116.829 450 li
116.829 450 li
116.829 450 142.667 396.306 194.081 395.171 cv
222.331 422.853 274.315 439.686 308.975 443.587 cv
308.688 443.769 308.497 444.09 308.497 444.455 cv
308.497 445.022 308.957 445.481 309.524 445.481 cv
310.091 445.481 310.55 445.022 310.55 444.455 cv
310.55 444.169 310.434 443.911 310.246 443.725 cv
314.921 444.214 319.265 444.462 323.171 444.462 cv
323.548 444.462 323.917 444.459 324.286 444.455 cv
351.584 444.114 399.151 429.744 439.167 429.744 cv
450.69 429.744 461.582 430.935 471.189 433.995 cv
514.159 447.683 542.736 450 542.736 450 cv
479.661 447.674 mo
479.365 447.674 479.126 447.914 479.126 448.209 cv
479.126 448.505 479.365 448.745 479.661 448.745 cv
479.957 448.745 480.197 448.505 480.197 448.209 cv
480.197 447.914 479.957 447.674 479.661 447.674 cv
455.926 440.696 mo
455.077 440.696 454.388 441.384 454.388 442.233 cv
454.388 443.082 455.077 443.77 455.926 443.77 cv
456.775 443.77 457.463 443.082 457.463 442.233 cv
457.463 441.384 456.775 440.696 455.926 440.696 cv
126.344 442.69 mo
126.077 442.69 125.86 442.907 125.86 443.173 cv
125.86 443.44 126.077 443.657 126.344 443.657 cv
126.611 443.657 126.827 443.44 126.827 443.173 cv
126.827 442.907 126.611 442.69 126.344 442.69 cv
221.472 440.692 mo
221.238 440.692 221.048 440.882 221.048 441.116 cv
221.048 441.35 221.238 441.54 221.472 441.54 cv
221.706 441.54 221.896 441.35 221.896 441.116 cv
221.896 440.882 221.706 440.692 221.472 440.692 cv
385.832 439.67 mo
385.573 439.67 385.363 439.88 385.363 440.139 cv
385.363 440.398 385.573 440.608 385.832 440.608 cv
386.091 440.608 386.301 440.398 386.301 440.139 cv
386.301 439.88 386.091 439.67 385.832 439.67 cv
429.865 438.416 mo
429.305 438.416 428.851 438.87 428.851 439.43 cv
428.851 439.99 429.305 440.444 429.865 440.444 cv
430.425 440.444 430.88 439.99 430.88 439.43 cv
430.88 438.87 430.425 438.416 429.865 438.416 cv
251.453 437.101 mo
250.55 437.101 249.818 437.833 249.818 438.736 cv
249.818 439.639 250.55 440.371 251.453 440.371 cv
252.357 440.371 253.089 439.639 253.089 438.736 cv
253.089 437.833 252.357 437.101 251.453 437.101 cv
148.581 433.995 mo
148.238 433.995 147.96 434.273 147.96 434.617 cv
147.96 434.96 148.238 435.238 148.581 435.238 cv
148.925 435.238 149.203 434.96 149.203 434.617 cv
149.203 434.273 148.925 433.995 148.581 433.995 cv
172.055 425.915 mo
171.359 425.915 170.796 426.479 170.796 427.174 cv
170.796 427.869 171.359 428.433 172.055 428.433 cv
172.75 428.433 173.314 427.869 173.314 427.174 cv
173.314 426.479 172.75 425.915 172.055 425.915 cv
200.843 421.867 mo
200.627 421.867 200.453 422.042 200.453 422.257 cv
200.453 422.472 200.627 422.647 200.843 422.647 cv
201.058 422.647 201.233 422.472 201.233 422.257 cv
201.233 422.042 201.058 421.867 200.843 421.867 cv
185.372 396.597 mo
185.154 396.597 184.977 396.774 184.977 396.993 cv
184.977 397.211 185.154 397.388 185.372 397.388 cv
185.59 397.388 185.768 397.211 185.768 396.993 cv
185.768 396.774 185.59 396.597 185.372 396.597 cv
23.949 216.799 mo
15.526 209.891 8.18177 202.945 0 196.473 cv
0 101.341 li
3.88351 135.35 60.9505 145.683 41.9787 185.683 cv
38.4609 193.1 34.7112 199.649 31.0974 205.532 cv
30.6946 205.156 30.407 204.659 30.2906 204.096 cv
29.7874 201.665 li
29.2847 204.096 li
29.0651 205.158 28.2355 205.987 27.1736 206.207 cv
24.7412 206.71 li
27.1732 207.213 li
28.0341 207.391 28.7425 207.969 29.0969 208.748 cv
27.3137 211.582 25.5813 214.258 23.949 216.799 cv
26.9427 172.602 mo
25.9406 172.602 25.1282 173.414 25.1282 174.416 cv
25.1282 175.418 25.9406 176.23 26.9427 176.23 cv
27.9448 176.23 28.7572 175.418 28.7572 174.416 cv
28.7572 173.414 27.9448 172.602 26.9427 172.602 cv
4.65235 170.579 mo
3.96261 170.579 3.40334 171.138 3.40334 171.828 cv
3.40334 172.517 3.96261 173.076 4.65235 173.076 cv
5.34209 173.076 5.90135 172.517 5.90135 171.828 cv
5.90135 171.138 5.34209 170.579 4.65235 170.579 cv
12.0544 149.492 mo
10.9823 149.492 10.1129 150.361 10.1129 151.433 cv
10.1129 152.505 10.9823 153.374 12.0544 153.374 cv
13.1266 153.374 13.9958 152.505 13.9958 151.433 cv
13.9958 150.361 13.1266 149.492 12.0544 149.492 cv
5.34992 128.345 mo
5.08856 128.345 4.87677 128.557 4.87677 128.818 cv
4.87677 129.079 5.08856 129.291 5.34992 129.291 cv
5.61108 129.291 5.82306 129.079 5.82306 128.818 cv
5.82306 128.557 5.61108 128.345 5.34992 128.345 cv
f
34.193 366.493 mo
34.0017 365.568 li
33.9182 365.164 33.6025 364.848 33.1984 364.765 cv
32.2732 364.574 li
33.1986 364.382 li
33.6027 364.298 33.9182 363.983 34.0017 363.579 cv
34.193 362.654 li
34.3845 363.579 li
34.4682 363.983 34.784 364.299 35.1881 364.382 cv
36.1133 364.574 li
35.1883 364.765 li
34.784 364.848 34.4682 365.164 34.3845 365.568 cv
34.193 366.493 li
.835294 .890196 1 rgb
f
58.9854 425.413 mo
58.6486 423.784 li
58.5016 423.073 57.9456 422.517 57.234 422.37 cv
55.6049 422.034 li
57.2344 421.697 li
57.9458 421.549 58.5016 420.993 58.6486 420.282 cv
58.9854 418.654 li
59.3227 420.282 li
59.4698 420.994 60.0256 421.55 60.7371 421.697 cv
62.3663 422.034 li
60.7371 422.37 li
60.0256 422.517 59.4698 423.073 59.3227 423.784 cv
58.9854 425.413 li
f
29.0969 208.748 mo
28.7425 207.969 28.0341 207.391 27.1732 207.213 cv
24.7412 206.71 li
27.1736 206.207 li
28.2355 205.987 29.0651 205.158 29.2847 204.096 cv
29.7874 201.665 li
30.2906 204.096 li
30.407 204.659 30.6946 205.156 31.0974 205.532 cv
30.4253 206.626 29.7571 207.699 29.0969 208.748 cv
f
38.4893 433.602 mo
38.2795 432.587 li
38.1878 432.143 37.8411 431.797 37.3976 431.705 cv
36.3821 431.495 li
37.3978 431.285 li
37.8413 431.193 38.1878 430.847 38.2795 430.404 cv
38.4893 429.389 li
38.6994 430.404 li
38.7912 430.847 39.1379 431.193 39.5813 431.285 cv
40.5968 431.495 li
39.5815 431.705 li
39.1379 431.797 38.7912 432.143 38.6994 432.587 cv
38.4893 433.602 li
f
135.251 410.134 mo
135.046 409.143 li
134.956 408.71 134.618 408.372 134.185 408.282 cv
133.194 408.077 li
134.185 407.872 li
134.618 407.783 134.956 407.445 135.046 407.012 cv
135.251 406.021 li
135.456 407.012 li
135.545 407.445 135.884 407.783 136.317 407.872 cv
137.308 408.077 li
136.317 408.282 li
135.884 408.372 135.545 408.71 135.456 409.143 cv
135.251 410.134 li
f
92.9016 414.902 mo
92.4977 414.902 92.1705 414.575 92.1705 414.172 cv
92.1705 413.768 92.4977 413.441 92.9016 413.441 cv
93.3053 413.441 93.6327 413.768 93.6327 414.172 cv
93.6327 414.575 93.3053 414.902 92.9016 414.902 cv
f
101.045 299.637 mo
100.217 299.637 99.5453 298.965 99.5453 298.137 cv
99.5453 297.309 100.217 296.638 101.045 296.638 cv
101.873 296.638 102.545 297.309 102.545 298.137 cv
102.545 298.965 101.873 299.637 101.045 299.637 cv
f
17.7777 340.175 mo
17.524 340.175 17.3182 339.969 17.3182 339.716 cv
17.3182 339.462 17.524 339.256 17.7777 339.256 cv
18.0315 339.256 18.2372 339.462 18.2372 339.716 cv
18.2372 339.969 18.0315 340.175 17.7777 340.175 cv
f
385.832 440.608 mo
385.573 440.608 385.363 440.398 385.363 440.139 cv
385.363 439.88 385.573 439.67 385.832 439.67 cv
386.091 439.67 386.301 439.88 386.301 440.139 cv
386.301 440.398 386.091 440.608 385.832 440.608 cv
f
28.432 287.253 mo
27.85 287.253 27.3781 286.781 27.3781 286.199 cv
27.3781 285.617 27.85 285.146 28.432 285.146 cv
29.0139 285.146 29.4857 285.617 29.4857 286.199 cv
29.4857 286.781 29.0139 287.253 28.432 287.253 cv
f
50.19 441.063 mo
49.5589 441.063 49.0476 440.552 49.0476 439.921 cv
49.0476 439.29 49.5589 438.779 50.19 438.779 cv
50.8209 438.779 51.3324 439.29 51.3324 439.921 cv
51.3324 440.552 50.8209 441.063 50.19 441.063 cv
f
48.5116 415.207 mo
47.4405 415.207 46.5721 414.338 46.5721 413.268 cv
46.5721 412.197 47.4405 411.329 48.5116 411.329 cv
49.5826 411.329 50.451 412.197 50.451 413.268 cv
50.451 414.338 49.5826 415.207 48.5116 415.207 cv
f
26.9427 176.23 mo
25.9406 176.23 25.1282 175.418 25.1282 174.416 cv
25.1282 173.414 25.9406 172.602 26.9427 172.602 cv
27.9448 172.602 28.7572 173.414 28.7572 174.416 cv
28.7572 175.418 27.9448 176.23 26.9427 176.23 cv
f
148.581 435.238 mo
148.238 435.238 147.96 434.96 147.96 434.617 cv
147.96 434.273 148.238 433.995 148.581 433.995 cv
148.925 433.995 149.203 434.273 149.203 434.617 cv
149.203 434.96 148.925 435.238 148.581 435.238 cv
f
185.372 397.388 mo
185.154 397.388 184.977 397.211 184.977 396.993 cv
184.977 396.774 185.154 396.597 185.372 396.597 cv
185.59 396.597 185.768 396.774 185.768 396.993 cv
185.768 397.211 185.59 397.388 185.372 397.388 cv
f
309.524 445.481 mo
308.957 445.481 308.497 445.022 308.497 444.455 cv
308.497 444.09 308.688 443.769 308.975 443.587 cv
309.403 443.635 309.823 443.681 310.246 443.725 cv
310.434 443.911 310.55 444.169 310.55 444.455 cv
310.55 445.022 310.091 445.481 309.524 445.481 cv
f
479.661 448.745 mo
479.365 448.745 479.126 448.505 479.126 448.209 cv
479.126 447.914 479.365 447.674 479.661 447.674 cv
479.957 447.674 480.197 447.914 480.197 448.209 cv
480.197 448.505 479.957 448.745 479.661 448.745 cv
f
128.6 395.266 mo
128.271 395.266 128.005 395 128.005 394.672 cv
128.005 394.343 128.271 394.077 128.6 394.077 cv
128.928 394.077 129.194 394.343 129.194 394.672 cv
129.194 395 128.928 395.266 128.6 395.266 cv
f
5.34992 129.291 mo
5.08856 129.291 4.87677 129.079 4.87677 128.818 cv
4.87677 128.557 5.08856 128.345 5.34992 128.345 cv
5.61108 128.345 5.82306 128.557 5.82306 128.818 cv
5.82306 129.079 5.61108 129.291 5.34992 129.291 cv
f
5.89031 424.197 mo
5.60827 424.197 5.37963 423.969 5.37963 423.687 cv
5.37963 423.405 5.60827 423.176 5.89031 423.176 cv
6.17235 423.176 6.40099 423.405 6.40099 423.687 cv
6.40099 423.969 6.17235 424.197 5.89031 424.197 cv
f
77.6327 283.985 mo
77.3298 283.985 77.0843 283.739 77.0843 283.437 cv
77.0843 283.134 77.3298 282.888 77.6327 282.888 cv
77.9357 282.888 78.1814 283.134 78.1814 283.437 cv
78.1814 283.739 77.9357 283.985 77.6327 283.985 cv
f
4.65235 173.076 mo
3.96261 173.076 3.40334 172.517 3.40334 171.828 cv
3.40334 171.138 3.96261 170.579 4.65235 170.579 cv
5.34209 170.579 5.90135 171.138 5.90135 171.828 cv
5.90135 172.517 5.34209 173.076 4.65235 173.076 cv
f
14.9067 264.855 mo
13.8757 264.855 13.0399 264.02 13.0399 262.989 cv
13.0399 261.958 13.8757 261.123 14.9067 261.123 cv
15.9379 261.123 16.7738 261.958 16.7738 262.989 cv
16.7738 264.02 15.9379 264.855 14.9067 264.855 cv
f
116.063 319.305 mo
115.683 319.305 115.375 318.997 115.375 318.617 cv
115.375 318.238 115.683 317.93 116.063 317.93 cv
116.442 317.93 116.75 318.238 116.75 318.617 cv
116.75 318.997 116.442 319.305 116.063 319.305 cv
f
9.24588 245.11 mo
8.86889 245.11 8.56336 244.804 8.56336 244.427 cv
8.56336 244.051 8.86889 243.745 9.24588 243.745 cv
9.62287 243.745 9.92839 244.051 9.92839 244.427 cv
9.92839 244.804 9.62287 245.11 9.24588 245.11 cv
f
200.843 422.647 mo
200.627 422.647 200.453 422.472 200.453 422.257 cv
200.453 422.042 200.627 421.867 200.843 421.867 cv
201.058 421.867 201.233 422.042 201.233 422.257 cv
201.233 422.472 201.058 422.647 200.843 422.647 cv
f
251.453 440.371 mo
250.55 440.371 249.818 439.639 249.818 438.736 cv
249.818 437.833 250.55 437.101 251.453 437.101 cv
252.357 437.101 253.089 437.833 253.089 438.736 cv
253.089 439.639 252.357 440.371 251.453 440.371 cv
f
172.055 428.433 mo
171.359 428.433 170.796 427.869 170.796 427.174 cv
170.796 426.479 171.359 425.915 172.055 425.915 cv
172.75 425.915 173.314 426.479 173.314 427.174 cv
173.314 427.869 172.75 428.433 172.055 428.433 cv
f
126.049 415.637 mo
125.758 415.637 125.523 415.402 125.523 415.112 cv
125.523 414.822 125.758 414.587 126.049 414.587 cv
126.339 414.587 126.574 414.822 126.574 415.112 cv
126.574 415.402 126.339 415.637 126.049 415.637 cv
f
87.303 344.702 mo
86.3117 344.702 85.508 343.899 85.508 342.908 cv
85.508 341.916 86.3117 341.113 87.303 341.113 cv
88.2942 341.113 89.098 341.916 89.098 342.908 cv
89.098 343.899 88.2942 344.702 87.303 344.702 cv
f
35.3788 318.986 mo
34.9518 318.986 34.6055 318.64 34.6055 318.213 cv
34.6055 317.786 34.9518 317.44 35.3788 317.44 cv
35.806 317.44 36.1522 317.786 36.1522 318.213 cv
36.1522 318.64 35.806 318.986 35.3788 318.986 cv
f
77.9096 363.246 mo
77.4336 362.947 77.1172 362.417 77.1172 361.814 cv
77.1172 360.881 77.8736 360.125 78.8071 360.125 cv
79.2588 360.125 79.6692 360.302 79.9724 360.59 cv
79.2538 361.464 78.5666 362.347 77.9096 363.246 cv
f
79.6056 312.634 mo
79.1646 312.634 78.8071 312.276 78.8071 311.835 cv
78.8071 311.394 79.1646 311.037 79.6056 311.037 cv
80.0464 311.037 80.404 311.394 80.404 311.835 cv
80.404 312.276 80.0464 312.634 79.6056 312.634 cv
f
126.344 443.657 mo
126.077 443.657 125.86 443.44 125.86 443.173 cv
125.86 442.907 126.077 442.69 126.344 442.69 cv
126.611 442.69 126.827 442.907 126.827 443.173 cv
126.827 443.44 126.611 443.657 126.344 443.657 cv
f
60.4655 307.829 mo
60.0096 307.829 59.64 307.459 59.64 307.004 cv
59.64 306.548 60.0096 306.178 60.4655 306.178 cv
60.9213 306.178 61.2907 306.548 61.2907 307.004 cv
61.2907 307.459 60.9213 307.829 60.4655 307.829 cv
f
32.1939 344.39 mo
31.9219 344.39 31.7014 344.17 31.7014 343.898 cv
31.7014 343.626 31.9219 343.406 32.1939 343.406 cv
32.4657 343.406 32.6863 343.626 32.6863 343.898 cv
32.6863 344.17 32.4657 344.39 32.1939 344.39 cv
f
429.865 440.444 mo
429.305 440.444 428.851 439.99 428.851 439.43 cv
428.851 438.87 429.305 438.416 429.865 438.416 cv
430.425 438.416 430.88 438.87 430.88 439.43 cv
430.88 439.99 430.425 440.444 429.865 440.444 cv
f
9.87941 220.68 mo
9.16779 220.68 8.59066 220.104 8.59066 219.392 cv
8.59066 218.681 9.16779 218.104 9.87941 218.104 cv
10.5912 218.104 11.1682 218.681 11.1682 219.392 cv
11.1682 220.104 10.5912 220.68 9.87941 220.68 cv
f
106.712 429.219 mo
106.172 429.219 105.735 428.781 105.735 428.242 cv
105.735 427.702 106.172 427.264 106.712 427.264 cv
107.252 427.264 107.689 427.702 107.689 428.242 cv
107.689 428.781 107.252 429.219 106.712 429.219 cv
f
23.6126 443.709 mo
22.8211 443.709 22.1793 443.067 22.1793 442.276 cv
22.1793 441.485 22.8211 440.843 23.6126 440.843 cv
24.4044 440.843 25.0459 441.485 25.0459 442.276 cv
25.0459 443.067 24.4044 443.709 23.6126 443.709 cv
f
26.5655 391.324 mo
26.3208 391.324 26.1225 391.125 26.1225 390.881 cv
26.1225 390.636 26.3208 390.438 26.5655 390.438 cv
26.81 390.438 27.0083 390.636 27.0083 390.881 cv
27.0083 391.125 26.81 391.324 26.5655 391.324 cv
f
43.6609 370.934 mo
43.1892 370.934 42.8066 370.551 42.8066 370.08 cv
42.8066 369.608 43.1892 369.225 43.6609 369.225 cv
44.1329 369.225 44.5155 369.608 44.5155 370.08 cv
44.5155 370.551 44.1329 370.934 43.6609 370.934 cv
f
14.6524 297.941 mo
13.9026 297.941 13.295 297.334 13.295 296.584 cv
13.295 295.835 13.9026 295.227 14.6524 295.227 cv
15.402 295.227 16.0098 295.835 16.0098 296.584 cv
16.0098 297.334 15.402 297.941 14.6524 297.941 cv
f
29.951 422.59 mo
29.5493 422.59 29.2235 422.264 29.2235 421.862 cv
29.2235 421.46 29.5493 421.135 29.951 421.135 cv
30.3529 421.135 30.6787 421.46 30.6787 421.862 cv
30.6787 422.264 30.3529 422.59 29.951 422.59 cv
f
455.926 443.77 mo
455.077 443.77 454.388 443.082 454.388 442.233 cv
454.388 441.384 455.077 440.696 455.926 440.696 cv
456.775 440.696 457.463 441.384 457.463 442.233 cv
457.463 443.082 456.775 443.77 455.926 443.77 cv
f
58.5873 345.198 mo
58.217 345.198 57.9169 344.898 57.9169 344.527 cv
57.9169 344.157 58.217 343.857 58.5873 343.857 cv
58.9577 343.857 59.258 344.157 59.258 344.527 cv
59.258 344.898 58.9577 345.198 58.5873 345.198 cv
f
78.4351 438.992 mo
78.1021 438.992 77.8321 438.722 77.8321 438.389 cv
77.8321 438.056 78.1021 437.787 78.4351 437.787 cv
78.7681 437.787 79.0381 438.056 79.0381 438.389 cv
79.0381 438.722 78.7681 438.992 78.4351 438.992 cv
f
221.472 441.54 mo
221.238 441.54 221.048 441.35 221.048 441.116 cv
221.048 440.882 221.238 440.692 221.472 440.692 cv
221.706 440.692 221.896 440.882 221.896 441.116 cv
221.896 441.35 221.706 441.54 221.472 441.54 cv
f
12.0544 153.374 mo
10.9823 153.374 10.1129 152.505 10.1129 151.433 cv
10.1129 150.361 10.9823 149.492 12.0544 149.492 cv
13.1266 149.492 13.9958 150.361 13.9958 151.433 cv
13.9958 152.505 13.1266 153.374 12.0544 153.374 cv
f
61.4507 391.042 mo
60.9304 391.042 60.5086 390.621 60.5086 390.1 cv
60.5086 389.58 60.9304 389.159 61.4507 389.159 cv
61.9708 389.159 62.3926 389.58 62.3926 390.1 cv
62.3926 390.621 61.9708 391.042 61.4507 391.042 cv
f
156.342 405.657 mo
155.91 405.657 155.56 405.307 155.56 404.875 cv
155.56 404.443 155.91 404.093 156.342 404.093 cv
156.774 404.093 157.125 404.443 157.125 404.875 cv
157.125 405.307 156.774 405.657 156.342 405.657 cv
f
48.7932 303.247 mo
47.8413 298.644 li
47.4254 296.634 45.8536 295.063 43.8428 294.646 cv
39.238 293.695 li
43.8428 292.742 li
45.8536 292.326 47.4254 290.755 47.8413 288.745 cv
48.7932 284.141 li
49.7462 288.745 li
50.1623 290.755 51.7339 292.326 53.7449 292.742 cv
58.3497 293.695 li
53.7449 294.646 li
51.7339 295.063 50.1623 296.634 49.7462 298.644 cv
48.7932 303.247 li
f
799.998 450 mo
662.235 450 li
662.167 449.802 661.979 449.66 661.758 449.66 cv
661.537 449.66 661.35 449.802 661.282 450 cv
598.563 450 li
542.201 450 520.692 393.693 582.865 393.693 cv
585.931 393.693 589.204 393.83 592.683 394.118 cv
613.638 395.85 636.663 397.393 658.97 397.392 cv
715.464 397.391 767.278 387.487 768.649 345.667 cv
769.187 329.268 764.09 318.161 756.421 309.619 cv
756.67 309.568 li
756.306 309.493 li
754.91 307.947 753.428 306.485 751.881 305.091 cv
751.8 304.699 li
751.745 304.968 li
731.533 286.853 700.197 280.134 698.173 248.652 cv
695.569 208.17 757.045 179.784 738.159 153.658 cv
742.239 152.815 li
737.634 151.863 li
737.168 151.766 736.725 151.607 736.315 151.395 cv
735.649 150.664 734.915 149.933 734.113 149.204 cv
733.896 148.789 733.734 148.339 733.635 147.865 cv
732.683 143.262 li
731.848 147.298 li
728.948 145.027 725.332 142.765 720.908 140.51 cv
718.689 139.379 716.486 138.286 714.3 137.227 cv
714.237 137.161 714.151 137.118 714.055 137.108 cv
658.409 110.19 614.862 105.458 643.637 67.5753 cv
650.732 58.2352 663.266 54.3267 678.261 53.2049 cv
678.347 53.3706 678.411 53.5495 678.45 53.7379 cv
678.836 55.6049 li
679.222 53.7373 li
679.268 53.5172 679.348 53.3101 679.456 53.1217 cv
682.466 52.9274 685.569 52.8407 688.745 52.8407 cv
701.956 52.8407 716.398 54.3436 730.365 55.8462 cv
744.336 57.3493 757.832 58.8524 769.167 58.852 cv
787.263 58.8515 799.843 55.0182 799.998 41.2372 cv
799.998 117.798 li
799.061 117.847 798.317 118.622 798.317 119.571 cv
798.317 120.52 799.061 121.296 799.998 121.345 cv
799.998 450 li
630.408 447.959 mo
629.946 447.959 629.572 448.333 629.572 448.795 cv
629.572 449.256 629.946 449.631 630.408 449.631 cv
630.87 449.631 631.244 449.256 631.244 448.795 cv
631.244 448.333 630.87 447.959 630.408 447.959 cv
688.149 447.91 mo
687.919 447.91 687.733 448.096 687.733 448.326 cv
687.733 448.556 687.919 448.742 688.149 448.742 cv
688.379 448.742 688.565 448.556 688.565 448.326 cv
688.565 448.096 688.379 447.91 688.149 447.91 cv
769.642 443.222 mo
769.02 443.222 768.517 443.726 768.517 444.347 cv
768.517 444.968 769.02 445.472 769.642 445.472 cv
770.263 445.472 770.767 444.968 770.767 444.347 cv
770.767 443.726 770.263 443.222 769.642 443.222 cv
604.332 436.532 mo
603.248 436.532 602.369 437.41 602.369 438.494 cv
602.369 439.578 603.248 440.457 604.332 440.457 cv
605.417 440.457 606.295 439.578 606.295 438.494 cv
606.295 437.41 605.417 436.532 604.332 436.532 cv
744.663 437.292 mo
743.813 437.292 743.124 437.981 743.124 438.831 cv
743.124 439.68 743.813 440.369 744.663 440.369 cv
745.513 440.369 746.202 439.68 746.202 438.831 cv
746.202 437.981 745.513 437.292 744.663 437.292 cv
788.681 431.81 mo
787.908 431.81 787.281 432.437 787.281 433.21 cv
787.281 433.983 787.908 434.61 788.681 434.61 cv
789.455 434.61 790.082 433.983 790.082 433.21 cv
790.082 432.437 789.455 431.81 788.681 431.81 cv
762.743 428.471 mo
762.556 429.377 li
762.474 429.773 762.165 430.082 761.769 430.164 cv
760.863 430.351 li
761.769 430.538 li
762.164 430.62 762.474 430.93 762.556 431.325 cv
762.743 432.231 li
762.93 431.325 li
763.012 430.929 763.322 430.62 763.718 430.538 cv
764.623 430.351 li
763.717 430.164 li
763.321 430.082 763.012 429.773 762.93 429.377 cv
762.743 428.471 li
663.934 424.353 mo
662.907 424.353 662.075 425.185 662.075 426.211 cv
662.075 427.238 662.907 428.069 663.934 428.069 cv
664.961 428.069 665.793 427.238 665.793 426.211 cv
665.793 425.185 664.961 424.353 663.934 424.353 cv
584.02 426.357 mo
583.587 426.357 583.236 426.708 583.236 427.14 cv
583.236 427.573 583.587 427.923 584.02 427.923 cv
584.452 427.923 584.803 427.573 584.803 427.14 cv
584.803 426.708 584.452 426.357 584.02 426.357 cv
727.227 426.97 mo
727 426.97 726.815 427.155 726.815 427.382 cv
726.815 427.609 727 427.794 727.227 427.794 cv
727.455 427.794 727.639 427.609 727.639 427.382 cv
727.639 427.155 727.455 426.97 727.227 426.97 cv
636.225 421.273 mo
635.6 421.273 635.093 421.779 635.093 422.404 cv
635.093 423.029 635.6 423.535 636.225 423.535 cv
636.849 423.535 637.356 423.029 637.356 422.404 cv
637.356 421.779 636.849 421.273 636.225 421.273 cv
572.707 408.987 mo
572.299 410.962 li
572.121 411.824 571.447 412.498 570.584 412.676 cv
568.609 413.085 li
570.584 413.493 li
571.447 413.671 572.121 414.345 572.299 415.208 cv
572.707 417.182 li
573.116 415.208 li
573.295 414.345 573.969 413.671 574.831 413.493 cv
576.806 413.085 li
574.831 412.676 li
573.969 412.498 573.294 411.824 573.116 410.962 cv
572.707 408.987 li
692.862 406.619 mo
692.039 406.619 691.373 407.285 691.373 408.107 cv
691.373 408.929 692.039 409.595 692.862 409.595 cv
693.684 409.595 694.35 408.929 694.35 408.107 cv
694.35 407.285 693.684 406.619 692.862 406.619 cv
741.143 398.655 mo
740.378 398.655 739.758 399.275 739.758 400.04 cv
739.758 400.806 740.378 401.426 741.143 401.426 cv
741.909 401.426 742.529 400.806 742.529 400.04 cv
742.529 399.275 741.909 398.655 741.143 398.655 cv
607.755 399.88 mo
607.451 399.88 607.204 400.127 607.204 400.431 cv
607.204 400.735 607.451 400.982 607.755 400.982 cv
608.06 400.982 608.307 400.735 608.307 400.431 cv
608.307 400.127 608.06 399.88 607.755 399.88 cv
747.822 381.978 mo
747.603 381.978 747.426 382.156 747.426 382.375 cv
747.426 382.594 747.603 382.771 747.822 382.771 cv
748.041 382.771 748.219 382.594 748.219 382.375 cv
748.219 382.156 748.041 381.978 747.822 381.978 cv
775.485 373.826 mo
775.257 374.926 li
775.158 375.406 774.783 375.781 774.303 375.88 cv
773.203 376.108 li
774.303 376.335 li
774.783 376.434 775.158 376.809 775.257 377.289 cv
775.485 378.388 li
775.712 377.289 li
775.812 376.809 776.187 376.434 776.667 376.335 cv
777.766 376.108 li
776.667 375.88 li
776.187 375.781 775.811 375.406 775.712 374.926 cv
775.485 373.826 li
778.054 368.312 mo
777.801 368.312 777.595 368.517 777.595 368.77 cv
777.595 369.023 777.801 369.228 778.054 369.228 cv
778.307 369.228 778.512 369.023 778.512 368.77 cv
778.512 368.517 778.307 368.312 778.054 368.312 cv
778.722 334.559 mo
778.46 334.559 778.247 334.772 778.247 335.035 cv
778.247 335.297 778.46 335.51 778.722 335.51 cv
778.985 335.51 779.198 335.297 779.198 335.035 cv
779.198 334.772 778.985 334.559 778.722 334.559 cv
788.698 311.06 mo
788.021 311.06 787.472 311.609 787.472 312.285 cv
787.472 312.962 788.021 313.511 788.698 313.511 cv
789.375 313.511 789.924 312.962 789.924 312.285 cv
789.924 311.609 789.375 311.06 788.698 311.06 cv
769.934 296.967 mo
769.672 296.967 769.459 297.18 769.459 297.443 cv
769.459 297.705 769.672 297.918 769.934 297.918 cv
770.197 297.918 770.41 297.705 770.41 297.443 cv
770.41 297.18 770.197 296.967 769.934 296.967 cv
763.445 270.62 mo
762.424 270.62 761.596 271.447 761.596 272.467 cv
761.596 273.488 762.424 274.315 763.445 274.315 cv
764.465 274.315 765.293 273.488 765.293 272.467 cv
765.293 271.447 764.465 270.62 763.445 270.62 cv
733.235 271.673 mo
732.792 271.673 732.433 272.032 732.433 272.475 cv
732.433 272.918 732.792 273.278 733.235 273.278 cv
733.679 273.278 734.038 272.918 734.038 272.475 cv
734.038 272.032 733.679 271.673 733.235 271.673 cv
713.527 260.314 mo
713.109 262.334 li
712.927 263.216 712.238 263.906 711.355 264.088 cv
709.334 264.506 li
711.355 264.924 li
712.237 265.106 712.927 265.796 713.109 266.678 cv
713.527 268.698 li
713.945 266.678 li
714.128 265.796 714.818 265.106 715.701 264.924 cv
717.721 264.506 li
715.7 264.088 li
714.817 263.906 714.128 263.216 713.945 262.334 cv
713.527 260.314 li
744.346 260.135 mo
744.009 260.135 743.736 260.408 743.736 260.745 cv
743.736 261.082 744.009 261.355 744.346 261.355 cv
744.683 261.355 744.957 261.082 744.957 260.745 cv
744.957 260.408 744.683 260.135 744.346 260.135 cv
764.269 237.25 mo
763.949 238.798 li
763.809 239.475 763.28 240.003 762.604 240.143 cv
761.055 240.463 li
762.604 240.783 li
763.28 240.923 763.809 241.452 763.949 242.128 cv
764.269 243.676 li
764.589 242.128 li
764.729 241.452 765.258 240.923 765.935 240.783 cv
767.483 240.463 li
765.934 240.143 li
765.258 240.003 764.729 239.475 764.589 238.799 cv
764.269 237.25 li
790.413 242.681 mo
790.191 242.681 790.011 242.861 790.011 243.083 cv
790.011 243.305 790.191 243.485 790.413 243.485 cv
790.635 243.485 790.815 243.305 790.815 243.083 cv
790.815 242.861 790.635 242.681 790.413 242.681 cv
768.368 239.918 mo
768.099 239.918 767.881 240.136 767.881 240.404 cv
767.881 240.673 768.099 240.891 768.368 240.891 cv
768.637 240.891 768.854 240.673 768.854 240.404 cv
768.854 240.136 768.637 239.918 768.368 239.918 cv
782.463 227.386 mo
781.681 227.386 781.047 228.02 781.047 228.802 cv
781.047 229.583 781.681 230.217 782.463 230.217 cv
783.245 230.217 783.879 229.583 783.879 228.802 cv
783.879 228.02 783.245 227.386 782.463 227.386 cv
732.161 228.904 mo
731.871 228.904 731.637 229.139 731.637 229.428 cv
731.637 229.717 731.871 229.952 732.161 229.952 cv
732.45 229.952 732.685 229.717 732.685 229.428 cv
732.685 229.139 732.45 228.904 732.161 228.904 cv
706.454 224.337 mo
705.572 224.337 704.857 225.052 704.857 225.933 cv
704.857 226.815 705.572 227.529 706.454 227.529 cv
707.336 227.529 708.051 226.815 708.051 225.933 cv
708.051 225.052 707.336 224.337 706.454 224.337 cv
752.247 212.764 mo
751.949 212.764 751.707 213.005 751.707 213.303 cv
751.707 213.6 751.949 213.842 752.247 213.842 cv
752.544 213.842 752.786 213.6 752.786 213.303 cv
752.786 213.005 752.544 212.764 752.247 212.764 cv
769.432 194.287 mo
769 194.287 768.649 194.638 768.649 195.07 cv
768.649 195.503 769 195.854 769.432 195.854 cv
769.865 195.854 770.216 195.503 770.216 195.07 cv
770.216 194.638 769.865 194.287 769.432 194.287 cv
740.798 183.924 mo
739.976 183.924 739.31 184.59 739.31 185.411 cv
739.31 186.232 739.976 186.898 740.798 186.898 cv
741.619 186.898 742.286 186.232 742.286 185.411 cv
742.286 184.59 741.619 183.924 740.798 183.924 cv
787.92 181.661 mo
787.639 181.661 787.411 181.888 787.411 182.17 cv
787.411 182.451 787.639 182.679 787.92 182.679 cv
788.202 182.679 788.43 182.451 788.43 182.17 cv
788.43 181.888 788.202 181.661 787.92 181.661 cv
757.672 163.791 mo
756.748 163.791 755.999 164.539 755.999 165.462 cv
755.999 166.385 756.748 167.134 757.672 167.134 cv
758.595 167.134 759.344 166.385 759.344 165.462 cv
759.344 164.539 758.595 163.791 757.672 163.791 cv
782.462 151.679 mo
782.025 153.792 li
781.834 154.715 781.113 155.436 780.19 155.627 cv
778.076 156.064 li
780.19 156.501 li
781.113 156.692 781.834 157.413 782.025 158.336 cv
782.462 160.449 li
782.9 158.336 li
783.091 157.413 783.812 156.692 784.735 156.501 cv
786.849 156.064 li
784.735 155.627 li
783.812 155.436 783.091 154.715 782.9 153.792 cv
782.462 151.679 li
743.073 123.257 mo
741.977 123.257 741.088 124.145 741.088 125.241 cv
741.088 126.337 741.977 127.226 743.073 127.226 cv
744.169 127.226 745.058 126.337 745.058 125.241 cv
745.058 124.145 744.169 123.257 743.073 123.257 cv
720.908 106.337 mo
719.875 106.337 719.037 107.174 719.037 108.207 cv
719.037 109.24 719.875 110.077 720.908 110.077 cv
721.941 110.077 722.778 109.24 722.778 108.207 cv
722.778 107.174 721.941 106.337 720.908 106.337 cv
686.343 106.377 mo
685.558 106.377 684.922 107.013 684.922 107.797 cv
684.922 108.581 685.558 109.217 686.343 109.217 cv
687.127 109.217 687.763 108.581 687.763 107.797 cv
687.763 107.013 687.127 106.377 686.343 106.377 cv
751.14 104.035 mo
750.932 104.035 750.763 104.203 750.763 104.411 cv
750.763 104.619 750.932 104.787 751.14 104.787 cv
751.348 104.787 751.516 104.619 751.516 104.411 cv
751.516 104.203 751.348 104.035 751.14 104.035 cv
795.645 99.3245 mo
795.327 99.3245 795.07 99.5814 795.07 99.8984 cv
795.07 100.216 795.327 100.472 795.645 100.472 cv
795.962 100.472 796.219 100.216 796.219 99.8984 cv
796.219 99.5814 795.962 99.3245 795.645 99.3245 cv
654.267 94.1211 mo
653.842 94.1211 653.497 94.4658 653.497 94.8909 cv
653.497 95.3159 653.842 95.6608 654.267 95.6608 cv
654.692 95.6608 655.037 95.3159 655.037 94.8909 cv
655.037 94.4658 654.692 94.1211 654.267 94.1211 cv
730.128 90.4887 mo
729.706 90.4887 729.365 90.8306 729.365 91.2519 cv
729.365 91.6737 729.706 92.0154 730.128 92.0154 cv
730.55 92.0154 730.892 91.6737 730.892 91.2519 cv
730.892 90.8306 730.55 90.4887 730.128 90.4887 cv
681.896 83.4424 mo
680.875 83.4424 680.047 84.27 680.047 85.291 cv
680.047 86.3117 680.875 87.1396 681.896 87.1396 cv
682.917 87.1396 683.745 86.3117 683.745 85.291 cv
683.745 84.27 682.917 83.4424 681.896 83.4424 cv
770.913 85.5545 mo
770.701 85.5545 770.529 85.7264 770.529 85.9386 cv
770.529 86.1505 770.701 86.3224 770.913 86.3224 cv
771.125 86.3224 771.297 86.1505 771.297 85.9386 cv
771.297 85.7264 771.125 85.5545 770.913 85.5545 cv
711.774 75.6643 mo
711.112 75.6643 710.575 76.2013 710.575 76.8637 cv
710.575 77.5261 711.112 78.0631 711.774 78.0631 cv
712.437 78.0631 712.974 77.5261 712.974 76.8637 cv
712.974 76.2013 712.437 75.6643 711.774 75.6643 cv
657.071 76.6214 mo
656.856 76.6214 656.683 76.7952 656.683 77.0098 cv
656.683 77.2244 656.856 77.3983 657.071 77.3983 cv
657.286 77.3983 657.46 77.2244 657.46 77.0098 cv
657.46 76.7952 657.286 76.6214 657.071 76.6214 cv
755.058 69.5833 mo
754.778 70.9379 li
754.656 71.5298 754.193 71.9923 753.601 72.1148 cv
752.246 72.395 li
753.601 72.6753 li
754.193 72.7975 754.656 73.2598 754.778 73.8516 cv
755.058 75.2068 li
755.339 73.8516 li
755.461 73.2598 755.924 72.7975 756.516 72.6751 cv
757.871 72.395 li
756.516 72.1148 li
755.924 71.9923 755.461 71.5298 755.339 70.9383 cv
755.058 69.5833 li
688.977 72.9023 mo
688.353 72.9023 687.848 73.4076 687.848 74.0307 cv
687.848 74.6538 688.353 75.1588 688.977 75.1588 cv
689.6 75.1588 690.105 74.6538 690.105 74.0307 cv
690.105 73.4076 689.6 72.9023 688.977 72.9023 cv
733.556 68.81 mo
732.804 68.81 732.195 69.4193 732.195 70.1706 cv
732.195 70.922 732.804 71.5313 733.556 71.5313 cv
734.307 71.5313 734.917 70.922 734.917 70.1706 cv
734.917 69.4193 734.307 68.81 733.556 68.81 cv
699.747 60.439 mo
699.489 60.439 699.28 60.6477 699.28 60.9051 cv
699.28 61.1626 699.489 61.3712 699.747 61.3712 cv
700.004 61.3712 700.213 61.1626 700.213 60.9051 cv
700.213 60.6477 700.004 60.439 699.747 60.439 cv
.101961 .14902 .298039 rgb
f
762.743 432.231 mo
762.556 431.325 li
762.474 430.93 762.164 430.62 761.769 430.538 cv
760.863 430.351 li
761.769 430.164 li
762.165 430.082 762.474 429.773 762.556 429.377 cv
762.743 428.471 li
762.93 429.377 li
763.012 429.773 763.321 430.082 763.717 430.164 cv
764.623 430.351 li
763.718 430.538 li
763.322 430.62 763.012 430.929 762.93 431.325 cv
762.743 432.231 li
.835294 .890196 1 rgb
f
678.836 55.6049 mo
678.45 53.7379 li
678.411 53.5495 678.347 53.3706 678.261 53.2049 cv
678.658 53.1752 679.056 53.1475 679.456 53.1217 cv
679.348 53.3101 679.268 53.5172 679.222 53.7373 cv
678.836 55.6049 li
f
775.485 378.388 mo
775.257 377.289 li
775.158 376.809 774.783 376.434 774.303 376.335 cv
773.203 376.108 li
774.303 375.88 li
774.783 375.781 775.158 375.406 775.257 374.926 cv
775.485 373.826 li
775.712 374.926 li
775.811 375.406 776.187 375.781 776.667 375.88 cv
777.766 376.108 li
776.667 376.335 li
776.187 376.434 775.812 376.809 775.712 377.289 cv
775.485 378.388 li
f
756.421 309.619 mo
756.382 309.577 756.345 309.535 756.306 309.493 cv
756.67 309.568 li
756.421 309.619 li
751.881 305.091 mo
751.835 305.049 751.791 305.01 751.745 304.968 cv
751.8 304.699 li
751.881 305.091 li
f
755.058 75.2068 mo
754.778 73.8516 li
754.656 73.2598 754.193 72.7975 753.601 72.6753 cv
752.246 72.395 li
753.601 72.1148 li
754.193 71.9923 754.656 71.5298 754.778 70.9379 cv
755.058 69.5833 li
755.339 70.9383 li
755.461 71.5298 755.924 71.9923 756.516 72.1148 cv
757.871 72.395 li
756.516 72.6751 li
755.924 72.7975 755.461 73.2598 755.339 73.8516 cv
755.058 75.2068 li
f
713.527 268.698 mo
713.109 266.678 li
712.927 265.796 712.237 265.106 711.355 264.924 cv
709.334 264.506 li
711.355 264.088 li
712.238 263.906 712.927 263.216 713.109 262.334 cv
713.527 260.314 li
713.945 262.334 li
714.128 263.216 714.817 263.906 715.7 264.088 cv
717.721 264.506 li
715.701 264.924 li
714.818 265.106 714.128 265.796 713.945 266.678 cv
713.527 268.698 li
f
764.269 243.676 mo
763.949 242.128 li
763.809 241.452 763.28 240.923 762.604 240.783 cv
761.055 240.463 li
762.604 240.143 li
763.28 240.003 763.809 239.475 763.949 238.798 cv
764.269 237.25 li
764.589 238.799 li
764.729 239.475 765.258 240.003 765.934 240.143 cv
767.483 240.463 li
765.935 240.783 li
765.258 240.923 764.729 241.452 764.589 242.128 cv
764.269 243.676 li
f
782.462 160.449 mo
782.025 158.336 li
781.834 157.413 781.113 156.692 780.19 156.501 cv
778.076 156.064 li
780.19 155.627 li
781.113 155.436 781.834 154.715 782.025 153.792 cv
782.462 151.679 li
782.9 153.792 li
783.091 154.715 783.812 155.436 784.735 155.627 cv
786.849 156.064 li
784.735 156.501 li
783.812 156.692 783.091 157.413 782.9 158.336 cv
782.462 160.449 li
f
572.707 417.182 mo
572.299 415.208 li
572.121 414.345 571.447 413.671 570.584 413.493 cv
568.609 413.085 li
570.584 412.676 li
571.447 412.498 572.121 411.824 572.299 410.962 cv
572.707 408.987 li
573.116 410.962 li
573.294 411.824 573.969 412.498 574.831 412.676 cv
576.806 413.085 li
574.831 413.493 li
573.969 413.671 573.295 414.345 573.116 415.208 cv
572.707 417.182 li
f
787.92 182.679 mo
787.639 182.679 787.411 182.451 787.411 182.17 cv
787.411 181.888 787.639 181.661 787.92 181.661 cv
788.202 181.661 788.43 181.888 788.43 182.17 cv
788.43 182.451 788.202 182.679 787.92 182.679 cv
f
769.432 195.854 mo
769 195.854 768.649 195.503 768.649 195.07 cv
768.649 194.638 769 194.287 769.432 194.287 cv
769.865 194.287 770.216 194.638 770.216 195.07 cv
770.216 195.503 769.865 195.854 769.432 195.854 cv
f
733.235 273.278 mo
732.792 273.278 732.433 272.918 732.433 272.475 cv
732.433 272.032 732.792 271.673 733.235 271.673 cv
733.679 271.673 734.038 272.032 734.038 272.475 cv
734.038 272.918 733.679 273.278 733.235 273.278 cv
f
744.346 261.355 mo
744.009 261.355 743.736 261.082 743.736 260.745 cv
743.736 260.408 744.009 260.135 744.346 260.135 cv
744.683 260.135 744.957 260.408 744.957 260.745 cv
744.957 261.082 744.683 261.355 744.346 261.355 cv
f
604.332 440.457 mo
603.248 440.457 602.369 439.578 602.369 438.494 cv
602.369 437.41 603.248 436.532 604.332 436.532 cv
605.417 436.532 606.295 437.41 606.295 438.494 cv
606.295 439.578 605.417 440.457 604.332 440.457 cv
f
607.755 400.982 mo
607.451 400.982 607.204 400.735 607.204 400.431 cv
607.204 400.127 607.451 399.88 607.755 399.88 cv
608.06 399.88 608.307 400.127 608.307 400.431 cv
608.307 400.735 608.06 400.982 607.755 400.982 cv
f
741.143 401.426 mo
740.378 401.426 739.758 400.806 739.758 400.04 cv
739.758 399.275 740.378 398.655 741.143 398.655 cv
741.909 398.655 742.529 399.275 742.529 400.04 cv
742.529 400.806 741.909 401.426 741.143 401.426 cv
f
654.267 95.6608 mo
653.842 95.6608 653.497 95.3159 653.497 94.8909 cv
653.497 94.4658 653.842 94.1211 654.267 94.1211 cv
654.692 94.1211 655.037 94.4658 655.037 94.8909 cv
655.037 95.3159 654.692 95.6608 654.267 95.6608 cv
f
768.368 240.891 mo
768.099 240.891 767.881 240.673 767.881 240.404 cv
767.881 240.136 768.099 239.918 768.368 239.918 cv
768.637 239.918 768.854 240.136 768.854 240.404 cv
768.854 240.673 768.637 240.891 768.368 240.891 cv
f
688.149 448.742 mo
687.919 448.742 687.733 448.556 687.733 448.326 cv
687.733 448.096 687.919 447.91 688.149 447.91 cv
688.379 447.91 688.565 448.096 688.565 448.326 cv
688.565 448.556 688.379 448.742 688.149 448.742 cv
f
630.408 449.631 mo
629.946 449.631 629.572 449.256 629.572 448.795 cv
629.572 448.333 629.946 447.959 630.408 447.959 cv
630.87 447.959 631.244 448.333 631.244 448.795 cv
631.244 449.256 630.87 449.631 630.408 449.631 cv
f
782.463 230.217 mo
781.681 230.217 781.047 229.583 781.047 228.802 cv
781.047 228.02 781.681 227.386 782.463 227.386 cv
783.245 227.386 783.879 228.02 783.879 228.802 cv
783.879 229.583 783.245 230.217 782.463 230.217 cv
f
584.02 427.923 mo
583.587 427.923 583.236 427.573 583.236 427.14 cv
583.236 426.708 583.587 426.357 584.02 426.357 cv
584.452 426.357 584.803 426.708 584.803 427.14 cv
584.803 427.573 584.452 427.923 584.02 427.923 cv
f
763.445 274.315 mo
762.424 274.315 761.596 273.488 761.596 272.467 cv
761.596 271.447 762.424 270.62 763.445 270.62 cv
764.465 270.62 765.293 271.447 765.293 272.467 cv
765.293 273.488 764.465 274.315 763.445 274.315 cv
f
743.073 127.226 mo
741.977 127.226 741.088 126.337 741.088 125.241 cv
741.088 124.145 741.977 123.257 743.073 123.257 cv
744.169 123.257 745.058 124.145 745.058 125.241 cv
745.058 126.337 744.169 127.226 743.073 127.226 cv
f
744.663 440.369 mo
743.813 440.369 743.124 439.68 743.124 438.831 cv
743.124 437.981 743.813 437.292 744.663 437.292 cv
745.513 437.292 746.202 437.981 746.202 438.831 cv
746.202 439.68 745.513 440.369 744.663 440.369 cv
f
663.934 428.069 mo
662.907 428.069 662.075 427.238 662.075 426.211 cv
662.075 425.185 662.907 424.353 663.934 424.353 cv
664.961 424.353 665.793 425.185 665.793 426.211 cv
665.793 427.238 664.961 428.069 663.934 428.069 cv
f
788.681 434.61 mo
787.908 434.61 787.281 433.983 787.281 433.21 cv
787.281 432.437 787.908 431.81 788.681 431.81 cv
789.455 431.81 790.082 432.437 790.082 433.21 cv
790.082 433.983 789.455 434.61 788.681 434.61 cv
f
714.3 137.227 mo
714.219 137.188 714.136 137.148 714.055 137.108 cv
714.151 137.118 714.237 137.161 714.3 137.227 cv
f
757.672 167.134 mo
756.748 167.134 755.999 166.385 755.999 165.462 cv
755.999 164.539 756.748 163.791 757.672 163.791 cv
758.595 163.791 759.344 164.539 759.344 165.462 cv
759.344 166.385 758.595 167.134 757.672 167.134 cv
f
769.642 445.472 mo
769.02 445.472 768.517 444.968 768.517 444.347 cv
768.517 443.726 769.02 443.222 769.642 443.222 cv
770.263 443.222 770.767 443.726 770.767 444.347 cv
770.767 444.968 770.263 445.472 769.642 445.472 cv
f
692.862 409.595 mo
692.039 409.595 691.373 408.929 691.373 408.107 cv
691.373 407.285 692.039 406.619 692.862 406.619 cv
693.684 406.619 694.35 407.285 694.35 408.107 cv
694.35 408.929 693.684 409.595 692.862 409.595 cv
f
769.934 297.918 mo
769.672 297.918 769.459 297.705 769.459 297.443 cv
769.459 297.18 769.672 296.967 769.934 296.967 cv
770.197 296.967 770.41 297.18 770.41 297.443 cv
770.41 297.705 770.197 297.918 769.934 297.918 cv
f
730.128 92.0154 mo
729.706 92.0154 729.365 91.6737 729.365 91.2519 cv
729.365 90.8306 729.706 90.4887 730.128 90.4887 cv
730.55 90.4887 730.892 90.8306 730.892 91.2519 cv
730.892 91.6737 730.55 92.0154 730.128 92.0154 cv
f
751.14 104.787 mo
750.932 104.787 750.763 104.619 750.763 104.411 cv
750.763 104.203 750.932 104.035 751.14 104.035 cv
751.348 104.035 751.516 104.203 751.516 104.411 cv
751.516 104.619 751.348 104.787 751.14 104.787 cv
f
790.413 243.485 mo
790.191 243.485 790.011 243.305 790.011 243.083 cv
790.011 242.861 790.191 242.681 790.413 242.681 cv
790.635 242.681 790.815 242.861 790.815 243.083 cv
790.815 243.305 790.635 243.485 790.413 243.485 cv
f
733.556 71.5313 mo
732.804 71.5313 732.195 70.922 732.195 70.1706 cv
732.195 69.4193 732.804 68.81 733.556 68.81 cv
734.307 68.81 734.917 69.4193 734.917 70.1706 cv
734.917 70.922 734.307 71.5313 733.556 71.5313 cv
f
711.774 78.0631 mo
711.112 78.0631 710.575 77.5261 710.575 76.8637 cv
710.575 76.2013 711.112 75.6643 711.774 75.6643 cv
712.437 75.6643 712.974 76.2013 712.974 76.8637 cv
712.974 77.5261 712.437 78.0631 711.774 78.0631 cv
f
662.235 450 mo
661.282 450 li
661.282 450 li
661.35 449.802 661.537 449.66 661.758 449.66 cv
661.979 449.66 662.167 449.802 662.235 450 cv
662.235 450 li
f
732.161 229.952 mo
731.871 229.952 731.637 229.717 731.637 229.428 cv
731.637 229.139 731.871 228.904 732.161 228.904 cv
732.45 228.904 732.685 229.139 732.685 229.428 cv
732.685 229.717 732.45 229.952 732.161 229.952 cv
f
799.998 121.345 mo
799.998 121.345 li
799.061 121.296 798.317 120.52 798.317 119.571 cv
798.317 118.622 799.061 117.847 799.998 117.798 cv
799.998 117.798 li
799.998 121.345 li
f
747.822 382.771 mo
747.603 382.771 747.426 382.594 747.426 382.375 cv
747.426 382.156 747.603 381.978 747.822 381.978 cv
748.041 381.978 748.219 382.156 748.219 382.375 cv
748.219 382.594 748.041 382.771 747.822 382.771 cv
f
686.343 109.217 mo
685.558 109.217 684.922 108.581 684.922 107.797 cv
684.922 107.013 685.558 106.377 686.343 106.377 cv
687.127 106.377 687.763 107.013 687.763 107.797 cv
687.763 108.581 687.127 109.217 686.343 109.217 cv
f
752.247 213.842 mo
751.949 213.842 751.707 213.6 751.707 213.303 cv
751.707 213.005 751.949 212.764 752.247 212.764 cv
752.544 212.764 752.786 213.005 752.786 213.303 cv
752.786 213.6 752.544 213.842 752.247 213.842 cv
f
681.896 87.1396 mo
680.875 87.1396 680.047 86.3117 680.047 85.291 cv
680.047 84.27 680.875 83.4424 681.896 83.4424 cv
682.917 83.4424 683.745 84.27 683.745 85.291 cv
683.745 86.3117 682.917 87.1396 681.896 87.1396 cv
f
740.798 186.898 mo
739.976 186.898 739.31 186.232 739.31 185.411 cv
739.31 184.59 739.976 183.924 740.798 183.924 cv
741.619 183.924 742.286 184.59 742.286 185.411 cv
742.286 186.232 741.619 186.898 740.798 186.898 cv
f
788.698 313.511 mo
788.021 313.511 787.472 312.962 787.472 312.285 cv
787.472 311.609 788.021 311.06 788.698 311.06 cv
789.375 311.06 789.924 311.609 789.924 312.285 cv
789.924 312.962 789.375 313.511 788.698 313.511 cv
f
727.227 427.794 mo
727 427.794 726.815 427.609 726.815 427.382 cv
726.815 427.155 727 426.97 727.227 426.97 cv
727.455 426.97 727.639 427.155 727.639 427.382 cv
727.639 427.609 727.455 427.794 727.227 427.794 cv
f
657.071 77.3983 mo
656.856 77.3983 656.683 77.2244 656.683 77.0098 cv
656.683 76.7952 656.856 76.6214 657.071 76.6214 cv
657.286 76.6214 657.46 76.7952 657.46 77.0098 cv
657.46 77.2244 657.286 77.3983 657.071 77.3983 cv
f
795.645 100.472 mo
795.327 100.472 795.07 100.216 795.07 99.8984 cv
795.07 99.5814 795.327 99.3245 795.645 99.3245 cv
795.962 99.3245 796.219 99.5814 796.219 99.8984 cv
796.219 100.216 795.962 100.472 795.645 100.472 cv
f
770.913 86.3224 mo
770.701 86.3224 770.529 86.1505 770.529 85.9386 cv
770.529 85.7264 770.701 85.5545 770.913 85.5545 cv
771.125 85.5545 771.297 85.7264 771.297 85.9386 cv
771.297 86.1505 771.125 86.3224 770.913 86.3224 cv
f
699.747 61.3712 mo
699.489 61.3712 699.28 61.1626 699.28 60.9051 cv
699.28 60.6477 699.489 60.439 699.747 60.439 cv
700.004 60.439 700.213 60.6477 700.213 60.9051 cv
700.213 61.1626 700.004 61.3712 699.747 61.3712 cv
f
688.977 75.1588 mo
688.353 75.1588 687.848 74.6538 687.848 74.0307 cv
687.848 73.4076 688.353 72.9023 688.977 72.9023 cv
689.6 72.9023 690.105 73.4076 690.105 74.0307 cv
690.105 74.6538 689.6 75.1588 688.977 75.1588 cv
f
778.722 335.51 mo
778.46 335.51 778.247 335.297 778.247 335.035 cv
778.247 334.772 778.46 334.559 778.722 334.559 cv
778.985 334.559 779.198 334.772 779.198 335.035 cv
779.198 335.297 778.985 335.51 778.722 335.51 cv
f
720.908 110.077 mo
719.875 110.077 719.037 109.24 719.037 108.207 cv
719.037 107.174 719.875 106.337 720.908 106.337 cv
721.941 106.337 722.778 107.174 722.778 108.207 cv
722.778 109.24 721.941 110.077 720.908 110.077 cv
f
778.054 369.228 mo
777.801 369.228 777.595 369.023 777.595 368.77 cv
777.595 368.517 777.801 368.312 778.054 368.312 cv
778.307 368.312 778.512 368.517 778.512 368.77 cv
778.512 369.023 778.307 369.228 778.054 369.228 cv
f
706.454 227.529 mo
705.572 227.529 704.857 226.815 704.857 225.933 cv
704.857 225.052 705.572 224.337 706.454 224.337 cv
707.336 224.337 708.051 225.052 708.051 225.933 cv
708.051 226.815 707.336 227.529 706.454 227.529 cv
f
636.225 423.535 mo
635.6 423.535 635.093 423.029 635.093 422.404 cv
635.093 421.779 635.6 421.273 636.225 421.273 cv
636.849 421.273 637.356 421.779 637.356 422.404 cv
637.356 423.029 636.849 423.535 636.225 423.535 cv
f
738.159 153.658 mo
737.613 152.903 736.998 152.147 736.315 151.395 cv
736.725 151.607 737.168 151.766 737.634 151.863 cv
742.239 152.815 li
738.159 153.658 li
734.113 149.204 mo
733.411 148.566 732.66 147.934 731.848 147.298 cv
732.683 143.262 li
733.635 147.865 li
733.734 148.339 733.896 148.789 734.113 149.204 cv
f
799.998 41.2372 mo
799.998 40.7167 li
800 40.8921 800 41.0649 799.998 41.2372 cv
.0235294 .0156863 .0784314 rgb
f
251.284 76.6522 mo
234.777 71.8693 229.864 61.5744 232.85 51.279 cv
236.932 37.209 255.773 23.139 279.956 23.139 cv
284.87 23.139 290.004 23.72 295.28 24.9999 cv
295.888 25.1473 296.493 25.2885 297.105 25.4254 cv
279.971 31.1515 272.287 42.6223 265.927 54.0924 cv
261.365 62.3184 257.484 70.545 251.284 76.6522 cv
263.052 51.2754 mo
262.549 51.2754 262.142 51.6831 262.142 52.1857 cv
262.142 52.6886 262.549 53.0961 263.052 53.0961 cv
263.555 53.0961 263.963 52.6886 263.963 52.1857 cv
263.963 51.6831 263.555 51.2754 263.052 51.2754 cv
242.172 38.8801 mo
241.989 39.7648 li
241.909 40.1514 241.607 40.4533 241.22 40.5334 cv
240.335 40.7165 li
241.22 40.8993 li
241.607 40.9792 241.909 41.2814 241.989 41.668 cv
242.172 42.5528 li
242.355 41.6678 li
242.435 41.2812 242.737 40.9792 243.124 40.8993 cv
244.009 40.7165 li
243.124 40.5334 li
242.737 40.4535 242.435 40.1516 242.355 39.765 cv
242.172 38.8801 li
272.421 27.4056 mo
271.987 29.5051 li
271.797 30.4225 271.08 31.1396 270.162 31.3293 cv
268.062 31.7639 li
270.162 32.1981 li
271.08 32.3876 271.797 33.1042 271.986 34.0216 cv
272.421 36.1217 li
272.855 34.0212 li
273.045 33.104 273.762 32.3876 274.68 32.1981 cv
276.78 31.7639 li
274.68 31.3293 li
273.762 31.1396 273.045 30.4227 272.855 29.5058 cv
272.421 27.4056 li
466.525 56.8876 mo
427.331 56.5376 409.079 33.8147 361.355 25.0505 cv
404.245 17.5659 441.137 0 441.137 0 cv
468.145 0 li
491.802 0 473.66 19.5983 466.525 56.8876 cv
456.967 44.7809 mo
456.668 46.2298 li
456.537 46.8623 456.042 47.3567 455.41 47.4876 cv
453.96 47.7875 li
455.409 48.087 li
456.042 48.2177 456.537 48.7121 456.668 49.3451 cv
456.967 50.7938 li
457.267 49.3451 li
457.398 48.7121 457.893 48.2177 458.526 48.0868 cv
459.975 47.7875 li
458.526 47.4876 li
457.893 47.3567 457.398 46.8623 457.267 46.2298 cv
456.967 44.7809 li
421.143 34.5724 mo
420.956 35.48 li
420.873 35.8762 420.564 36.186 420.167 36.2681 cv
419.259 36.456 li
420.167 36.6435 li
420.564 36.7254 420.873 37.0351 420.956 37.4316 cv
421.143 38.3389 li
421.331 37.4316 li
421.413 37.0351 421.723 36.7254 422.119 36.6435 cv
423.027 36.456 li
422.119 36.2681 li
421.723 36.1862 421.413 35.8764 421.331 35.48 cv
421.143 34.5724 li
427.619 25.9597 mo
427.39 25.9597 427.205 26.145 427.205 26.3732 cv
427.205 26.6018 427.39 26.7869 427.619 26.7869 cv
427.847 26.7869 428.033 26.6018 428.033 26.3732 cv
428.033 26.145 427.847 25.9597 427.619 25.9597 cv
402.751 21.167 mo
401.693 21.167 400.835 22.0246 400.835 23.0823 cv
400.835 24.1402 401.693 24.9977 402.751 24.9977 cv
403.81 24.9977 404.667 24.1402 404.667 23.0823 cv
404.667 22.0246 403.81 21.167 402.751 21.167 cv
445.085 21.7823 mo
444.37 21.7823 443.791 22.361 443.791 23.0751 cv
443.791 23.7891 444.37 24.3678 445.085 24.3678 cv
445.799 24.3678 446.378 23.7891 446.378 23.0751 cv
446.378 22.361 445.799 21.7823 445.085 21.7823 cv
.0941176 .137255 .282353 rgb
f
467.435 56.8916 mo
467.129 56.8916 466.828 56.8903 466.525 56.8876 cv
473.66 19.5983 491.802 0 468.145 0 cv
528.261 0 li
528.31 .202642 528.493 .353101 528.711 .353101 cv
528.928 .353101 529.111 .202642 529.16 0 cv
596.946 0 li
597.086 .132039 597.275 .212985 597.483 .212985 cv
597.69 .212985 597.879 .132039 598.019 0 cv
622.192 0 li
622.192 0 616.643 4.75704 603.361 4.75659 cv
599.419 4.75646 594.794 4.33719 589.432 3.24998 cv
588.487 3.05835 587.512 2.96655 586.502 2.96655 cv
562.487 2.96655 520.426 55.0735 471.213 56.8238 cv
469.93 56.8695 468.674 56.8916 467.435 56.8916 cv
484.315 43.687 mo
483.314 43.687 482.502 44.4982 482.502 45.4991 cv
482.502 46.5 483.314 47.3114 484.315 47.3114 cv
485.316 47.3114 486.128 46.5 486.128 45.4991 cv
486.128 44.4982 485.316 43.687 484.315 43.687 cv
512.673 19.7386 mo
511.871 19.7386 511.221 20.3885 511.221 21.1903 cv
511.221 21.9923 511.871 22.6423 512.673 22.6423 cv
513.476 22.6423 514.126 21.9923 514.126 21.1903 cv
514.126 20.3885 513.476 19.7386 512.673 19.7386 cv
558.099 9.28823 mo
557.414 9.28823 556.859 9.84308 556.859 10.5276 cv
556.859 11.2121 557.414 11.767 558.099 11.767 cv
558.784 11.767 559.339 11.2121 559.339 10.5276 cv
559.339 9.84308 558.784 9.28823 558.099 9.28823 cv
.101961 .14902 .298039 rgb
f
223.946 86.5099 mo
223.076 86.5099 222.185 86.4926 221.271 86.4575 cv
163.788 84.2481 182.39 0 126.096 0 cv
257.5 0 li
257.492 .0656409 257.489 .132313 257.489 .199937 cv
257.489 1.17353 258.278 1.96283 259.252 1.96283 cv
260.226 1.96283 261.015 1.17353 261.015 .199937 cv
261.015 .132313 261.011 .0656409 261.004 0 cv
441.137 0 li
441.137 0 404.245 17.5659 361.355 25.0505 cv
351.12 23.1709 339.528 21.9331 326.084 21.696 cv
325.295 21.682 324.517 21.6752 323.75 21.6752 cv
312.873 21.6752 304.183 23.0598 297.105 25.4254 cv
296.493 25.2885 295.888 25.1473 295.28 24.9999 cv
290.004 23.72 284.87 23.139 279.956 23.139 cv
255.773 23.139 236.932 37.209 232.85 51.279 cv
229.864 61.5744 234.777 71.8693 251.284 76.6522 cv
245.268 82.579 237.069 86.5099 223.946 86.5099 cv
220.089 65.3605 mo
219.801 65.3605 219.567 65.5942 219.567 65.8822 cv
219.567 66.1705 219.801 66.404 220.089 66.404 cv
220.377 66.404 220.611 66.1705 220.611 65.8822 cv
220.611 65.5942 220.377 65.3605 220.089 65.3605 cv
181.741 47.0898 mo
180.645 47.0898 179.757 47.9776 179.757 49.0729 cv
179.757 50.1683 180.645 51.0562 181.741 51.0562 cv
182.837 51.0562 183.725 50.1683 183.725 49.0729 cv
183.725 47.9776 182.837 47.0898 181.741 47.0898 cv
215.431 34.9207 mo
214.369 34.9207 213.507 35.7821 213.507 36.8442 cv
213.507 37.9065 214.369 38.7679 215.431 38.7679 cv
216.494 38.7679 217.355 37.9065 217.355 36.8442 cv
217.355 35.7821 216.494 34.9207 215.431 34.9207 cv
183.795 28.2521 mo
183.524 28.2521 183.303 28.4723 183.303 28.7439 cv
183.303 29.0155 183.524 29.2358 183.795 29.2358 cv
184.067 29.2358 184.287 29.0155 184.287 28.7439 cv
184.287 28.4723 184.067 28.2521 183.795 28.2521 cv
248.428 20.2241 mo
247.615 20.2241 246.956 20.8832 246.956 21.696 cv
246.956 22.5088 247.615 23.1678 248.428 23.1678 cv
249.241 23.1678 249.9 22.5088 249.9 21.696 cv
249.9 20.8832 249.241 20.2241 248.428 20.2241 cv
205.292 12.3385 mo
204.533 12.3385 203.918 12.9533 203.918 13.7117 cv
203.918 14.4701 204.533 15.085 205.292 15.085 cv
206.051 15.085 206.666 14.4701 206.666 13.7117 cv
206.666 12.9533 206.051 12.3385 205.292 12.3385 cv
293.312 8.2482 mo
293.039 8.2482 292.817 8.46982 292.817 8.74323 cv
292.817 9.01663 293.039 9.23805 293.312 9.23805 cv
293.585 9.23805 293.807 9.01663 293.807 8.74323 cv
293.807 8.46982 293.585 8.2482 293.312 8.2482 cv
167.702 7.56428 mo
167.376 7.56428 167.112 7.82825 167.112 8.15365 cv
167.112 8.47925 167.376 8.74323 167.702 8.74323 cv
168.027 8.74323 168.291 8.47925 168.291 8.15365 cv
168.291 7.82825 168.027 7.56428 167.702 7.56428 cv
389.517 5.59924 mo
389.304 5.59924 389.13 5.77228 389.13 5.98586 cv
389.13 6.19965 389.304 6.37269 389.517 6.37269 cv
389.731 6.37269 389.904 6.19965 389.904 5.98586 cv
389.904 5.77228 389.731 5.59924 389.517 5.59924 cv
339.615 3.2289 mo
338.939 3.2289 338.391 3.77672 338.391 4.45241 cv
338.391 5.1281 338.939 5.67592 339.615 5.67592 cv
340.291 5.67592 340.839 5.1281 340.839 4.45241 cv
340.839 3.77672 340.291 3.2289 339.615 3.2289 cv
234.398 1.95521 mo
234.178 1.95521 234 2.13346 234 2.35327 cv
234 2.57328 234.178 2.75154 234.398 2.75154 cv
234.618 2.75154 234.797 2.57328 234.797 2.35327 cv
234.797 2.13346 234.618 1.95521 234.398 1.95521 cv
365.71 .719251 mo
365.484 .719251 365.302 .902125 365.302 1.12776 cv
365.302 1.35339 365.484 1.53626 365.71 1.53626 cv
365.936 1.53626 366.119 1.35339 366.119 1.12776 cv
366.119 .902125 365.936 .719251 365.71 .719251 cv
f
242.172 42.5528 mo
241.989 41.668 li
241.909 41.2814 241.607 40.9792 241.22 40.8993 cv
240.335 40.7165 li
241.22 40.5334 li
241.607 40.4533 241.909 40.1514 241.989 39.7648 cv
242.172 38.8801 li
242.355 39.765 li
242.435 40.1516 242.737 40.4535 243.124 40.5334 cv
244.009 40.7165 li
243.124 40.8993 li
242.737 40.9792 242.435 41.2812 242.355 41.6678 cv
242.172 42.5528 li
.835294 .890196 1 rgb
f
421.143 38.3389 mo
420.956 37.4316 li
420.873 37.0351 420.564 36.7254 420.167 36.6435 cv
419.259 36.456 li
420.167 36.2681 li
420.564 36.186 420.873 35.8762 420.956 35.48 cv
421.143 34.5724 li
421.331 35.48 li
421.413 35.8764 421.723 36.1862 422.119 36.2681 cv
423.027 36.456 li
422.119 36.6435 li
421.723 36.7254 421.413 37.0351 421.331 37.4316 cv
421.143 38.3389 li
f
272.421 36.1217 mo
271.986 34.0216 li
271.797 33.1042 271.08 32.3876 270.162 32.1981 cv
268.062 31.7639 li
270.162 31.3293 li
271.08 31.1396 271.797 30.4225 271.987 29.5051 cv
272.421 27.4056 li
272.855 29.5058 li
273.045 30.4227 273.762 31.1396 274.68 31.3293 cv
276.78 31.7639 li
274.68 32.1981 li
273.762 32.3876 273.045 33.104 272.855 34.0212 cv
272.421 36.1217 li
f
456.967 50.7938 mo
456.668 49.3451 li
456.537 48.7121 456.042 48.2177 455.409 48.087 cv
453.96 47.7875 li
455.41 47.4876 li
456.042 47.3567 456.537 46.8623 456.668 46.2298 cv
456.967 44.7809 li
457.267 46.2298 li
457.398 46.8623 457.893 47.3567 458.526 47.4876 cv
459.975 47.7875 li
458.526 48.0868 li
457.893 48.2177 457.398 48.7121 457.267 49.3451 cv
456.967 50.7938 li
f
365.71 1.53626 mo
365.484 1.53626 365.302 1.35339 365.302 1.12776 cv
365.302 .902125 365.484 .719251 365.71 .719251 cv
365.936 .719251 366.119 .902125 366.119 1.12776 cv
366.119 1.35339 365.936 1.53626 365.71 1.53626 cv
f
263.052 53.0961 mo
262.549 53.0961 262.142 52.6886 262.142 52.1857 cv
262.142 51.6831 262.549 51.2754 263.052 51.2754 cv
263.555 51.2754 263.963 51.6831 263.963 52.1857 cv
263.963 52.6886 263.555 53.0961 263.052 53.0961 cv
f
484.315 47.3114 mo
483.314 47.3114 482.502 46.5 482.502 45.4991 cv
482.502 44.4982 483.314 43.687 484.315 43.687 cv
485.316 43.687 486.128 44.4982 486.128 45.4991 cv
486.128 46.5 485.316 47.3114 484.315 47.3114 cv
f
427.619 26.7869 mo
427.39 26.7869 427.205 26.6018 427.205 26.3732 cv
427.205 26.145 427.39 25.9597 427.619 25.9597 cv
427.847 25.9597 428.033 26.145 428.033 26.3732 cv
428.033 26.6018 427.847 26.7869 427.619 26.7869 cv
f
234.398 2.75154 mo
234.178 2.75154 234 2.57328 234 2.35327 cv
234 2.13346 234.178 1.95521 234.398 1.95521 cv
234.618 1.95521 234.797 2.13346 234.797 2.35327 cv
234.797 2.57328 234.618 2.75154 234.398 2.75154 cv
f
293.312 9.23805 mo
293.039 9.23805 292.817 9.01663 292.817 8.74323 cv
292.817 8.46982 293.039 8.2482 293.312 8.2482 cv
293.585 8.2482 293.807 8.46982 293.807 8.74323 cv
293.807 9.01663 293.585 9.23805 293.312 9.23805 cv
f
597.483 .212985 mo
597.275 .212985 597.086 .132039 596.946 0 cv
598.019 0 li
597.879 .132039 597.69 .212985 597.483 .212985 cv
f
259.252 1.96283 mo
258.278 1.96283 257.489 1.17353 257.489 .199937 cv
257.489 .132313 257.492 .0656409 257.5 0 cv
261.004 0 li
261.011 .0656409 261.015 .132313 261.015 .199937 cv
261.015 1.17353 260.226 1.96283 259.252 1.96283 cv
f
339.615 5.67592 mo
338.939 5.67592 338.391 5.1281 338.391 4.45241 cv
338.391 3.77672 338.939 3.2289 339.615 3.2289 cv
340.291 3.2289 340.839 3.77672 340.839 4.45241 cv
340.839 5.1281 340.291 5.67592 339.615 5.67592 cv
f
402.751 24.9977 mo
401.693 24.9977 400.835 24.1402 400.835 23.0823 cv
400.835 22.0246 401.693 21.167 402.751 21.167 cv
403.81 21.167 404.667 22.0246 404.667 23.0823 cv
404.667 24.1402 403.81 24.9977 402.751 24.9977 cv
f
389.517 6.37269 mo
389.304 6.37269 389.13 6.19965 389.13 5.98586 cv
389.13 5.77228 389.304 5.59924 389.517 5.59924 cv
389.731 5.59924 389.904 5.77228 389.904 5.98586 cv
389.904 6.19965 389.731 6.37269 389.517 6.37269 cv
f
215.431 38.7679 mo
214.369 38.7679 213.507 37.9065 213.507 36.8442 cv
213.507 35.7821 214.369 34.9207 215.431 34.9207 cv
216.494 34.9207 217.355 35.7821 217.355 36.8442 cv
217.355 37.9065 216.494 38.7679 215.431 38.7679 cv
f
445.085 24.3678 mo
444.37 24.3678 443.791 23.7891 443.791 23.0751 cv
443.791 22.361 444.37 21.7823 445.085 21.7823 cv
445.799 21.7823 446.378 22.361 446.378 23.0751 cv
446.378 23.7891 445.799 24.3678 445.085 24.3678 cv
f
167.702 8.74323 mo
167.376 8.74323 167.112 8.47925 167.112 8.15365 cv
167.112 7.82825 167.376 7.56428 167.702 7.56428 cv
168.027 7.56428 168.291 7.82825 168.291 8.15365 cv
168.291 8.47925 168.027 8.74323 167.702 8.74323 cv
f
183.795 29.2358 mo
183.524 29.2358 183.303 29.0155 183.303 28.7439 cv
183.303 28.4723 183.524 28.2521 183.795 28.2521 cv
184.067 28.2521 184.287 28.4723 184.287 28.7439 cv
184.287 29.0155 184.067 29.2358 183.795 29.2358 cv
f
528.711 .353101 mo
528.493 .353101 528.31 .202642 528.261 0 cv
529.16 0 li
529.111 .202642 528.928 .353101 528.711 .353101 cv
f
205.292 15.085 mo
204.533 15.085 203.918 14.4701 203.918 13.7117 cv
203.918 12.9533 204.533 12.3385 205.292 12.3385 cv
206.051 12.3385 206.666 12.9533 206.666 13.7117 cv
206.666 14.4701 206.051 15.085 205.292 15.085 cv
f
512.673 22.6423 mo
511.871 22.6423 511.221 21.9923 511.221 21.1903 cv
511.221 20.3885 511.871 19.7386 512.673 19.7386 cv
513.476 19.7386 514.126 20.3885 514.126 21.1903 cv
514.126 21.9923 513.476 22.6423 512.673 22.6423 cv
f
248.428 23.1678 mo
247.615 23.1678 246.956 22.5088 246.956 21.696 cv
246.956 20.8832 247.615 20.2241 248.428 20.2241 cv
249.241 20.2241 249.9 20.8832 249.9 21.696 cv
249.9 22.5088 249.241 23.1678 248.428 23.1678 cv
f
558.099 11.767 mo
557.414 11.767 556.859 11.2121 556.859 10.5276 cv
556.859 9.84308 557.414 9.28823 558.099 9.28823 cv
558.784 9.28823 559.339 9.84308 559.339 10.5276 cv
559.339 11.2121 558.784 11.767 558.099 11.767 cv
f
181.741 51.0562 mo
180.645 51.0562 179.757 50.1683 179.757 49.0729 cv
179.757 47.9776 180.645 47.0898 181.741 47.0898 cv
182.837 47.0898 183.725 47.9776 183.725 49.0729 cv
183.725 50.1683 182.837 51.0562 181.741 51.0562 cv
f
220.089 66.404 mo
219.801 66.404 219.567 66.1705 219.567 65.8822 cv
219.567 65.5942 219.801 65.3605 220.089 65.3605 cv
220.377 65.3605 220.611 65.5942 220.611 65.8822 cv
220.611 66.1705 220.377 66.404 220.089 66.404 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 26.2.1%%For: (Yefym Turkin) ()%%Title: (2204.m01.i006.n010.F.c07.1157104642 Outer space background. Vector illustration with copy space.eps)%%CreationDate: 10.04.2022 15:34%%Canvassize: 16383%AI9_DataStream%Gb"+`k<e0%fA@$^&"oY!_"7V-WhQF?fP?![d6KC=I<PA*HgT^Y8IqLsFuR%m/g\W-RFC>hBga-_V;GuXSYqG;4V`iO";-MG/.pn"%$S`<Olq+*aD[]<7WV>.V7k:W4?0q6iMQEbi<%.W2k_'G"-[6hgY!cDnrX3:JU&He\8Jg'8Jg?6X7;WE9Ll2r1*rUVIT(S`b'M%'.%D>p6]L-$,Idf9WO(q"Y#RrL=k2t=ZHbq2GJ[ld1<ngnk*EQg#\__o?K[IL!e]-XC!?0(YO.UlIU"\hlUcpT?O_S7K]%->F)d$HU1%OcU"U?aZ^Ae?BQHm\1X`>_n$p8c4W'romKp_Ra1TMim5<%6!tjIA]DRLr%?#b;n&TV*F.!&Au@`b((jpe/q+M,-FtcG#oG9&W70q%(M?$i'FQ#.$Nh0?@YgErilP#UV5Q?iip[*^?Ze&,jPi*ir%Af='8;1>lB4lB>"/8o,"rOR<C4HIg6Y8$X<VGp/mM%IBE+[R&7m!1%.U.u</7f'+pg"-'$L3hRJPmt<+#+kHU-C^([nFRK&a:@92fROe4&tA^@i1t3,0l8i+!Q9'"AR>g1<qQs1.``X,`uJ/8TBR"[eu*,%;,sP=ZNVBq;[0Wl<i%1CPDUZ:kFd.4_X=F%_q%n\$75='9Lh5(GU:V$N\Jh_Bk#+*J>=6lLCV!FieJ8^JSM7CY&sjR0oj[4#CJ9N%TTTsF!K!5>3KVDX;!*N[p1>KOr6[?Ik;`+*9VV8tf";CgT[>iI9%2uQ:$YR_"]SYY`Gl0@j3SO]+Xi@<:`NObQusa>#UYs-0M2%,%V3=IRPtWAMoF8JYW,*58A[A=G2N+/;ZO!F)5YhakN^KWN"n]H(d*(VilhKc?kUl'q;+^@>:!Z5S4+]dUTm$WnBJM$eT-9*=4+]a4%Tm&o6aU,X3U'\N..mstq7lBOYdVD;dTm&m`qF#N>9rLdWRsOr;$IORa&PSmKm[<W3R-Qlc\YsQU^$?teb'!&ngi_EEee.&AN(aNU%%m_B8co\7!Q_7*]r_/XqqF"/95#]<Z=7ieS54jl<&9YS^dCYE!\qAiO'VZ,OlVc6?7-CW-5&/Kp!JJ"_5GlYHr,f(d.%P9'?ZaG5%lk/A@?@'50c)/-q#kJSC+R2YF7+@pY3n=(*6m$_F:qD*#qK/=mA^NSk6.F.I9[,J48*?E!K!*q,%\(%=C)b#pf+_L,9Y2uiWq0N:%:?T4FY0JtZ\LA,S2B?uEA[\bnY*[b4l[LtX\n10\XNOl3NF"sQs69Aq>J"3R-=U/ZD-83XCu*^NgXLRSs%mE6LJ1@MV/12*Q35"F%j<Q3lF2PrH`7Jg,Y?*AKOp(bOT=S)LNBcXrn=TZYs"TI]D1Ci#1D,r'n(=9/+4'9)p8@nV8EeZ^K\:Ocpe.OX-haJ;Qc\ICp8@mK%'?TA.48,TOQd>!Lp8@m[=F[nH8$YMN\m4oDo1K%QM,4M1V0I6q52i.(ajQ4HXr#%rV<p>NpSSI7h9Xj-W3l5N+0=@"EWFD>[c951%c/<Z4DMW^k8urEui/;"!TDArc(4Xg'+n/-C`OJ/%akC^D[,/A5_S;o0dr*oR1I$]_n<[.$kf`b@HEb8Y(=rgZ6O7&uk+0qj87I3)%_YZ>ZBbP9S:FPW)`1h13DT#8ZMen8.\`VEHhp:6ob?M*\+bl<4D+q_)JoK:Kj$$^Hg#3L;W6n9(no]=h/?g_<jf^npRol*PmBpg&%)D'4c+E't!jZT\7qpUY9DquJ,k(Mc;?K0C.bqLujf/m)GLYA-EqK:]ZOu&Rq/U2ON3"G[JH$9_sh>q,W(l%-V]Rs@N_'?G6&M/oh%k^^U+n_]R1?N6&aYN['T/C\0t:<U'<^t#lopMj+!X(OoVr(tJ.T.YsHSGlubIHe3!dO).^[qm'klsL:*:DT3J,Wooh9[,<!HpeE=%Gn34YrSio&`V,1$X>%G:f(V@Ho`h:So=*t;O*@h(kNIcHdS>c>e,tK=4l0U\N*t5TkM8"@FNjhHcG#D%!nUNW$$r4fQ#K1mG"c?A%IM^=#qXB0pK!XO2IH)\=g?SQU`\"V`oCY@0LBf+a&8<'UnG.1SZuP-Ta-)4&LLHg-IEA^bJ&m$o.eIrjQX=`#5XXP_;6bc11HM]1%AdP@\LO"Xe?GXZKLW(]ppRU.DB.j`#>p:=!9iud`kQR^"dMBa_r9T=q@lAgtlslI_OeoP,@9JRiarC0Pp'.ZI6ZDS82i)@4+*1k,%C7AcZ,C8:1Q8qdi>C)IaaPMHt]n6on:$<To<9LRc+^W$$Iia+-qK-rc5Kb)6^YefHeiU)<pBS*[pWD50L%os"@[KCSQ-b'#Npa[&%I1GpDq+:LBf/n4"llO$EZ0o?Enf85;K#e,WO:Emhm*Fc6$u%\rO<K(mJ/dJg#"huT'$b=F'0G]4D><c03[LYIcm+<3NUY$H_o9+=%\,5jTdf-q2?iMjXD3L9uC!i%(:o=0()WLD;UV+KhDt.9)0J$8oH3YNF188Wt`uOrm)73$=gbH>u*uOV[DtaV!]Ye9PcF-FS7V[i3%^2_QfmPBUklaGV8C#>&0aZ`56%^+,T]n%hia$U;SgX2(4-QL3g/DY=27:Md8]17^,\TaG!F/$+6R>*)dE*C?pM>6buSuhK!H\^RJ%#!]P5hEe]5\$39Z?,j?4*bh<tdQ@6e-3dJ_4q<-51n8DMPaV/g#La#b1COA/Q?U:XH#Ln\Z%]p0Y?8@odXM[iFSCB47j\D3ksW+5%7sPMH=W7)DZZgS>M;^?Nc80jd4%ruW?/EDo+gsS%@pj1))/I\bhW!"s_k`oWhI4:K8@OY$jIt-Fh6)M&gE"`Hg,i!bp5g-.oF`di%n62c_s7h$!iGDo<^[8[Z4ZIfRi/=.erDNOl=R"d!_uqlb$1$'*E?\-dbVG0b8?X!7j;l6d$2<*;i9ZoM8ppG.Qn\^_>jm25T@gDc%&'gb,,&4/39tL5U_>]qMS"gZ`o+"5rmI1m_[TtQd2&7N'creL?)mf*t!.'FZo-LQ+HOSZ&(WK^]*>a#XM0J-7^Vi2n]YkBM0M*gX%E3.9'dHU?9%^*,*l_&QZ0qYPt[QD7tM]m2VjG?/1*SNaX!Uh^+iq;RTCWt",0r++Jgp8!GO\45-cS)QlcRD#fY5,f%]n?tZR!2$'%;Y]RjK8%!_Y0?SL[O+6dmdUk+mH\]]%YIsFd^;sDh`e`-'l!5&(@$;Ob<(YugD)f[Y6dOngXI]p#N?&*]O?W03T>l<H3[fY9oisj%]R/c^h)@f<#,D!I7IaS6FNEW`nIE:<"JVC3=ak?uL2.(p#M6-_gcGpYg\-*Y$62R.iTN'&<[J8[mAPA>4:C(WR1o<!n+R<%]u4-f%_k<?8XJE;UQ<9[Kpf515&SFV)?Mg>DVc3'X/an]?L?Z6m2T*n0"N0DnfC$s.Z,>YZ@?N`\aQGWJP7]BkfBl]ole:D'.SK<r"<Ps6%9$FWufsJ0%^cV=*M_h,Kje#:`5s4mG8aUbJH0o7<@se&rH\\;$@VFMfP+He;0!@7m"e9]DE,eF]p',6Eh`KIB9r_u]-*=WIBEZKO%%_aINI'%)CC?@g!q%_apBH&2eU`nIO3t<uQ/VGKpGcT%9>Zprn]n7sjhRO&1(Y5fs<gUG'U31iqiGY\%_Uihcj;eG.(aAEW-!bRM%::`Sp?uX'bleit&fsgS@J@pZZh^\SBmkB%Bid)'r6j)K$K-%n7)DU]b:_o%S]?>MGj]P)2g,h9@Tuk!cTR;L7%fFZgj?=0RT.W+5%`nL>2\Xr(,Z%KeZJ+&b[9t/SDHsTRni>8(EnFI.MjnnT#@D$5nlS`[/pT;9'flPJOGX&n-lPqf@kT.<57fHJ9LQO)C=NVREqR:=b%M&75Mp$.4h*U&'[:5^r9"4r$5S`Z$B=k^,MBY[R">f0^@BA]6YSP:FJkI(9Qh&5lI1(0!6_e$&h;f`p8Z@h#MjM!Qr)"\:hSPBq-%I%Knc!+mF&hDI&C//K2m*@C>):>CTJB_'/&)c,ZBNJ!hGO]g?8U9CtL49J7JH-5j%hOJ,H8"RZ.Yh#_Ec+e7pL8h#hNa+s.,J8XV%L2_GG*@o`J#C#Om)V9)tkK4=Ed#m0.iVjfP]/Hp\(hh[Y)gX:h=-)>'*F,5n5/buMr3gSMT,thFWP`&f/9B>=\%e8KE6b`2/E&eM%62+_"nU?YR_5Dr*2s1UXG=RZ82/Xo6$M"3g\'6usSIa$enMT;&Bj7POJTuL8_7E-+,aPUd]se*dRX5m*;o2^^5CRe!k$6cbF,Sp^%mk?9oos7JmPn)N\O6pH$a*@]E$X1e1Lsq.sH,Rn-e!^O(I<b3rB20AY(@&,<elqg<)!jm"]E@Iu_s#r*iU+Z*YDKX*p)=J\nufb$%[5E#da)Hq^bimpM"^JK"gcLnd#rlZ:(-B&(QJX/?]T/BPhKR:q4%CTeS@#r"]8q+&U@p_>qfJo5i]ZiRVdh88@*.!r(;Ea7HN=dM%^V._<5V1iTWb]#EkoD,?$3OIa0ZP6beRo;&&FO]N\@`t>]YiH/KB6V0R+:`^gj:iVGOT@RDRhBFqt:#bm*)4V@k;Z1L&+>VaS<<j%N</M+=2II[/\2r@3"q/03t6:JU&HXE[*d9a4nCqVZDu!gPQ&f&Nh99=Xl%ZiB>iC47g_LS*HYWIbRo;eGUUa`GdOM$rGJmh<+_lh%L/J[Pk@.^q<9^=5#T_NgiF45M]qm.BQKF!-RXl8Fl7\IMn$*kfLZ^4BSqlqC$u\6Nm=GbXB&PqS_pCNqD7(/rV!cZ%e-`LSMBVpA%Pf/pNkP3IcZ)O[=]D*sH:c^37-_@R4@S&rj@h8X4*"Cfa`A8[NY'fE%-nATQ\mFe!jsr[M2+<gWD;6s^1l$?jn.rLMfIZ#1KAV?9%Q<k;R`S:n_=A.r3i\E'25_a)(iE@ZN!n"h$pK.KY.1<.&eRc#VUSis4&5l"gEN5^kg@)F9<CN$mM@>%t.Dj]L:(:!gN&;2U9KEU-%)f!<\85hR[:qP+#D@nc$O!%TF"Zj[EpsS`-qL7Or"`pMW$cK'a)ldGI'[<+(&iMOjAenQFX.#'q=!Y^6o;P->L*,J*_mh-9:L)kC%#[\d]Jh0PjWmGTSp!9JPclCV]L-$p>dCV+;$,#*pp7^NSc&(mn/4WZd?0D<cDe@$*_D$d]irC'[-8s7J^*,dd4/B!@0U;Y@XkkO!%[GF<RJbI2pVpYAEM4'MLN).n5A&ajcI(c?_d#s*CTNW%X&2/Xb3t,b7@VH.d44K4.#"T#6KSZR4NkuX<YUO]5d"td!Os]I&R+]`J%[L6Uo]C41[I`A)3L1^%aePFj5=%753VtDpP;CJ1),2ma"3WriRN%?Z`J?G[<F]GH$e@e2R<6_%-<@1[F"\B2X^54<QB1!4cKe>X"%d`$$V6Qqs'LW!m,O+CkPfdmDj4IZl_8VZGQ@LRABcUB"T.c!]iBINmTMM;01\S.Lj9c:JNV:1nJ%qh$N7HR-?3g4$(@6_6s?*PUm%^KrT;&rmTsN/A_chg\=YL(=0m-koXS/P_1S%fEjCjM,nMV=t1.fEFGV&P1K!':XaXrOF=eqjPsb-:Pb$raZ]g'b\E@;:)"$(PRgB%U+UCO'Fa3O7=i`IA:M[H=$.WIF:RtPSK8hlYR7RfZ:[Xb&0dCBU^@e0UFnCqU*"-`W^(+lY/^-t\'^_ol"db$+65^\<%$6h%hDLa%&%-j0HkT<5eMo#b/3"@_Os#79#H4fkO'lu+#mfmgIftD;[IXpg;#O0fhe*>,jN!LhY)3mJEGcdb,sTn&>-5Q?ALR:MIeP2WOM(MZ%BclAZ].8f;b57X28>pV9MW;M>"%gEr(3:nR-dH3!?pC7%N5AsFMtmJiL1E"`cksu94opXO=j..6L1E$2JBU7o1BIr&(@qjW&'89M%+Q8s3Hj2'Q=j/9N#-sUl5[c@))1fUh(@qh<ph)<+ORUM(4p-q`/7oS3"'NhqT\u$QN'Lf*Mtmbq#.'[o-k'W@T7DMh(,H#G_(=^^%:`,M;N54ItAhfLDnOp0T8K7]K=j5qhp]XgEUlGE./EVpor.6K^N>VSN/7r@6qup6I`&d\X=j3ZnIsr1)#(HT0/7r@WIsr0NL7GYr%dMDSpGNUEhD-2Y:7iLo.,(9uH6N3%Qk"Ri5RPSINO0iEY&q1;RX,-EDeIT*0-u+>tYs,NL.rY;U4.bNOY9A*JntF(ioY\-]/)U+m%,Be[tf7oPfI&%'m$K9Tq.qeWR;g+>^gQ%O6I&%?E)W95'*VY&^&NeA6D8_=u5LP?4PkSt3NnlqJ#bAjK5-,@[(>eK\JCeHT-sE7k%"31'l"nejn?^pE(W4ER+V'S%TV+9D`\Hq0+ie,M>];+XQl8P;&GHkSc7TEA!;,705[*s5c*:j0d+'J&J?Vn_JY,CX-]-B`rMaF?!%7;VM8F+OWAjXbl4.R,t:F,c8cY`h0hM71j3$_#_!QNt,/*fOITE`(E>Zs6-2Yb?q$[(GIcB134*ORG#rMl1'idAs9=6@Vrph^qC)%-E8k;f%3`5B'o/nFJL`]p_n#/RnKH_MPd+M./LV/GMlU4]lftU=UM:Vpcn^(aF3uR%':7+RerfPUPkbHV,^OjiGDPqp=3>R(-?[/%2`/3c5HhOA\Y4m$r&c@c3(d#\pusYp`%.jIUVOa/qD9045_927ej,4@#RhbV2*0qt`Elp&-D;\%1mn'LWMg+dZ(QuXI:2c0EPrE.%Jdho=*jj`[oe]7@[ik]9i1had-l!.1%'!Qg]4pR&gW+G2pbn]h.N#NP&RHI]\a&]k=f'r.TN;Mso2<.JM,D:goI/FA&d0Z9pq#-@%'L.M-MUGSlii^#L3>f\*SO##cBmTh#0Lg5E.D/e,s$IsS3$+.a&IAXP%!:<'Cl-S=CMZcb*$S((h,JbDgNs,-rU4(:a7oH3_0hoR%QQ"m\:DY*j.=s6Tp?O6l)<-2U#"=>u<M,f?X<VFhH[5kah97;G:'6#%atO;&bqusZ)!UM?Eagi350]]`4b%4H!lSF9OWsIq)-!gq%W.6k!B`^/V,UOA89G=?I87@rP"ipX<'<#UH'a40,#o"X]!U1o.#uogq.%qlnKj[@l9t\#bZr3i3>PT%rX@^IaXkstLZ)UNQaE<@G%OY"-Y+aC-,GPGEu#GGN:B+j2NYL+F2)j8,nnp`G!(frZmF[</P_Y8%,oX_?X$&Fo#34il:)@["D4>Pc&]!;m3WEL6T%l#Eh&Oq,k%p^-Y`VaJ_qGLPWmh*Y;XhJ`/MnK&Keoq5ug'Bap$+\beR`j13oTC='Jd]lXBN!kJ<j-.ESGVTA(Y:R8ZT]O0TA@-'H.<U@U3W+&W%=GX_+jCD?UpNi"LaiIt+rZgCFph7?!*:lB9QqoWq)]T4_LO1BhpdrZbQ4OHk"tdHb20.\8ak1)WRN+L.7(?+nG6UG_Z\l=c_Jt&B%C`oh>lO<4da%sBa<&]o6e)Q4-s(T@\aOK.g/6bpsXjn2pTP2mQ/Ne8ApB-^&W,RF\P4:;D1tbWgJq6!Me:[TOWsp'6j8eK;fTEUm%TM?#j5$%''K)/^KZpR]=qAoO&:TN\7Lct"W>]i:709+:U52+"<B"KF]n$<MII_]UV;u""68jAOWT+"K\pD@YVP4I5PjI$8n,]<A_%[7)!,K\1hI5Rs<^Z^RNM+2?+&-<=_8Y=T>l!E/8;4d1`b0nk,dKhQ,7]bF1R14M#Ee!\GE9]iOCaE/d#:Wm-,P8U$e6SB$YCF1hb%24OQ9=@13/JW+:MA?k:?Ud..4=]YN+Io8_?ZOSTW>_bL9H;`>/8W#'6l`/T>=&bkLF:duGac4r'6kn,*kTA'/AAaDHlA@]G@WRt\%9bX=:K(RA883$u%g!ND*Cn1AI!KHSICA0+.R$\0#&?(;dS'dr=LeJGNErhuPJad=@1``4[2Y?K&(n>hhg)DFahOF<F-[5;VH2D=i%!jN(8FCX?]J/m2(7bLS<-DDh0;p?qR4aE$ir)okK]9g9cTE2.M6qn@CHP4h9&E^t09d)j"/(Pk_<MuTD?[&lr(gGBX>E#6l4QnO@%D4-Em9Li<aUFhk?l"J8DMR01T/^r+5h[n.n:X.u5W;lD+HobC%cOCXa2V-;4;O"u`;#9J;/`^7mi:=<u*\s6nO>N?J]7a]s_SdZP%!HB98Gl,sTs5&GPErrq)U4<>jJ$ki\Iu/+C3]m$;-]igm47CcVDHYE1Ji(sts&GB`n*J[;jIm@XYjjtQTmjE:q>m"JHd?m6TQ'iM%g\$2NqA8SC!i#J=c7Fbp`k2)P!(PaNX"OhflI2M@reA.'HM#ECNh-PZn+gOTSI*B`geNp$nL#nRVfVdda3IAfErT<YrE<F9"$SR8%QHe1cq>HutD!!p!2LFFj\f=0WL&54de2e&[Xf>hT5SGXIiYm]ofUk\BLcm[$INkmKp35bQK)54#3hV)+.,ujAT`-<(CP^m6IKDoh%^W5SQ5K5@$C*F\HQfOrWZ;?$R&*^QfY#(Il+"8BT&G%Tsq0,=&a'2-=,rCkdZGBDFYL-@"SL$,onmV!UTEqQ(]mWW"T04(WT3:+p%fMTUZQh]#1=oUKfi]fR:,(N)ZMn/NQ4GZ6Neats0J"$@P"_RYkhg?E^58.K06PZI1eea.Hri(l<di]r%6-;FA"b(,$AMAr:oM(PN%EK/FAP^eO.r]2:<JJ6+H'BNS:gqh_'0\ps4[#KU>'Us!7r-c(N2c9Pde>JcaVg[7*0DejY(+cFYpJCj'go#KIs-Bf=.&]r9;#Z24%PegX[ocEAt]lFBfGPUbHTf:&rg/i'<=mQP[Gl*O/:p4<OH>HT[CP$r083ogqXW$(:;id25+JS.ick?eept>s@a6mu)'*4NVnmLjQ%0@;&IhPs3=pjKjsV1O8N6'Vgt2bfilq\UmEgN\m51Ag+MpjId>Ire\KG:adA!&STn<FC5pHPH1'N>LFT%!j.qm/u=#a'1sY3g7Cr%!0"^<mh?t)It$:V42E&f,jA$h+7oXG-8V.LAM_eBJ]HgSAio!:G]:H/VK!U&FT9#Y&j/eCZN39+ONccK47H_\1$U]9_>aaP^(:Ul%!`4C^$n6Ss2-L$=f\\RR(">G,m0g?$NH!H_jT4$[qqga%GRj%L!A,0"8C.6cO;@SCBSge1'fs%j+#ml9d-oI[K4pm@N&568/L]K4%DkIE3G<XFD"r.Kdkc5*S[iMLPR^>0,Ud(tQEBZdD!^b"aF=B#rV*D+UjPT0eIUOXL$!hX=;?J-!pI9ac9U*9Jk^bq5*-??"3o^I]%1[koknd=#=QK`_4hlr+mLed'<<jTKq`F<8QAN:TTYat+Co&;m50u;fh/.i0m)[piEk2$^u385`E7%!b\W>Ij(6O&6pmp=eic]SG9%pOR%a8Uk9)d=4dms3M+2IS8dgAi\lbh*\rf_Wp%3J?1!k!l)#r!]6Q79QI)1h3K68:ZIDrO$j;<L?kQp4O!V:,5+9V\m@-kTcs*L%>3iCe9trb`0p)A#0P+-0c0Gk-UZ%CmIf.?5dJQ?sR&%@UWTT^rY,UTQM/pEt5M2PX+AA5MY!;0])NlWSjZpJXl^A#`L?kQ>,817t%`Y3Y&ChCf<i+qVpVCjF8/hA,r`S]Xk!lD%ReV3u#`rp&VgC<uXmAX8s<q1XUnGpN"I"5QreYeoJO9c%Bmc+?IPuU1YB9c21*7re&%6MVG".Nj<u-iB*,"b@iVSZ<*LK)XNV'EeU2pT>p;N8\*5BTW(7QF;teNl%D&a1ums^ZLqlNMB2!(/-Nc:X--CV1[EP'<6FPNYRYn%!i@Et:m(l(TkTB!"=[#CXD*P,SEsdT@f:TEV^^2M.98\<PG]j1!)otKj'8&2r9!89GXY;$5Rn%q_T+/2p"'oW`Lf"/J#m*E;VCf7%WYcH"hg26\FO0S@p.P_ACOEPI?jZ1_]T6_(T0$pEH00dd,*XB>7PrrJ3mEJX),[U?^4.[Y$HQ]2BgrfHf]Hs]6igFTq4<Nn.&]ot%U1m(Rc%lEQJj5>/9fA3X"D'4P,;Z<@:l'Aj&Qij7#^FZ-=@'e%"1+uP0nFjK=\Qj=VIK\V0nHM_-4l9<Q0F[O?Z-dt1%"5lk[-%[%;!El1^+?3/'Y"5<^V*8l.oJkf9b?Ie&aqG<FCtn(+?p)#Y2a:"KDg>Fr>^_Y'ccRiIa/57gH2PZf^Eg0(tc4IqKO"3=.;N^XGlp_%&;uR!/?j8lljZU;N2K$$3eLO?OVKbH?YfGnQ/<XWrpZW'kej\uVl'iln`*%=Tk+4@J$SY&ocM'j^S)cPFP1p=41h?g)5mCT[XA<O%(ggq=f0<otZD<`hBrE!MX/oK$-*>]5[@ka:rSqN+:13)_o2:g>KU6*L*;68@@,R%Voq4K"h?t=gj8eJ_:.5Im/;k)4TKZE<K7`sl%8(`:VnsNlVrMqN>$!-[R>qtr+=3Lf%M"e'>Tn5VH4%A$.KDR$uR(9'@"[hL/%C#Voj+=\Hk3lMg''s]0a6Q;n7OeUC;,*AC#6b!d%AblASY7^tQoP6^i-MgF<1*2ORKbOG8_8#)nJo^M83uq3ad%<@p_"8(CdgZJ)U#?,,-r;Yg4+'jin:10fP@1'`Ss>GCTWBgEnO@j7%p<h+ufPEgCje0kI[:?+e,)K)UF?1PO9Fm[(qH?)WU!mrHmfLpE^Nlt.-hY'V:`%kq7lqErIqd4`D!q"XpDakCgOS5^mV"7MgAf1S%+@58YHrbjk-<UWq&DcUH/V3nmD$cbn-s&f>XA:NbE>f6h#1<.g42$cXF>1cS7/MrO$Y;ai'EDh%S7,7+M1B,[mn5@gUH&;JU_Wun%_7R=jJ@O@MXpu[12V'3Ak.f9Y=46b!(j)3G]ua4Ok-G/[N=-c+4ac2dO#k@Z,g54<0gtPE5fPI!Hp,Ak@g*c^LY9K3*l%"O`!m8%%eIRqMle8)=e.ICbXPU:'G1.Wl)NlFq)bZ)=iqtPK`7RV-LbSpk0\U$fO,lMCicgUJ7c-R;^#!]%8'D/uL6akdOcon1JLEl!eFAGh%jSslT!HA5Xb+<$8nS*B\5m2iF"'JDiX"*MOAEC@^W[I"2rfVh(K]m&eH(Q3`$4-=n*`NLQrpS,h!g5!\m(B0Ff`+0]hU6WfXp9XY%n$V,Ii;XOY5m6;jjfc*$U)oQpLbHLO+t/WLP[tCo5f05Z3f)b";F&6,5I(hE-p@:U>R41;b3[&nj1U!$s5%uR=PEepKb-Q7mbYPe%+s6pPF<SSE+[j\hM4b8/IGokk6'9!q]=NN7eXs8]Jt+HH#bn@,8D<q.Lc-CN^Y?s7ihjHd/B%0+XEU2Q'GTU)C+!BmAa8rhnNB_'%jZgIciH&'_9QoJ6)3b5u^@[Ot62@(`GFUW.(uE%)`%gtOAiY+`qBodC5/n6)+s5_IGtW43IY6U361"4kquV,Ig2EO=s+_BKX(#9N%]!-Ll#ldW"8#D466iZ3kr(0pR9NU2&OJ"82$6Lfd'XZY?O!\uf@T2Opk3&-PLjK2q$!-.$nUP06mou,S_ugWqrgB&IJXNI/Xq2"t%,X,dn?pIu6FFi@lJRC/9.D;cG!rTZ6?fsB1K&UgccHj]4Jd;Pk1t(Sh%+$,,:o9VX@u.r?6O`euQFEq^#`,(eBbeLg14Fs5I`@%!%I`_f<1n]3^K/'ugDXb_/kVEYfV8$^C+Wu11>CZ,&?S\U2N!'"N-5@(U:23[hFHIginstMH>3H`[mQ;I<SMCb.IoJS.hp.nD/"@,^%Nk4FG6@Vn!qs]&nHZ7nS6`Gp9N8!a.6AIltGQPK?<Z>GFUS!84LKQp/V'l43;@U^IU<%->hQOD9*j=OS9;1!3F@>@tMB\02osn1'%]ND28/p<Zol+[LX0(@pRD9UDU3Zuu_;tPH"AH%%B?6)oHSlo8)`HBH+.p[PuAH!&^'_jYH:[eXlbGCR;8J(ZNr_`MQh,.k#$]A4!%prroUH/L=d%,uiq4KoE)""SZ8D]Ulo07_[N$bc_X0d+%<r5SIb^G.RZK'ImD4O:[0W&MmDWBWtT>"/<3MnPOdK9#M0#@AT$F*#Ne%4JEJXj:EVr:,8Q$isdJ@*IjZm"+Pm!3KSAbUiofTc&.>(nI/hXSjr`4"h8P56c>06aceu-S54)1%Z$'bA<Ne:QR'm2$/R(RR@_gX%@,m.eE3Tp\T&J7M^nT1akiRm22;n2ikmVI&0scUaE=k<c_a>[]Mem^[19E+KU8Ebaqf;'5p`eQ<D)'\_+eeK;m6NCo#F6O5/q;/?%$9qIlc]g4$i[0+m&T^P/BlB@*!;CFin'O2cdeH]$8%YY>W1*a-3,eQ9+dEu\jck'5mENi]RP5D#=>R-Hjj9:!LOj6QpP_4&k8FQk%Qu4bO0W#MB4=!F=K@$^Q&UH0FMjhum`'99tW/tct!oF,\&o(gNin.6([ik4]EVQ)0(_RSnWpS0K#<c62Ua=P)OR#=^nXB\D0hH8A%;41bUgK6k=$_?,VLoRpJ/hW,GN/C;YJJ`2A"pKT#9h&C$hp[g5:s!ca%9LSoC&nSUe9-@C*WTE.n:96F8V>pH-moa^WZWhb(NE^:%#&od-pA"TnRFqO3/U2oQ"PFG^a<W_3^#jfoX9\+6;Z36Or\,MlN!^VM%jXkePUG.:&:$eX<1G'Z0!odO$?BP(h:e"LV.u`1$'>II%V;htMd/bK8hP2d_TuN60UBi&=dM*QQR_JZ]1N!L)OMe;aj$GpJ0QMX;O],18LnI@L;`e$VnOMhQj3B&FE2X[#+<]JloM0m]Du4fc%c6je((kP"s#h-REZ7%V+OTRYR3QmjeG@dTtaJWLV0DCEn"`N(odWLdr5=;I4Gj**`4I6@,Ib3(u6`arFWbjG?n<PoSeSr9Mj_7u7%HXV+7SgSjpO6_(5l+*jPc*Cs=`!Y*1l=/:A1lI*\MS>>)g!0C2^XUH9]@me1G._o&rU6ZPp>,JH>d6jCGXP;P1mUY]PXf5/6r/(b%Q:FWAGm'\`e+`KYj]iGu1\r8`NDgg,"a?C\)ar.U<DZ$IRGk^\fN1.@^n3M-&PnLY"oQ&cc9G8+*rQrTkbma/K/!8rD'+Z.#<j]e%+']bn:,!"G=^>aNPn($oXG+BLIf*^.A(7?8.W.?j=rqn\UFIquCk]YcAouB'8X@VL@/-Fu6cRSs[k%Kg0GQTC=kkm+k<r%+A.r@T%D29LXd:\(?,nWD^;X&]d$'"O_FH?;;g4OUCq,<apl7W=7mKg,&^8&M`j;pEqQ7e>2W2tk>;>hhrW_c26hiK[g-HVEbI2pGYXMOCJ%0c:U'XelA=,?./<^4jYTP:E$[hcSO"*R7LjPo(!'3NFH]_R]OroNY=K:9Q1HBUq98+Z2SLl0"jZWoidl@<3h7l3^foKkg+[0.Z$%%>?T2gJ3*IB#/-^sN`(@(qAQ$+oXbcWcjrQXV,C)THdeX1&W[P$8%CHbg/+Op`B@DPlRH6.C(%]k_qA/p0O:C277E:i5A=(-BWIFK%VMh-i?W0:h6;J7p9.V>Y-YSEMEsa]RFM8'pM?QFN&1$pF!>P2/#;*P08G$/t<^i8I":aXN3^gBClf"aj=d]Fr;S`1(O_cDH';15[%b\X>#$A8dE5mj(5!Q>X3RM5hK#X&R@OcEsk^?a'FXD/#222Z;H+UtMPLQ#,9S;KBU!FF3n6=6$Q(7pF6b)kQGA6&@\<I#0>&k#o*%cp:MJ-[c$kL/:J>-5nlVS$5F56]56TN]+32K'b^/J!U,;=ZP=E=QDf>TM@/ZLFW7?(E?F.FO?7:]oTpbC)>-NH\2W@%G!@\7F_0>%'7HMfq`6<>cVIZq+>OJH?HZ5AD!I]m&aZL#%Ha&a*dhrDb]e.812/9,!+mONo@+SJ`)'V$RP'+1,,MI,V\PEhhLK/siDkh;ll/.4%1B]/5JBo2PV$M3Hl@Pp"e#2*>dl[XC4b)c!40[9W^lu2(pTC6*a<8noi,J-MZj[-U<`de*fGL\<[!&6YY/dC]-irmQ_tOme"qDNm%/=*GLMo>ggK;&g^ga3XDL\(ITGsCm3^=q;8F)/gCan:5s;)^:rk2BR%?9\dPeI*S6_!IW[UlKZ+Uf9=drL#XZlF.*.];=rAT0L6P%V8lh#]Y$3C%S-8+B-IYjPX#.]s$8/DC.CE9P43$h7@2O]J+k5+QcKKGbpITi45qm4B;($NZTI>oY=n@rE=lR?+7$moFLdDb1N[)S%)dONN^t%as$=26QANFftGMu2:(=g*\:6_B?n82kQ>ukS^]8Q4O.XYSm5dRB#Od@:2^9&HMdeTuoX0/-hN$t0RT>l3H,t?mlKrh5e%U<>?7)9Y6^]ggBc!T&uUL2,7<I#2Q/!bNG,[\"AAc+D5mgbm]#j_Ik*[]kn[VrMl5H^W0\`QIH1CG/T,B9k")Fn@:nRnql$RYuNT%gd.RHa"5-PUh:m=q((^?E/VjRksHpZJ!2&tccOY.58Up&l41l%92AeMG'-O@_m.EhX1boMb$ucMhQ_m!nBRJWn<RFaop^u>o.$tV%DAMbfjT47ldVsOTaBUj;LYFJF#s4VCdQ)c,-cK"'>97QQk+o;RTPonNjDO,FqD<WSfNuY[fB*p':Gi(CHG>WtHJ-Lq.$r,hR9T)6%o9*jim^ujt)2B]p[2sslTm@a?2\o_+dr"3G?e?b@O#cX$I\)f_pJNO;_\0NO\m=K#ntj288'gqq5C]iLllUm^[PX7.37QVWV(8T.%SZMJ5ct4JLqfXK]'78J]rjl7Rm%fZ5?e,^U.h(=L+jW:'*3L*)HcPq#Z._tq>g5,lP0YYH=RtN"=)8QeB-J4=8#A't)l`B*>-CMq%eU!?_GtHj9o9_\oLR(S*]$_+u<\es#\XOqrfZHs4Z'J/'ij61-m$>q.%M-%],1U9#'C5/6nD"Wo$dYs*gYpi*hK(ZH]3mm:eSI4X%]rrSAB+7uq/`4g-Q]<\*_oo%?1=gFr=+DtU2L:.]jpFs362]dr@e.Z:Ds8^%*lX4YLDRh6$[8T>ghQ7*4AW*/_@[h_G@C*1"l3NZ%&\I#c[X8`pb#ahso"fW7]Q,cs$*TrXT8-pcq<)_0(0_-L4\;,OU0TqhP<E4\drX5jR-pSd@<Q'h5Kp7Th1p:H5n,2b%d@r<_!HbR%BAraWH6'+m$u[b'nDULOrT!D@q;tV#VaIV?1TBJ@3.!IU&C)r-oAN%3FXOg<l/%/Qa5+;q6*-[gQ\<FIph5"c.9p3;MW'b&=pe>g%LJ7K%\3(.kpRc*9Qca&,I/U;&JlZbBchR#.M0p7kXKnncgA,G/gpl^rLRX:*;RiP/>52Z[fF,/e=0H&o35->\X^A_q[8gs[2I$sm%ZZFsHiTrmCDIGHW\icHfa_hcuZ!QL2Q8fT0B5-q@4VO5pT2YWnM5/&Rm!>[Q41hmKCs;=G=0Js`enJ^(E.>[I(@R.OD!?-3GkSXe%aNU6u-_8pHmCYK,76j#FBmFmqTb;gAXgOkak'E/YQ-Q%Sp0@?0[TcK@TbVG7N16<=W:P'<b][c>8ZH(?`@B["*(aK`k1Bi`AM+!\%leKM?H?3ueo_EecGI2i^[oX^[F/=e]c+3E4#r>Y2hMf]bbq1Nmh'K\>F$a#+kJX8jHg[:_Gb0c9F\]9F\_][LBn#c#]/dX9RXLW3%\_h8K'C,nLo5+3'4eKB8Gb*_Qk_A9,3HB+gO&!aX%p(C9q:!mNk57Y1[6&lMG$^aV;KFegc,51br6&TR5Mt"7j,rhWIrcqL=h$RD%7998C[h81%kX7B^]b9!X>1e^CLh7s=gH'%;%M(Ia+r*;U'=jR^/gL,]bA3pD/9-g8LW=G2gT7k#_@;'!=F=hQ/Ar@Yh$&P*?!g-f%ad[u).34t9/F7E?#7H<R0:dg^_Wp:#ouV)g5p.FbiCRQu(-9!apd.3RFKr@&]8/&Y`3mcWk56jG\:1`4]9kTTR)S')V6O.:h:c2J%OJ:RMqgRjMZ,p:R/@J3jLILTAB,gd+imq^$)K-rUUKisT75phP=u9Sg^Pj4c=,^0AQ%eGhX\b':p:I0"S0>D@Q8t=<>0MfqV7#Y^%H&42>[[+AjHh!rgf3E6n*.MZR?1)>YQ6)=\_320*KiXLGjTN18ah=i.`trXUQFXW_lgj`jo<Q#!c\oso$];09V24lh2-IFpIZa&9%Q8Rd_An>]@l#)2I-k@ioHaC,Fg`t3O3Ej\L.i3u-lA@:MMl]#_-K6Q0lmY.4=cGVhAQGcsnS!%iVVJ98HNe-V\DE]Z]t,`CX7\tD%^Y5j(>f:59eX'AhZF(>*;mCEqIIqgt4-5q(m$tbc@un)8LU!3@Be.ba\gHDeR@D)R[nr:K40:-B&jJ@:?Gt/_)tS(.i+t&!ms!j#%fmS0V/TuGD>>$g8fX5OFmsaX`V9s)1BD_F=TSVsgC\b\67&/uUJj,ZN+gtOI5jW:J3TBrcG<s_RBU7jI]4@]S/^6[Snn;`sgoN'7%aJ(p>P%P+tOYnnpOIa)U3>Hh)dM0+"\3b$]H'p_7hHs-HbOJl<+]`jQ[5>?`0BFZ(RU_X)kq)^V7[Nqp5(/cfhk?Z8:C1Y,ig?*i%0Paj8L"Y8>(RY0%Q!*6iH!Y"!X8*gcUZ[!jb0.*1-85-sFuPnMY\.al95Hcb7'Nkqb<38HSD!$;jPq:_aK/COl=o@2X3"5,HVIfu%nB89La![2l"mF9Umgh&Ho.B6]DlCf6heSn!jm`$hZ*Cdi9cR\"9]CA6r?rg0loZZYNd%EI,p&;7R>(6Mng*,H83Vq&@./r3e^UmH%Fco?3B#EQ5[WbYO@]Pu]WggPeaSPgcXK452h84Ij\(Fogk3bk-NJmbSF\Nu22MgQ:]<RQJQ8ZmfH>u;Cgb*HV2Qn2]A(t)<c)p*I%dcQ\=Wc((kcQ?tHpK;fXFn\/Wg<A+8[Z1i`Md$_DLEQPtY1-b0NlA:WgKR25h=bit<8JAtX1<)T.jT>iNd')udQG4Q;i*u\4,rr,%2]]WIHV)]'NKh^IY+F&X:D_:Jo:jUS/8i*_B9FY@G35GjW1!P,mTcWielQH-g%`rMSP<%ZX_^GTp9W#tmWi^LZJWana%*hurc(&l%]=VaQF5=mS8q(Vc9?Ll[b=hZ;gMf2,/[qnjM\j^Q_YRFd=Z@%$c3gshXg]6E/T'p]Z,HTYETma4ftE<n%sMA^QIJ&AH'$k*Q.;57%b>s(-YIuJO'j%F@>K-6_dW=sFVOfA'-[4,>V*9%/^Eq1-lrU3h]D^<k\9/?G^?HYS?Jh@s5c0eLIjo*.BL9B^D*CdaR7O<_QsMDQ%c>T9bQcS[liKf_M*`gT4lL6g?*^3cdT3=a!/q7qa_9O&A[5VuEa77'aqJkqpTT3r&ql@c@q3T&UeIq#e`U2E/q*DXE:;V5"r^iiW%baoe%UQLtc8TTSi3fU;-M:6><R6Ni1XDOT<O3[GLCZ<36AU!OK<k1G$l;kg/[k#usFaKle:.:5E:Kk)J[Tl%h43QD!Us?+n4""ZU%FoCEl^#(*]%pN7nkKS_Yo>OV)_TYD#dSJ,oMsEcAp-NV6jY+0X]B@AtQ0A)+e&u1uC?9H,^WPB'eZS=XW5Ng\OIFe#<b_HB\scO"%g\I\o%GC)"h]1!=pG\*/g=GZ>Aj(O2NC_[1\$bYT?2-%d0GD!$5>'Joc;#jc4/FFupPco4h&hEUS+dQ1I.e+943Ki&UEok9^ML#7%/ht?EA%"b=4Pnt/F^`!d]+qbuc7ak:ST70_(X"26p![rlG2>23f@8p9Bg$I3S^0^hPob3L<t:*SK3NbMDOf2_[F%1Q=V@-NJecIu%f,7H2Y+IW:^"7T%pu8U:Hti#q:GbKVT8kE0%o4iA-/>4j3pWp=>5PrY^Sn0Ngb,^%-YKCtWH2$jkjt2mf8It?gQhJRpSk[uP$F(f%0B]l&s3c8^$M$[c,U$Of8[1F*g"pK4CfK-UH`F=-=c=[D48D>9[SpNX2O.9+Xss6poS(_nD/FADicqV1XungiQ'Lk<9]S)$\Ac0g%'ST[I9ZKSE-[p9B4tQ<;]qn7Uq7eM&3/aU!KYFN;9h?*f3P;(,kHZAN3!QJh61)Lj0j1cLiNLpukR\ZQbn0tFCRML3jClV\qo=VA%bgZ_CFYqJa<JgEEG;Gq%50K'[Nf1HgRKcs21l]GJD%5(l=/.\'?<gh>4;LWSF;0(p80=$5!&@&&HCg7^6,7rI4pFFAT[=3Y`%u^L%D`u"MaB8=1:qYo6\[)hg:j@m9NAcugHdb=46[]I`Kca\fHfs)<&;G]'`pHnb5>_JIcPSD6%h4mTh;RDqXO:tX`rPbM0`Z?-,QJ_e%`M9*WTX:>W!$E25)@`?]^58keO&h9Wdt"f\9M'C5jHJjH[^/KF4clZ[P%X^o>pF7$3ni+AFL6Ju:f#TrE#:UmqKa`e+faPcqIC4u%nHmo?+Q/fFQXPr.Bk%m!%ZgJ&Fi5ZD4P\:jX8l5;UO2EsFt_kKTX.uuc&N!3?gE[o%"U7rY1cjViDVs_F>2HVEPCdgC;7^AJdVHW%ZPcj3l1,.R2:EZqJ<e*NG9225\;',Y4D7CgXZ?<r3*6t8K@3&iG`o'RW2%iQ_4dQ60OI*bXZ-Tn.m-+Qe/[FOoTn$)*mQ*CE#Ns$%Xs#^NCkuS0YJ1Uf^s>VIP;IPq\#(C+]/@3Y*/\>=D(Q_0j6DPM79<P0EAUH6$f1Te$/o(*>=Dqg,`d''#c:\,G=J!m%b$^/L7OP-%N_BZkAC8>D/=^nnb5dOeds+%VN)>Y.91L-"XK.IUMkE=b\h-ALBlq]!0K;Ld+<2A2"a*t->;JH#=fB)oL,F=uY2Yuonj8?Ea$@*S%;2/F0#Qj$4oP0Q?(.O[a"mQ@,r;mcCY%I$,(fb!3lq(!DE=@LS.#sVtN06C,C+70+g5cI8D_eP_hZBgob%s!M]ql"W4@.gf_LU\6%,7`(4AK3Io7i/D*H(9R/F1RBlEqp2Yc`s0q+l`l90*kr`)uOSY?]8ih7$<O.UVY"E4Vm+GI`I&Hqj`f$3a"TY:C"@WUC[D+pFl1#%;*>p"NDEGuRVY63]8bc$+u#c\$Z:3C!.p/1p=m59!/le,<*bFJ7Q.Hf47X=X(KoTY2+@PUK4.mhFT:R&,Jb:Z`juW8?[-)F$)/T@%:/2A.35L#3mXjm$7**gH_@1bpQ*Epg*MniU$\jD<VTP5UTe)X%cPk9rVp9!uhHnr(;PA3[=?Ea1Y#!JY4=PmjoQY?/hp\a52@M8"%nlq<0@+&^G9%obi%B6;c>S%O]3><E1^[5.^i)Bi[nEAC<<_GJJ!uO*[Ut7OCM[[Non;'F@qN*q5/r]'$Z:O.nZ&W9Hcj32`]UZhu%+k+VN>jlWC)$'=Eb<(H=OSu/?8uXsN_<:HL#m*p3%fPS>fP&*+Xl]U)epd'Vl9[>V)%k+90]Z+7D1i/#6P*Cl%*Cudf>.-G=qS%L%5P+TO=/p?^nW"nDehPArI2?HCeJ'$H=_k$".tP8ua.(e/)bf:qARO6h7h)<?Mqld3XaP8Pc_S>.GmU0C7i\=cWIK";@0A&nd#7$R%79T'=N)*=.dX1c2&n,"i'd!#'4OPVe1-s*V^dVlK3S8,WC9<Lg-;DP_pn\A'L6e!`#6r(06p91u(nB:\%>9ELi[c%S7g9k&Lb!Q=%co$CldcFn$^qbm@,?![M'Y3=8$qAr<RWoqf*KjtlAIiW5G3FcTF0mRU-%r<OiXc/[-Y]!.E;HhCqSB%h'>#qI`Yi2MHTYho_"\a!%o/&,@EEoB,iOV^+@,>i<m22+.$s9pA]VTo%Lomp'4/dm7.,Gl&eZl=_GSu8>n9JKM&WBN$1-<Lb#n!)F;bh[*GiBJi*%ApH;%Y/'%S4/o"3ms-FYl*EU[5I0,CG8Q(UE)?!Hnc2<>%I!>%.;aN4%?^8<LKlN&0UsI)o.]S&D+G%.6#7_%X?FDiI&tr&<,U&Y1UM12'ee4%.3VrJ`?a_2ASa7YCj_$\6bP@_@mIK*8mTJ0ck67#CQ,'dePQX;b=,s]7(+E`'i!mKTYDH7UoLHEIZp*J=m=TN";o>g,GH69!2Un_%FM$OgFNJ@TZi#"];0\LRB&o>TjjE`4YNjb,0HTD`SqoahlBpNbZ]SN-6UF=BD=uYkNZcG,/+jcd7MUA_mBQ?eWAA-/djrfR7tNj,%C\9R0=f'Sd%!7J/FA:1R@E/#rh?%7WQE7p<EDk"0s)mtOSSSdp7dX.sB`;H#jdT[^C4un9$EDMY48_lO?cFQTAKdDZj).!j9oSOo%PM+fddSXhTMJ1'U>uSIs#bA)R7aKYJC`U.SfHDS'dF._Q4f@PL6?oX\=t\Kf<Y/UW)'ZW5f"LrV(cq'4QCjM;Dc='mG?S[b!D.so%PX_bT(rdh21P[\'9DOQnqig;F<G%2Qf3:M=p_NB:>-9M_8Cpk<->4^aLM6PSdF`d#KbrRS8]JmW-BS\i?e!J^'crRL6NajNWC+lg%R84g7HY6k"jR,`I9(4aa\3c:>QJrL4f2RJuBMZ@aAg73FlTZe@XB.^&:Lc'.nXGtj7WEsOF8P#0VMsBb2,8IHKTNnU(<f[AILV-/%l"HuNK-P@T[<ZUG]+AjtDN3*A+U6t+J,`LcUEo^PbqRt3,M>E<?bsUc6<E%I.uE,FgC]#WZ/]R^'SR=q%P;H*F:8R"<J5;M@:.S2%THrnGV])u?M:k(!\67LpfN_Yt/m%f3L#Z9I8)8$k;GWkQINc?B?-Go-]Jn0-mH(mheBZb8efhAj.bu]um\p(F?cZ0$M$V3WEs0n6%4m/D;M><_8qtTa-`bMuldlX5RAg0>&V6F\9m;&,f]p$mi"s[0SdcORn(QU45%5_(">X<^aXq41pf=P5Sq(BQia&^Z+V:5Tf[FWJ9%2qK_DR/)ZaZb1N;'?N+grL.Y9o6djcT:aooVQ8DFq=$kEE2gI?NL.N<:9#+KYN/_/rBbV8d@?&$Aec@Q#BS/%$Qa/"\P+k:/M5`:%Y=TNl*Z&j>ZLk`7Z+YCUf)mGqZM./h$@H'&7JgQ2R98Ho5$a#iF`\TUKgpP=P'i:meFRhV,arR)&*k2!#edI*3Egi!)e.)"=g>`S%FhU)l>-HP3(\CF*aYujE]k*@/'6mNGInWH.qi-OSfj9W:/%>J!WNu#Nn6amPhf$mu&T7RFDC=8>0=Fq?&(fG.p?ea<g7+9MXW$N9%rSBQ=NF*Cq$^tb)V!ONMng+f*UTmfR,P1$*:;KpZZBHkXb[':2PACcj;S:uN[eQqE^Tqk9\4KQ*\N='`<[RqOD/ma?80g.L"aAB\%I+l`U/9*C32:!3fK"RR7bcM0j$\e)m[>J/Hd"?[M$O3#U&@L18K>4U+'fM"h)]/;P*B^s&J(-!DY,EPCmNo-D[?Y*qEnaBZ7QhQW%)s`LHUO+O`$Xp"&35ZZ:!)R:b6K$-YJ;eB;+s<#apXjF3pOHD+[SJX52>:?O=*)\<\`VV^CL.Pfk;-B1lssTZpTTpc[d%&-4C:<H%=",&`TB>UFk+GE.3e-t8h7$L^CTU6(mpGG(&oq751BhrujI2?]"7m2+'p_n/k122-$)*f#,5DIajZLFcmMC%G[<9Kb%PP8qKG(A^%EZi$VeWl)V]_A_[9t6DU-D,CrU8hfLlRSJ'BH\ae).K44_:pRcl1Jk42.^F6Wm.EAqc\K2Po`LXphgH<;@TCJ<UaM%E@L;:;u\['%(8;2mV/2&O^!>5cNTH\/WiLeThH[N$dFhq_UU6M>fI*r4D8[J'aANQ.\`,CukdIZ&1f8O8+/Ftd1P^[#F$DsP#IR#EgLsr&kNO4D%h2KQp?J'CA>&!RhZWE^Po\_D:!A)1Lh!Rg'KVhL&n?t?ORCZ3!Z1YuaiS1B@gRYGmP:PtCObY1I`LbN%8j/"uhD07QVO$A%HT"mi%@VVSGQ@-8seE_'bF8pRDD"Qs-r"ol=,GjL-m@hp&=!%*WCXQh%TNBKFguHi56fi%F]NQ!Vq8CD:9OqXeaPU1fkiPs3,H@u`V(P'r%rFEYAo"&3eJ.4m^FN;%5ZWI;'\@ItjQ+P47\.`9]gts<nT=1'Gl%?$/B-uVWiTB`eSLVBnS1VET8QV7`]T?p+([kXX^hKM3YS:t`%1;N'r6ng'uk':]4+$G*noe_]WbKu+6.f%V0I1s,8EWLoC3PVl-ajKm_Z*dIjBctj@#c*nN37s-(2Y-2IIYqfa>41V4e\dqK7c#NP%86.[XI;\+T%)_G%f@K`fhGj_a=>*/rc/3Gj:2b"`@]ck%Y""Ird,c%pH.kD-C\L.bIu<)p,5=0E<(.9.hq^Va<@sjq]l^*XFTQ\M%k>7!l^.0i0kOic'=tW+H-W'O+(uM)0DAMgL#A=8W7!Ei/NoY*O12S7ihC;RBD%"B93k^[2`RR;3dK\JOfAU&;!8(+ZoS-2Rc_@=O%TVZg]Q3$W`M"DC]k:DUmXeL1.\8FtYqtf+*\+/V6=Ll;_^9!VT?5BA?N0hXO15VKUrWVTDZKeUNp.V?I3f`Fg2WcC:SNB/4D;]_j%@mg>TFc76@RTq+]D-::`FLe2%5)9MlplR.3`5TST"btZ118Jim"%^J6[]n:t7%>o7@]CPeZA<!n>U+"A']X%g:)?%PSLm7&"U\iq%/KSbVKA[2e_Sn3e9ElA10upM[8#XLB"gJo>1D$Uibn2Kai#$2J1WJ!pbUb;AMq,D1j!m`eSXd+S_8E?kbb1A[?+28L11l$iY/aLI%-[Igo8FRBe'h`XDjs//<e;#.e*-F35gTT@okZWltZ)OD%VWAYH_"UNL6#o9a'Pt5;C(6BUc-R"=C:T9l@L6iU5G0(#]/bi%:^M\Q%HC-B7TejmG$FVGKeq>Y-M]]*e+;Z-5`+=$F!fJhFK<tK5Bnl@d4EhibJj4a^NG^G<m\EXJ:BqGB*d#*o$TS+VK+@C=I+aMG5(I+K%;9fcRoM6YMKa4`k]X(@t_^kQSb<<1EMp4>X$V-<:8t)Cf2^HZ^oOnGTj:t1^7OB:.3QQ/t&.'uF$r*o"p$5L!9u"p@j0Se"1_[.*%`"eds,a<_/cc9(U9^Z<cQ#X6qGnAH&S]Y*HU(uGYQ-rjcrDYE9,U6SNa#IAqk$fj&?;t:\a4X/>$F\Y@`]ukJJhf9]NnAtkYFhA_%q:kksgqLAtkc"Q'N0mDIH[!I$_8XO(J_=2eA[ck7W^\79i\Jl=ho;ct,!J&Qn0AW&OeJ`WWf6,em_j`_o;#GjPKGhWQhf77*e)Sf%m*4bLaH"UZ/OOS(>=0!:HGY)u4tbof0-7FI1UjgLCe('>gg)7X,?p3kJ(d^1E\TX\_GMmQY^7,\DQpEB9f.t(?)bgs8Mi!/R&Ph.%BQ2/GnA&)m.CQUc2fM*%4[RqI]U3Q<>\2N_Xj*(R.lX)*WQ>P/@On:"_9S!FCb+s_p-YVI*#_Huko+JR[f_b$3QAoOeoU&oC_J5c%aldh.i(aIrLaHKIK.IS`==H?rCaF/7=*t[eo/oH<]?Hsd5'EbMiMBc"/:=`=ZdHgW>k;b8a#t!>2Y+E_ikuRS`_#!+h/=jW%'qIu%E.>>Z#9G5Lks&(.A36L*`2iKF2[R3)g<Z:RGCZ![p5tL+pTGe*PG?9G+h,rT+5"`=/.h_P^K)[R#IU_*1?0M`CO?QBF8[k\D;BqF%.pKUr&#Nsp`Bf+GK?VNt$:OaPVJWXg2"5OXH(d.6p&f)8J4MQO14d#&kf"+JYD3X<HqMR<&\kcFVV@*&XDFL:Y@[l:IV8W;C)4+s%<nL^PEOrI1GQt]pWmo<s3,)#n-F+NV;^,,NVZ(8@ea$]g-VqOW67^DOb)pEls3N'-46pO;EQ=Fa`QGOQc$oIK>s/k(TRi>$'Q/,.%^h,63H"Z?'4X1k:\Y(d7Bae^l=k;o?CoI$P7,7K/gO5a8I_F<*ETr0^N=d[NX`k:tbX)Kdn'b!>W@Y4hEpPZkZ?:<!4BUVH8\]nl%'"2,N(MpjSdR24=k^G`45Ae@.WBO?!<TRg#SZFPD#g*tL^+*#um;dWqjQE8Iee7En&O1UHEkAkVlp::cR7/,ZQ"_=YZ*)URLrgY2%l"a]"BeR6,bV^D(QE>@%Q+6Y#f>LGLi`00#ma[nP;O<)n.u)H"[[t\jCUhFA=M<_fE8?Q"hgcrGOLAqIOPf_W:@'$gE&b\YQ'aRR%O3/JB%qk:lq/a)G"cd/`g[k4GU2uZ:<ccO`WcH`fZTIE@I(_'aH,:k;T^jQ&!Y.(JbP0SJcI:=l%Pkq4beXMdV2a]!)G?g0^@LOB%>tV\(1dU7?bBA,?G"8$;TJ<9S#Z,Eb$4lI)2/f8>enZ4Xr"MW`4,NY5,ccAT;<pEj7,m:aq5SENKUf!d^W$UX-+W)^5h8Orb-&VH%>nP4LZ&IHbR\2;efA'ElphFHTRj@snie6A+-d)!&rD&GRUJZ@Y"M'QSLue5<+Y.Rdl"Ws91NHqW!AQgHqC:m.N_a1QG75!<TLF+:%@^CN/"%JJ99V5@0?3bU_Y*YD3%spC;6:Bb?\]`gq;>(uMA1Ki#FCIV;hrK[fdrL2RTX4a9hp7"Mo,pd8dJ`H1EppH0)'Q4-`&K1!%!OmM3T5Ne_k3a'MeW#3:JUg9p*iQ.h.S/Z=2O<JM%nO;ko!PmkXul4*nOcasjsu.@\V1C;[rRtQJ(En08CC9d]3;q7=cT?h=6Q,q%[CQom.Ecn^WjZFH=rD'PdTqTQH0_@N3)8>".qI+Q&1$ZX0+5>@.VfJ:lI[FjdeRXH:S'`rRE%u?Ls-Dt5u:&oTN#VSelf+Y&M3Lk%O<nbYltgK\0/@R'=R`:Vbe,KAq\eO2p2"[=Q<B`6;Bs9CFH2d^7,t`oq5&<=kso'"g)[YtT\aW0T2,^C9@#nUE1O?J8Wel!;.8^h%XJHH1aG-J;c%DbqGlC/o\a%$_$=<`,jiR52\eA*c>HG_?XiV"-h6%_HcadY.?d@2fV+@oaW,<<tEbErb3bfdkB(f+mfsTSi_84-[%*iMp`Puo2*2PYt*qK1<<Q]!8:rotE2=\*IB\4Dt2'a6TQi.'hY&j"j.^H4m@1nHcWc=T6%Za&4;?PR_im/^bSW>3:nX!FLFB;e4]%!m@8Z_$mddNb[h?k`VNBnl>Z1:M$5#,!-AY+1Y^6(>J(alh5"pO=MDR$BZqCcK.B?g7^=SN,=JB&-UnW!"2TeV>88=2@ZiQYf_r-%I*&9$"LPCk`f=s<,YnsIXLXZS'@!'/UV5A%E[7HI=[[3$)G=Hb!i?pK)U_6SPbFD3<So:I`Vg!5R1I_<lZh*N3=T/l1U!<6nTDT\%NlBo68HC(e.OS2=Dg*G<G6uW_QbEQ(.i%KVoQTG;0Od^ZE]]&epi1)eTs\+[W_ur*>3-k8@Npn+m)XG>EEu8hc]&f&DZ@pPWH/=H%N@,On=(cqZGXo5[FP>P?ZOf:P9fdueFnOg=%R#p&Q!1YrB8[H_qikg@-D"M*d`u1NYX#gM_6$th)Zmd'Ea2@@qIe;cLVg(%@U&+`%\!:Y0L,)hT4H(OKWe.p\&Hehi;]DXf_a\@c?ef6eO[ps;omBKeMiE:g/mR2nKu`1(aJHSU5Rrc;dcKkk99?OAR)\l"AkjM%eI>?4%\s)9/$o(FgDtt-"mc'AH#sYJKQ\C-B=3NAs$tL<=Bfg?U%+:._^k9YuEp!2.]TXj(::/f*1g3/NU.'JK.4kpE*#Lu&X=Y.(B%t&9%CWS5]28WI<Y(?4_21;e.!'Ol+9fh,#IU==W2nL#@?g5!)#Z0g:eBr]H?[05]g.97tCMs+)WCiXh`oCcU5"(3n)sA7oUUfMR(NM6*%44#kn%s!'B!A<335(PP:bC&T(V1PS"<kNIHQT?r+"H8FS()N5]H#^'S:@.[2[#+hb\tX/Sdp'DRboQ0.]qS2Jj*oQ*Z:>*[k[kXd%a6ae3WZ<`$/aZIp$-C`S?K"2^M\UCN`@@IKF%&]uWL/N.)7nt$==XF>XmYU`-`XZO=uC_jHX[d:O8#q"QPj(2c3j@r,SrfnGq9Ce%,FNE)CqLP3jdg;SYh)sH^@Yluj'KjgBs+$B??46;>+OQDo4%^1=j1*&P8L(sp0K2@^.A<!2NA]hg!q+p(0A64X,hUCKj6j%B.6V!%i`M0$$D$f4oUj[1bffiPbQq$-2*QSDX7WG%HQ<?o'\bgSp1-)!/eut.NE#>fi@U%eeN&9*#4KjcVb639gNm.OEMgs9a-jo+;L\9k%"8P,N[;gsd'=!r/^$i'+"det)[7g$(XDM`kpZeILLjc(15/*P2#fdc0g]Rj'/'N"uakeqE7pasT-[kKQE?]N<eW;t3E+e:P)Hc:X%C*>o5+`BP)?-VblS&?FgQfQG!Rq^Y('I"heA_2l1H^s$m_SYtE-eD>c<q+Iun+a<Ll8&`'2I,)*a1M*1KBo@e/UauM?nl$Wce^%0%pLqYCP4\&=HJr<*4QU>(Wi):e#!-U64ce9o<acS7Jg^IHk]4;.A'/S*%5%<6cJ;&nF7rGAm/U&]_YKm"^FP:-J`uj4YdbW$m'Wt&%#SNqkq06e,AWF_])uVt=B%hXH?<_9>XC^.rf:H85Jq$&5g4jCAr/TZ;^Q8':eL^_#=_@j-la<+A<mkHn7S^.@Ni(FUb-&@_%,WL7%akY_$*L3eK4)8G>i%N4^YWlh(a@2f$9dr9;fj:3`%kf3S#EETf1kb\cdtJ.WNumY]6glgA<XR_8k#[l7Y;p&Uf"p0()pU("O:ej4%+l#;_m@o`l#YDW<>ME4oTjta1VWTpO/SaYp1UcG?;cseTbe'"h=bFCKQVS1dDb,,Gm'VdLdT)e*>.rD$SZh9eLh--p^1`G1VH?(J%0X,<LguuAN$4V)684_r$N2?Eh(X/>%8n\Y_+G(![hsqUi8Dc-b^6BR$^!q90hgFeh\5eW)=g!Qoh5&@-?r4e??+9-P>?=,Re&CB8%^=0;]Ynp6W&V3"\7J**uaG<Vi#Hp1\+[c)j!rem;4rGQD7#5;T\7!_?;Jdb,9@8F'mk=n0;X2Kahj;];IYI9mQj]`WXs+BQ7+ZS@%!=GBc-f5$;%l6U%%BmtTB)7$O\dRDVi<p5nYUi-A(3,)h.?9!5/>#V1)[&s@M$/2L.@*QB-Uf@B+q_C#Aoo3s3-=ru0)"8I1Yhg[%6kZ32d*3RCC7rRAB@p`MSkLK`&Gd9g:jWEF\>T>>UjkmA/0NPu!S-gT5nrh+Ih&6rAC>T3a/S&\'Z^+""&V?VV*LIf.$<loR:p]W%,^g=V/YO\l;L>(+ZD]g5MgF"dA@X0`V6Z!4&_0h,n:!$U,!DFS7KV%n5;?=!?cMW2>L?pCRik?5%iGHYTM7VL'_S%a`2&)^d>9sS%hudhYmjUZ>%mf2,JtX1=Z$aBY5Bg]lnb7PJ3taTkn>%_1!tMua"*g;*^D?g@A=f7b<oV,4?!:>.am";Q&f@?7O@aIp1EtP.G%JK%%T_M*),k.Y<,i3%9AO.'b4o_Et8(c?T+2d[Yp3\D[-]s$kkp2IcZ0P%:1kHlb*rG.\5Yr_]Hlp<RiXl"f4SU]^ai6?,Arnt4\2_M_%9INAME>C/E!2I)$N(94W-qD-q.N+,+(]_-G-joXc\7CDmTcT4gKOQcjTkPR>nf.lL1DCL8Op"b.THEf8=Ff=TW&TXBDq8Qg"9W3Q%-qhtoJ;(RZMWY!P''`q/*jA.ZOZF[;T8<(I$.nrl!ZiRKM9qNO[\99/1K!o,'MfpF:+!J1Pou_h)Z5)D,WM_Ep^"5,&i:E&C$>$D%+g7*L!.QH9-g4id9K#3.(`&^[,E;sl6R`cQa#FFe_ZM`dT]&WSGR@?b+:05%2t9$pSfeZ%6R3BOD+gOb,R[$S/Du)U64uii!aaoI%j_D"M_W4BW2KXRkL8T1JJRb?BJ.;b<-@#[7QV#2BN^NpK'R1[n6^nJ1a2Sc!Q37VA5#*AbbUK+nTgC#U0'G\c8Q&LnW.[5TiYVh.%-<UhD+[O+9&lCrI?7%)!JO^E;TG/B4#_@p@%R3_ZEBXDl$(QOGP:V\r#!rATOuu=*I.2<hmbSe&KjkTj/-g/%"Yg!l%RQM#1CU3:%RA:um!*s3r+C;tiO@1kGKol4'%`o/g%!l1!n-$j3Lk3Z-6P4ErJM2i_@Lk/R97g+\)QXH"0?m=5RUM=,+gqE9BqtkO*MS^iUb%-j%&W&K`5U/h-8.K>V7A9:F:f%LD:3%lu#Yb>W!5e<jJrJ/`!a-pj*,K!6+#3jSJs@OWdknKKBSp2;oRfa^6h[hhU5&ff+rM"17t^Se%&se&E3l\EJFG:XT$"?"t7$&bu@KM0._9h4M?O/$r#/b%HU?Y8NaT7n<K::fPOJSqbRTeu8>$(SW^pGA@KRk-^T1n24'-&)'D@O.e%7$<)C+E.Fl#5#3UIF+X]i7&CNIY2,S=Ve=br!o*18\`HsA4"&#9Mih+^cb:K>p`<TKd,J[Jg?QV4ZYlkTe%ZeK?uVb^WZ1U_73)G%CY\#30I`b?MI_\b&e*2qBB)P)BVTP\9mFg3V.JI.!RH96At>UQPQM]Y"mo"ImGhB4N8Pc0&SndLl1`!FE>G.Yh@`p0`?i2S@9COD%hn08\1)?XPOK3@K5><sDc=_R%K[]u@$]T!)[$kC<la?7WQD-A;As.k;-%(nD59:\0>n"tUHjJP#lHDW/%Yq+h]IZdOc3iBZDA#iD%-jo`I1o9)'U2A_b4rY,VQ6Hu3,A)pG*%X5j1>4VD=EM'`"$a;\7)I82.H/*A6I'#h7ku&u6(0_=Nj1'e/etIBB5-)M/6Fulm+t&>%[/lg^@hNSi@RD%ZlSm',/_4%K@fC?j"$=Zb1[1dSPR%m9fR/9=]$HH<ao`I61J-Xt_,\Djn:CtBm3Qibe:U*^J8Z.32UhsW.1AXt%:Bn3m*^5Fo5MUf2!9lVU+])H:^W._p\hG+='-[bPdYqKs"BqUM&('B)HAf.Z-cpukF5R36"V:OR3q*AMc]K3MT8bW`Z;Cu>hZIrX%S@(YI_Uo;E6:l+u1h*83(9S^SRq,V[qA:hnObjcGYDdKW"#n;j$k#(W174O'@6V+?kX?,W)9D?"59R1(BS[Ep`-/YI)38Wi5Tpq5%%sem#&*d1l?VfWbW*=kV#]tt]Dbp`E>7Q<i8HO%0kU()pVF)7\U";sT9gF+48,,Or"Ys9CoNSD:a$>[':*)9$;ZVl/;o9r6>!iEq%JGMEt[jiVBc^6uOlY$l>6L;/jb`]I:'NWY`Rg'9md2'.P9rO./G_3Lg]2?d21??6pjDWUF&kG:75EcX=@(qg2]5(kPLs0?4JcIr"%1"a/p.#oZgr@[:nmddWmBjDT!k%=:5&;qD5!ijCOpIYO:1nE"DLk$$<fBIehX6'`B]PH(*NXQ.^7dGe<6C=5N\aT`u:,$uIB[[)b%_iT20fE[PG"j33V);J$OPp3O\OV_I]ru@"c[)m:t/9*aZDFp/d:kV,;cD(=<fmApR8Tpn&lj;Yl@bJH)$0Ou7L"lt<#[0(ag'YP+%"FP`G+UEC@ff<XiN=i/U\"W2M6<.Tg1tpmHcG=0]RHRXmf&:\edc?)QH.M_`VEOb4J,GSuf99";@IBGR4;Zg3MknY3)'7EFq\3C!%0X/TN7>9a?Y?LpU]eZD),"R,mMN>@HiWm%5NKdG?p%d7!;P"dja_>4s.`'J%I%+6\Q'nL+Hb,cg0mS)4]RDpuZCLO?'pP3SD&^_B%?(PFWr.N1Q%oG4gI':$+,!SqIb#(RERaF=C=HmFe^L"pA'?YbX'O0b\Za5gnfB6(-LE6!L^lMH*1XWM2/mWXe!W*+P,Os\0LZm)=%I?[?PUOn*j2^$ehj+k\C?+):L)W++/gnOb5OYUXkA0BbOALE^#<o06R@,bK*@)Y^RM%rR)Er#+P_j3K,fl`#pH!K,N""T'Yq]o-;%G0t^m/7^0`cuOr-oj;#8V]KARR,@1a+f$+'A/,_lY4KcVPj7>tkI:)Qch[=-IM)KS=UntJf<kh?/UjVQjR&"uKS<psM[h9IXH8-^%^N7H38.I8%'qA4afE4NRQp`3>SWY!G?K4;L--gRl9T6fe824Q(Lrl__hG0[?.e5Zh;Y',fq1WhFq!F;!Z<b4Ec]/*)T4Hc^-te+Q%$d>hk@-ZG9A8<3j3LO'%]kfRkU&1]b'*44qF3d.kbss)0VUUtD1`X*Q#Hs=1AtIFqLs'foQcToi)p[qei1pcSPKakpp'W7\=CebW%r;a(SC/h9)Y"T98a.T+JO.\Jcj%[J&;tRJ_WS+EmW#XW[TZGTlJFZOkqiEE0=G+_e>2i>_YIRUaWjif-D(]ueQ$#T4W4\OVCXgle%Wi&4<GK%SP]p?EU.aHZ_T,&kmFk.KMBo%+0>;i*cIihkJF8u3Zhh]%</5k)U9hu\0"KkGNY[$fb["@Cu8i<l@%NUsnIpEj+?oT-&%<fdkO]mn.I\Rj'f!Y%=e3R#U-ScbH!gUTS2/k-"7W'NiX^W7Wka6'P;9km_-j*,Od_/[<oP;Auo*5^Cr0A4HeDV:6WnW_('Lm@D6%D1mbJF:2DXO$$B;=$N+80:mif+f&'\@^'`1NFQ'$-GN8m?'"IAe[)1OqbOs3I\nN7,5:Og-^4up?GpYPD[n^%Q)b,)TGtWIf1(,i%O_'%VCW5sH,LgSfKX[gfCCA0XO1K,-,,-u*f6,h"@(SDg)96@I8GVYkb&8]7YZFTVp.Q!J[mJ[%_!)/5`S@jM'eHrJ1k#LZ1%LK1%"G56fX6.n@,+<dR]G4&lS\6Ksi0&"BQhkl'q=)8U.qd3'pE+hm/kQkVJ5Z%lMO8")#Sq<)nHt<3nKe3PWFY\Y@V7!GA^;%#+-AQ%%?[g"GH-dE]:p/TBkJh']/(e@pr(]kU]^bFa_'MN1-3Y(\K3kW1.9R83Y04\7=8TJ9UPm5rP/4<\4c#+r_7Bb"6[?*8.ljT7F%`>]%m:Z`p3PC+W4$ZrdZ?XO%i4b[VVS#W>nrI^'2kT[05Q)Z$P4UW0P_MD&IS-ns]ETI$a*c.@>VMXF`\0@\!Qh%:-mX-b!<(=f8R<EC%4CiYkos-&\>EP,tS2Vf[H#E<BUlGhhNCjrIL-kSa3AZD[>p?1fJ26#k7G/)#\W+Q_dt\l>?eW\W9/K_JT>'M6E2^7!Php!e&p5Lf%:M*2KV\e5c4+#&`s7C*jNhYL0*R@R]&XPiLL(u!e]Nt'E&n]EdOk8R`TV#C`9GL&Nr1(PlkNN*;3ZU4)"QuTF86#%;^_UaEU81nT%ojhui9JS2Wk!V/lQHf@rHQPl&DD3D#;K$m`S8%-<Ko[g)P;?n^*IPZB'l/-5``b)(a/VS[?l_m7P>l(`n*S"<V9RKcWiMA)/aGFU%r9U5_kNVWg#QOZs57qNoq8OA?F]hsh*VKR`@B9/>p+#o98%>DZ0+eM2B#6hrd5c`88=A4P7#]5_`jflImlBDYTNagK;*L#?A(i*l%`CUj*o\Qm*DK&SrH@nWOLA,()%:<r1$SDB<GXb]5@F-kI-^iZicDT(3P(1hg[HSp;0?en@d+V@E2F<=#`_G`a`@%G]p#/9^h.o.q%2:&Mto?5.,Ru2lk*+'2k7L)r1ks2\.][_TYO?S&N_$7$_c6W$s4-J0+2[N%A%gl0m*6Vmie*>`3KWA,DgQ]52UPmP[%L'1@An#Tr%fk(&!g1B)@`BG\YRir/Bk>nYQeXlZALs;TEU%Gkiah_2?CqP("1:'Z%YrU>W,/H>^5E$`HE98Vur5.u+[ab!>[W_A+J,ecrd.o8&%(E9mY]QAde#u3B3K9N0[[_FN$r(Fk4H,G!NX*\98%brKN<$V.AfI/%P/.0r^c/U%ff&i_(:XGeni'E9je<D=aE:6LX1k,6qGl![q%2+aNR=);,"_`<X\/.bP=SVV,R?DN"$3T(,tVGID"ZrB8Cj)-V2V^=@]]ZH)(->cpBh]t(jc2E9hoXLK*H$_F=ghZqskaI8\q<`3V%91Ae]h/:#LJbS5bs%c5<$i+9OFHst_eY3![#G!(SJS+1$X-G<UMA%/P_D?>^O!Mc&9@#/YY2SQf`a?5u@YmbHQ7+t$8gZSs,.o9>%TAN\!^iRGd$0"lgFNq%i?5mo`iB\L"94G7!o[N1cn(HgHS50#S(T3f;$gQd8e*(]tO\\X_e'"?Kmlrp`/isk-L]!j$Cro>I91Zi6%Z"2e$\DU!@?N`ll"*ZST7`]%kGCrlcKB&2`j`N'iSi<;fO.J.QdAm>#Xn*ac;i9C^&@c"3TetgE\7Nf@<*j*\&uJl4BY`$egK>-Y%_Ws'gQ@JA:/Ac.(]<8RZ_?^8Hk.&@LGEP1D^hZnLme7(i&XPs///p^>=fW0g>rnPaL%b3#inJS0:\ZVQr=jR0%1!-S,`94mLij#+%8f-MIIW<%$Jnk>d*WB@FZH2R-)_25TAFO^N%4@"?#B!N2\2;K#:+U_(,8kEeiTnY+?'t0==T2-]]ulQ%JfV*p$2^fskIm]QV?u@5%iJt6\1;u:,]cAn3iG317*o*Jp,cMO3#C'iSe"o4ldPTCF_L$`[&oT.Y%kG>a<d^LRs7"N`fa"F4Sg(_Ik<1gXmMI!tUB@q`rrNu-%8:&:3))oYXmrl0=a!LV_">9tE&>WV.)U%CYNG(^T0oeqV(Ht4,$VkI4n=;\pLuI>l[Gla,Ic8_#O1;Q`pF?BLgO_;rC0*I6C)DA>%'D;ksj6-Z`Q,"W=BdMOB<fD8Q:U30$]S:GCAnaDbpic6'[//NkA^C#C+.bWE&_Wc=aM=^.h#u$!fWfLi$E(h]/XpQ"G_c87*&..9%"DGGXA5J;V9k<E1$VMcg'.5mdE'SQid0Z:j/n1:WJRVnF)^AJu]51qU'\&Atpl[X2eL>m.A7i^I]TgDD)*-.j0VNPt8?/[ddo\2B%8oFa5`oAU]<J8-/8s#?"^L)$2\n\1!cATap,A0W@[P'po3q]Vt[.sj"=*ZuBm[4Y?f/c,piDnt5r?59#Sr]!]HANhR*u<d4"Y,<d%N#J,eB8K_8]6.@^.T/!VaYkh0*]Y*i':Ner2]_>7kQ4V)<AEk?9H^`.E"+_3WYjn`bi/IKS-_"8"5Ii#hYNtJ#3MZ/-TON7--#H+%T42dlhU6AcM$sTL?/r;DPdr>deI42al`$,X(Q1e=ID8_,T()25r>)tQXpAsn9@/4l5uisGesac7X7G%Q<]ktZ?e$sa42%eSHMnTN%"rFFjbbW0d0=nnL".Xt;Gn`@=PLf0Tg/ZQhKr`VdgZPEN's1nd>>LZFHF:hqAWqK\onm0mhs>C7BFX>IA"['E=Vbu_),ki[8/QV0%/_I/QO)paXg:5@&'+IC\h[aH0h[ah0Boi8f++GVd@3o:`aI,\MI7-$;(WL5A:93qt=`=qf4Qn^j>U+ECV'PDLX$Ri]=IBua0#7pM%E"0L-084Vu;8H.UNTMYRPNU2qEGPtOGX,4\B9RkeVXZS;(pf,+;bj48&G^_8=&9e*lNXrLP]D@AO-eoUdn_F^^[[u/`+$3W*n[H`%#f4eHEGBQLCs$HIKTK\HO!_P7DH[RT]M6.#+1*)=^OHlUTu3@QqrEd\-IG=Nkk)C;iKfk9D%XPN?TfUa9&o(qXtpYn/*fQ7p`(Mh%JB3nR6"c!M_AZ*,10rF"-bi-;7AH)Zr.UVLQoU^&R5PW^kd2gak:5.<m1IQG1dXrDGq?Ih9Hi)9+3Z?aS#8Be[Ih1tU@Qt90ilCF%^Zit`J%^eDo8eJ)gO*6EV'fFMH`!p9g=rsS0+qf5OSM$&6AP?N+(D3j0,WYB_8HAUBWN6R+B*HF79IjF\f-LgKo!aEbN=MB&8kH-%+TSPZ[s^kk.G`(8/W<cof(-]/biJ"p]csK$BnbbGDKhWEnhuf6r8f)\4>ra>-0I%oC#o$(rTtAVD,mc</c=Ndp6T[ogSI*u`\b"@%2L*-@O!;?05X)@GG&#\trV_M,cdes:dRG=.L[0caBj:t.'!@&/f,.WQX?o)/SgXk(Bo3=@G6;mMN0c(V5pk%.nEhP+UI@WmPVQSU%"-k$=1NHJ-.MS((,BoJhfK<^L)*/_@&*&?RYT+M2WJ&O3E_TOpIhI;nchL^X`D"35jj["8@+e3.EB>\81,"!PADnAdkHa1:LUZoF%chR7,ILHTV^`/u0DckGB`[&X,%5IWd"2#QP;D<g+@,]gp5E.k35'Xs-^M<Cg;MQp];-9XY-,Q_503t_$/VBYD6mpRp7n^4=%h,hb%B?*rPdo*'df^/`igB4?[XAa>rh1nG2/@)<nA_Q=^1It,l-cKhg$;jNUZ=%4hC!e7blOBCYpN+K';/_N%]al^jgqPDg?V'nu"Xgg5%PTYA.\lF:\#<rW8-g7u=-6FKG$j(<`Z!tW,"b,,"A*(OmT^WGq_&Hbi?c,JrLbU=I?SA0QX>[u;XV5LFN1@h>'>$jn]b#D-:kYr8%*5["&NEq@A1L\`]<r%VhDAaCrkTs\F(uj&'0i?SijRT"ZUC.t\m's0qYpAmsosa0#mC=u\i;<?9P_XU1=:iG&CnrfG<J1teJj5Zq%EOCuVTZ6Z9+9@243Ul*N7oU&O>(]-Zb99&ZH)l[3cZB:Rkd7QC#I:(u$(2cG:k4bQJ/IG6fHkr6MH&'ob\[OOS\'2/$\CASh1Xi?%(FDAJe!tg'+VZA9]OdVUrT<IDIY#BF;O1m5?F.267G!1F@eofAHRYkRq"GkZ#X-&IVoF6V`%,7Oq]Rkbg4OJtL>hHt1ITL(_WIY+%*`tM!%fm,E;N'8uF-)r/IsR`BfZ%l'JE>coDNmT+&aeLJN\CnYXGG*iEf56B]RDtRo'LUTFBOXsi[;Na^cU(<WFtapf:U3*n7WdT%05ad-jrlN8J49.++h2?"I.LbP1EYU33LPhn4rt0O[c@1#mHck5rkf8@MipPD+Uq&0ZHDRBJ;?,B4F,&O&<Uf/;RG\J"]EVQ0:_QL%1<#/q+8GP]I)<20/G##MBFlaBM;$^s@^-jnV%&=UOo#i7n[9Dr2j^[>.U8[%dtCf.@)]Iio!Cn&?84G(PuU+4NXe!O6b?[k-r]>\%2a1RjZ>nn`daHPRbIC-'n^A]=%ZY,6U#]D?@q,;(PKq2dhM7]ri.(dk2kp>@JU"h1L>R_L,)5I7VY:u`nm2E#)I;erHBf9V8CsXP%q'YN!&LU[)K;7?qkN6,P!!La9m7Q^"`@,$R[EPJ-!+Vm-2)30K-a;VP285Vb"5/=f5.-^j@iP'(!3:G9U1=VYh7?`h7(9!ANn#'/%8W@7QWTs%kE:`3l-eU8[)L#Ujk(@@9/W\4-]q%pl7">6qan&Ftpjm&L%V0$jIS'm[^l8`j7Hg-9(I@k/\cjQ;8.gX=_YY2F+>Kco%>\_icO?'*86Co'c5.lp_\m6RmYtLNj1nRN')C7a#<,0mL$!`73jU0iuXr#7i#'NDjLGSBZ-V(.DYGr``#$o8l1/b*&)h8R]</rI5%gqDgV@8k/0gGEN_6ZF=?jKJehe`(nljY10B()fu@0aV9CVRQK_We;h1F1.;H@2nhM!GkV!q;r7$=t6`)nX/pEiMM,0:UkpAVF.6?%otpG'9R]7Pj[rVhA-/uego1>oaP_,;E>gJcSN?/r?AQ0;g3,0:TPE[Q<\K1O:J(fdi#KXfr767OL#4HkVql8\c<n0\GWS$!a>6n*%1UQ=#V<YrsWMZ1LjE-hFIh$ouGR@S`9r]P/r",+A0dBTW,T:n@#r&R,YFMkt,/HKCUMJ*,KX7rT^)/:q[deqq@jY,[9j_s3M<K"D%,WUlUQbmt4jC2GARs'_o_R7/@^MGunk,%AGepPa(;*t4^$Y"J;A;B7\TniT2M,0`]6W5q"5_M]\+'*2MZWBG&\/rhZb(j'T?9:@3%HC?R<%Xq&6@P-U1aNQPk90I$a\U_a8<1dPoH6^YqSmbiR1^+btGXh[WJ`hqdAAj9oAgWaKOl'Ac@D"(V"@lSeW`qnG<rc>C.R7NF%?-o"ckB4\E.GZl,$M`(+,P;(DZ(ssjT,74ar.L=[^)MV)&"$#TKn.V>FSj<nrJR8=_h_$$k,J^G(QPC+/.0gsh:jI#7snJpIg]PE%YXR&\&sRA!4<k/7#<,Ja?sBU/m6%NP/.%B(LHm*M4B:@[m:,:R5bk<2*LC$%rc]%tkdlCfP]3RdC,1`VeNJXY%177S=IaQY5+m^K%#0nM\29&^#2ISEr1*59hiZ+Jdhd_QZ]?OI,%RTZ&L\tQc.@7lqA/*l^\d,R\Y,AbZZ`!`u:VVZkIPX1/At@=P^&ubc!D*Qe4@\E=%*FRAbgjh*/r!"o+b<uKi;rEZPc;J95iaT&F;a<^t(cICP'l'=;<X&(k?a4Y<$<F7n-C/bA)`+[';;6SI4&G]<6TG:-o^j_%"TpD@%N?:R(qcrHMMVDn\+j!A;hM'tqG%i_+1P:?l)9a%?AN87nBl>X?:CkhT:-EsH^]3qQE5K6Flf494GI@VJID@=.>%&\EVn&-;3#MHK%O=j]l0/Tjd6VmhJ%7&TUJ`%>QYUn+J%!ir`Id%KJKEd_`-[7@["CO[FM&.\k30FHXHJ&29A;<mcUZ15C;`SkZSofhn*_MEab\t].%%df?-TB%u=du2o':]YKi;ANoLJj"ec@+*fQjl9:\e?c(Nq[Ymr_lc%M:hDY[MF>7E#I*dmSuJ4r-[C5*:`Z&FYY+&<9Qj-sl7d.h%;8jpH7A`=51(Z*_7^8(NFR=/eHV1)Qo?PT?-3Y>T3__5>FSMEUGaj.VVsb#@35<-Q"X@.E+QI>d0i1^rMh)dCTc=[%Kp@<-+&4Fp%UFSD(1jr-;[1>o$=dRCXK^do.O/B[_=FG_amF7U9qY-V2')YZ-m;IlXN;%htYO?u@a6ULdU3Kk9O*0jhs4=FNhd?ERqYqu&pRh-E%rj.(0J(Ch#ch_eaj7Va;0:)&(+0+^MPj>-WZ:AO,_)%(Qrm-EF,#1Mq)p/@QgDT,;m(Cj22DN]b]5TCEoqXuER?gU.)`-/*HD@=A%-C<a@Rf^TiGhIi-Y<trY\S[iV^[/]7[Xo:S@5D2S(U@Bm&euC@4T9k99\CLB@f'U[&u&<Ed?P`(\mf^:f30hk.fW*gUBR#A)7?,r%@srS`2RlfS?BtXJBIdUM>Na,jbHem4&kEd2/:*!g8du;?6cdl>TsltRbj@+tIKjtYJ/Yb((Na^HK<#u[S:gregQ's?9I.Vp-l(C>%3!D;N<A2Vt'rFS`RVBt-E`i)*0J\&3<g`slApuqJN%HTR*jd7#;QK[V0ENXa7+=Td!q.En<COQ>5$3)DYe$CG&8ii,43pRn@L1ZV%+q;+j?F*)0oj?K<c2@IZ,2ZHlP+-$>fqdUMq(VVUG&6"m/Z`SKFmR]flS9?"ld2<H%\!srk8k.O%Z4gm#7J[rFZWq!jn=)C1rs3r%DOt`KYdo$@s8K9FPUN&AZPc>Y5:76*i"74Mk4R^<%OhN$=lR6u2hl%k*`"Ur4S^OY_Dl9r%(\XT$j>C2=Tg^!.l<*kdZ`(6BhrXQ%b$_Is:;b)dB"fJt6qXF*>_SgS_/QlVo3FW6+?]E,ipVTn!BMqOSbtHf(dGM^BM,\)g;&4h2m*[T)ijA\_V%g7FMF>hNc#`C\:*',%pC@M6VgQZbcNKr857S$>(;E]nL,GC[mh%K2W/4G^g;*Ze%),:<%26`/O82k@_@[H\Lg&FNP31>6.0eS2Xi[AYg+/LcF8k$B<2%ii%Zd*4;ki,kb!Z&AuWn"tF*N?$),"'\F'=q`tP283/Cq?c>GL((m-<#\;0I$eVF+_r>O$fp5pWG#KaHf]CldO(5a+F%HX6ZXe+?Qch%2McTu>SnX*D4#5d,3c_tohR;(85uYr2(QMl0pT:ka35\R'/bD*=BHGTo.%$N8bJ0Zd/EOH/NRg81AeBKiPD17!:+Slj>AdF5rugi%RGrbNL^Y/P^DbXg;F8*HEfask.!3Jc4$&d?P=D#mDB>NO%/&P/lb[^1Yq;@]]i9XPQe--&GoM^sQ`Uei/Fs86G+QfD59F:[$SE_!%0^BIq4a-Lg2"OFmS&ptEkdX205?cQFMj&oE;+F@m.5aiK)^dH:X3r0>OSe,S>@^t:`U(dlLZa9AilhWVqe2k<rHs,3okd_Ii\+ij%[8n%%]XAt\'/csqMs-fAHDg/@D2;)4kQWR/F<*:SaN^V^K66>,DUKO`.(=,!+1H0TmIs^j)<'[A-YeZ"`.g,*?(rroAVDKL0oX6t%;&!hU/I*<O[>\JIgbr\P1":i.7Jn,ae2YFubt0bu6aq6&mPIYkrP@9Edid)C=EL4pK@f*3)ah[I;D\t2_!=dD^-h$@9IQ$so+R62%RbhU5:W:DFjuG$3jC+RrR!IjS@H%]%S-&H.kqm+E.E:N!\;,h_l^+0Qj`lK+N?=4T@(gA7+qb"Mlc$EB$%RihZMlJfFZFg5rQZZS%7NF_^`FU2>$c<a7+F`!s3_&[PiNdP51B>=Y6AoM+]bl0dp956B'WtrQAS'\*X@*;ZY9loW(@d1f"]TaMPVhlA6F%p\i>mI]-f$2Y%IW4$QK^-X8"YIXUGZfipQYDPAS@U;`D8BcVC$4A<(\fj#GM"q7*,Bia)oPd5g"WUdb7#nS7"t/cT->RUjYH%3&pi-o]pl2(MTk!t%gbr\@0m&&hg$?^P?eeb.Uc'lK6MJZ;\*:=1MqaT#:]&sTTeMoWZ$jUb]+[R,5CQ.61MF<XA20`\;F+$[huMGg,<Lrh[1fT7\n[8Q%7]&-_[kZB(Po\35`2#?Y"fJj:@%06#>"%*\A+XWoh`hPaer%\0%4Lb*g&O>BLp@(&.FAIi*^XnY6M=hSN(2A;EJ*ZqWco1q<]:o]%S8l$LR;L#u@cR_LRXUL1@troj1!@`sk^Ig5(>ZE,1&J9Kkpo*s/A3@.4NF0_*g.hS^)9sM1nS#rjl"JC)_4'^&7/ro,)pcm+j`O8%H58FM6)K[t=MmUO1WulF&;(Y-T_l-^46Vt6`pCUeVsV5MnqGOWMD\p-(G-3L7I63GC(N,q+H=\Aa-)(_AXNh$5F*;[7#2Epjkqth%,nU5BfNAPonq*K8Nr;`26niMY[AXRfPgd+$%r3r;;`#J"YHE?bLj`P/,j[Jh6C\@2]uW8&4KB<>CF-gP%]YO6;"^=u6?2bc^_h:\%3$B+<&>t%N1S$GKe9Z*p/:7/($Gnd\h]2D(\]m@CN7-!:H:C."iW17G@j+=S)@[:(H]^;)9[6?YRj`*h2PU^X)FdGWS!(8@JeYu#%H!,mW0;m3l>$=]kT;Fb3&/laJ/7^MC=mJ+qOL\m]J7!pj!+^3VodM0Cfh=f[o!5$n-WMf.fCc4'7$0NNK,&OV*Ac7T]:,'H+WY<t%D)uTcEVhN`i?d__U\f*JTolm^#Bldh3fq18.llWckZQA;e(u6]_1^H4VUKmt;O),So+5Kucj_a\b]@9pVW!4IEkf8)Mp*&H]KXSf%=Gj?sAG-B`7hT#LC^Aj8A22'j)4ff(G(Gqr#fCidRlo6j6.6&(qeRku:e;W`U!aQ8P8G+eK.V4=RK*Sl2NDD7]==@h4^IqjQG8#6%rt:^eYVBDQaubDgL4Np@Z,]/K?=]6)lkCcjEuX,WWf8g7Ug5,`VhLL#N*@.!q^5Y%/P\h]7!769cOc%>=tQbNq;V$\hnte4jPZ,4%eM5m]Sfm_s5Xs2Q7S"PW-tOgI/\ASK87#NM#\AEm7u&5+iH[H!(+"_Zh-A6CSeDTp[3$"j\mJdM7CUfSgqM![n<b>IOU8foj):8"%Z?%/`%?32U!7bH#Ep)7<la(9m[R%B73A>d#d38:F$,`7eL.nTWSKJP61g>&W_dYsie.ufGrUS)_\o#;pp1<L+.tb4j(?Q$[Coa0=%0Hg`0csU3&cC;m>ergqg3!d8AZ8&l@giQ)0kKW/KG!M:LTc:rK%d%3?D.m3U0@c`mjgCS"cA'I.gXa,h3!2HiW/#ni2o(E[O^+%0%%M*2]@0N/a"'ak42F!SENNP7;itftgFN0J)/e_&I*2LqH9P;K9`C5_W4d7O4!Z\#i//hH21&3NeiNp?I43sinDFc[=kM2uE:CFKP%>`dQ5b9seBGl+KUrc<00)`AoRNSB%YVN.0K_"uF7N`eZP5k5E."drk!Q.pE(W5\,@bU8/GC8l9L*-&i-:sKA&Vuok-!WojU]tQ?L%5<7e:Q9s+!dRAkQJP>(ZX?8n53c]hrJ^t57@tmkcL]qrW-Zm+nC7B)[Ydf*!qCn6E3a(hG,7N]MG`]>b)LDdN*pd2\@`MSiQt.8g%6psZf6FC7^-4AOM@l*_<$,o^O1-!Bs_c:@X?Do%AbNicuBbm-8_:"*7.5<?7`@16@C*_C37Vf/`QA;P'JU2TF.&GP=+nAfHm4@e#%6>c=p*iqIlOVkXFL1dO*djDD5;(58;62/R'[ck.#MqaSl%o3DDYfs.=Us*<]pc1Sb`*qs7<u$qDOnDU)[Q\,F3tL.@]MGfaK<CmF%=$*p/aJ@ZG&#-rdS4ek]MTfOdF]&[[?XC?5[r#7&^2/5O\=e;7^;k9.c\u6m6!f[-fn>>g;9G4Q%;Z0!?:>d.>6pOm431<,M>H;p%&W5(h'1?D1``Xj!.#htQ,Gn"am[%!ld;AguZS+B^-=I&Un25qJ1U>Pa__+n$$ZC2j%HcK*\AP=eJn'_@L"rkDh7j_YA500=1Dr3k%`*o%N.]R]07_"-f\PAS:pWMf3fO5.*I9ZG&nNq<:fHUSKAFB=*OI[a!ag>_X5m_Qs]!#5_c(UR/I*aVCjC#D-b1(usTcGY,HB&_T%!QRR%,!'Tk[]-.tNn&oM:QmCD[_((G)26\<#F:aEJ-&Nkb._u[q4kZ93?ZOq"n'3Od%Runo=d+=%uh3=k+!9o*Rs&_QrP`]iIr1l%^RT2"C`BUGIG4L=JW.)TD.:Z=4@Lb_*%8F01)u$t=uPNZ70+NJ@C7dW=s;(A3G4orFYW\XCjmG"?lQc+_2;-N+l$(>iGZgBh(P\"%-ei6,DI3VJK6rV8qn7[,XDe]E-:?rB!G_qFAID+$il9paZXF4bgc-EAP8+otS^pZl]Ja4CFlW`7U0Tl;"?30)#W5/V3D?nNk)D-.%?ZnWC>gNRN.t[JL)Q+"OG$rj0>#A4UfeoR=aYu&6BNg+26ME"9Me5-9i:Ud;Jn&hBO@d,m*phV3c>srY&)'Z6#ZA-TMf.:R\:*',%&9!MsmE-UkoW^1OfmsG=Sn'_a`5bZP2M6<bmeMP((YZ:?JeS\UeGWc%kN94G.92.@OIeGP%DLJQd#pG`qrP3VFPAM0p1<R-XFj[b%JPAEA\lYXQC2N<HQP,M`mjS!lnqaTlmL$48m=Oih%oeq7@E6chJh/6?a3?o<+d"/'XX(hoL2\4e@9]Zr-Ie9LFGC1YWapKZqD9;S%>S1-:"47`"UiE'kRB;HE:kMH(OL^1A,"Cr0\ue%%UQHPPL"=H3jL-e,CP+Rg=sfgaG/*P]Cs`-$qJA!+gZ8'>n&'=P+e=9V2,&*q%qflP#"\[s5LPC@SEtb!i^pnkZeZ+0XE^9tnA1dV'cll8P<SeLtM+j$mE+2P=nat\>i/O_D4,FW]?X'd0[1/Rp5#$ENBaX.(7gkSI%CuWbg(l+D,659Tn75,O$F3J_APunlP4a:QWmjT5&E]\QW\N(_`cuYNUd5.Z$$rUYm7"C`C+aRVlb:C+P[kXB4Qdq.X$+KZRd_d:D%r&IUoi9@?rE+uWl2H$\f2n)ZP]f9gX)d)H>;ecMR3&itCAD:%S.!L[HI;i^_^2h@Sm!]sYDTZh@k4iN^dfh!hlS*,c_5jtX"S2h[%4:eV%g7mk`%]rf8`[.sjM#fPn\7?X-(JV0_ZB!1a9\fU;?p\FZnb0W$<\X4[%D#nAX[T[@?d-6#Hs3n3Aim>+Npu#^F+@?S2*/@[%A#mE)M$tIqM/M_MA'iJoJW;0LLOoS$cIgo77&_$g_/ds&c&L?+LJUE=k1"6HD$(QS%mut@kn%[Nkr0BB9b!&YgL/%<UJVeCFcA'n%]&=6mB!&<cUk*B6EES<>ep,uo2I\ErEeE!s2@Z4HbSj*'[R6uZ(/A>]/\5f8iq?sJe""=IcRaU`Z:e4ac_60@B',pt_QbPUklPLE%B\g<pN3`^<!4Ver)0lqc*&hK8D=g<(3k65#oGBe='=hJ*L6Kba2gKgSr#CV4,(jaZ),,[)4XaqYp9;]@imSX"W6W=`8T!uR+aj_j%3'^Fkf2eT7fg8BprGibC+AfOqZbg;j#=p4_6MJ[&[ct4$MqaSl:N$ar![o/h8(!"hk5^u@^M<;-PUqP:>"P1$Q,O=4IL'Vfq4N<q%:D4]`Ws+n^Na1L-H&)<@bZIcR,qj=+pWKPuk`u7=gS^_ULN6]=%s>!\8Sd=%XD&o0`%2GSoW[28r"G1;*ip$;dkSKe&Us^R<RGY.%Gtn`%Go5_K%O[h-KKAn6s*+#B_76>lU2ng%Vbd12Sd0/L:`UW@G=GsV]nPEc$cT^09W8<l_#EL(j=VP<"E$,&)CW\=C!b=+N^K:o%!D=+r/M)^`/\W$n^R0rb^VuAE+dGQg4Pd;S1&J?Gl"Mtb(1N[>W(Z"C1cD5UW.FS!%)M`s0jPq`6qp<*_W[t0MbuU7NMnr[\$6WX%([kKMqn7tVU-\WLVIGJ/>@cMQNI3ilia(X;%3PJK0^_c5mEe(Uh$6#(nT`'%5-D]D4Eo@,c6Jnr!H`Fn\`YiNA%+0+I(p.*<tO)q%F#.>ic$i8Cm!]s)DTZh=k4iN[dj7s]ga8f5&]gcM>RrN/o72Sg<P:5f"H?J']C`mEqLif.K_@^n+G1c+`N1sR%on%q:N2ud[UW?W%Y9+:C#-#hGgS49T(pbkgT8qbfK^_p*K0!m+IMO91U((*l(cenli=Ne9)2d5p>&!u,U$o(u4qWITUD2GA0S(fFj5.1MRd>&,HT\k:%`E;Z="YG7%n$./$WW-N"D9tY]DaB/DWntgJ`^`6@<oF4]kdqW>a_3qpMMp2&F!>'*=q[[uW@DB#Ms'.5b2^!gTs,QCK/Y/9`(XL/%+ns/o[Ag%cPLGkH:Tj4;57<C),MeuW3"IP`[[m[mX_rlpoKm)mZgpNBUIJb)gcQ=gOOM%f+^G2S*/=;,m)h4HTm[tc^+F=/BZbkj%jCh6S`TGXZ#ENdh/.9'`L8%ZuIQkOQ=#0Y1C%$=H5,mc5;:&LK":(V)"p2k/(#Jb+niEFD4Mug8G.:\KE@`S03.V:i0<^b<gZk!Q%\!7Jb"m*cB?d`np/=90CXJ1&h@"<qSbaT(2O(FB.L,c#C5fT[9=8Up_&^',n_tp2ESMqpl>U!?obF8dXR9#5\BtcQTg%Xtud$.%+%n$p!g[D7A,&lREL"iWR5P=CTAp;TC!:N6Y4K&DFX7#86_(UV:s![^R\&1O^'?f$\I\tQs.ZmAH-IVjKke^Sk!qD@Of1G`.#KKM\(%3V`Ec1-5*V8JDSq'jYl,X&cd$OQL-bqTLj#Pf):A%pg<W?'@<42H\FTo0QtWmtXGd<2=6jaL:r'f4j@,-B0UE.Q]9u1f+*25kJs<%ju:VWpBp,aaW"f9iRt6R&9Hc2O0RTSH;-?%%@PH;jh[adq2Q=B'%'(\6lKO(6ITb7/c@W3:HP36pW+rtm5f5XA),@ja3Y8Z%bBFW%.&mfRTk5L1L,7CIn-u&JBfi8^25/ot(1QiVgql\M3mK^AR,Xt4moo8%1g1U:%cd(ng!emaV7#hFU:N.4TRT]fYYus%/a3/p_I)Ac%3J)NP-\@Ndr6t2/MWh_*4XZ"]SrPU#2A:lNEh'^%,+Uh`m[)C;;(^$/Vbd122J&hiT\3dn^sf94?l+-sbJR,E-4(Ek\O'r>b+-P0%+HT*:TU^fsQ+S4*@Q-:f8CF'kJQ3\)*%,jlmb,c>";*ml/&MkAam%QoVrU3'$T,WeV$@hJ,+LV&VXS2P5UXQiaU'FQd[lB@KJ]+*%ZZ3ILbM&670jBIU`'B)Hgm!+ckSTTE+jqJJ3E:-BgT&6[_pG<O#UH=Slcrb]IlrMj*(@[EBrrfO.SpX"Z`./d%RQDk/1g^]&%^KJ%jCNC:d,%oq@)9gdj+bYojj0LI$#*"cBt*?>@E.]Xeq]$5(c7Q6_g3(#k7nLC6n-8WY@qCk1FNXeiO;*1+t[PALhMXT/@JW%A8$=b%!A'/^L.j"MDQoh*NBBSKc'h$]Tn_>UYM18U(+a')Q9Nn\MOhkn-jUKhBSDHnLf,m#$Og=ICM="kaq.R-&2+=0;FD2Zk36Ef\JUR<%QoW)qb/aZ)-kbI+i=Q#4e0$>b1mM9ehCR^\Aa/6GC-W>1j_E\XD>O&./"L&V]'"nP0h]/"5d@AprdO1;X.2";qS:+o0ldg/g+BCW%"lU6]m?n]W2J:r4,oU/89eB.Pb'RHmO\^=O'TQi#`e7T%-5i@^6U*[uKjJsgW6,=?CKWS`Yk`0MAXPXqlEJcjP=$`pa/'LUNh)d)%"K+U?LHpL[Qe0F.:$ib+0.S-Y,LgUDe/f;Qf/:0hD(q^W"M78:D/7d9>:e(hfg.ROG/Zi[UShTn$.$j`Pc@)0L^"bFZTdrX:dXpB%<6j^?$-MVXdYC>FIA^+18*S28B,AAj,5,(26tlMMEb>e4oK^&]5su$ck9_HXU(\4#N?'%N-?2,]\S]E`@d""HDLKm_Df]\tIGIOR%k^IgE(>ZE-EVm'7miN$ccum^1#t&/io7dU\;!!]!Ffa'rcYkK(N>?`ZTilp4dU6/o#>LUtGa-AQ9G.R^.&#\Zk#.<]j!>R^^U?%a%`gNK)5&GVW,=MtpbH<7:_=!tPl6XMQYM(lL=U$:@-e"?hKUrHuUtHT/;&/jtMs'/`U3GoEC@J8FN5h,H`"Bi9W)IG/D8hdhVfbdd%Vsn+K%Kp&YpoQLa%8\fH2K<DcF$6878UI4,<%E(@."L5OFs8Dr#3sXuZe-hIKONNM&<.fZ;9&se&DA;P&<'gC/ZPZ@iq-s?F1&j$%<Y(TuJp8$q62CGRQMJ/"rAj<GUF`6l.dOlE`(C579g,+Z!k!@DEeoS%OW,;0'6n*m)uA].)PRBFVeV.6)l:cmm<j.O#4c,RKbG!m%^$qI1?pjCSa;PY=L)o=8#q-Osnstm?G\CJ>5,d,,mpNO79%7:(+hk4XpL]'b0rIC/5rrn`[HP'iMq=;X:CGF_h#bM21q_cbaFaXR%*DtT(5'J&^$\!Z#5uaQ.mN@Ls\lceld31B-Ok6)WL.nTWSKMCAd6H3%P79WH(3uk`@Hc9[dQ&6n[r5ImGI-ie1>-tQoUrSl5mK<V%\O4,.L-?#^Ph=)+UJ4[.&-HOk;m:Yr0min1[NQ".TbD7pLbl,OEC5%#D`>.)K64%@\&bu]MqOGn:OBRLh+a;&O`UbI(b4b/MN*>N%\TR?W/$!+mQ.Wfq+uc!qC<)uAKiX*\*NV/p&i"?88R(t8?:fQh?DKluDk!1I\ul"lp1`YRW/_irkJWE#KJmFfjGC`PG$.sWAjZVl%R6b&U<6VAf$aToV/[@@UVF6h^p>g<(*G2$YH0'a'\pPO9N4@\aMDgDnP*_2ucl8q]^28<k8ja(@_kU&X)[.C6%M2ieGY\P7i)l*N%N<DSOKR0JaI6u!e@jA^:cs[F7@T89?L.j(OH;L1HkVfo$I;V0C)MFeg]1(ll1N$R.5*bA&0%82,P6n/a+-5A5JsH!@lWXZp7.1-n%AS_>_J#J5:UF1Y-I<[p`0ki[d@1@:5j+L06+ZXNHgomiCUKNm"T242_ScoIKCQ/S"A,kRDKI"^`#"35R!m5bonVXZBmtO4rFMVG,%l:m%%TgD8tioV?sW^A.iR1a]HNZ67SZF0:%%D#nQ]1'2&R*<8QI5h;%@ZgqE";t=G0HF8/15fnRGp;f,q*bj(;gG-RJ/h:.@hT?@%T&]<V4@3Hr[]tjW&]Y1V1teT`BnkCrVp_C3C+H28iuZbqUo\8>HW2J)E;BUWa]nHYDum!!*,0Q^.iJ5+2GZjZ#4tXrnYF'&/sG-N%2\5.=b!@&9L]-Uc+[fOH+YV:e%,JKH\o#:Cp0m.58H>p/DKU8Hk3h=6=o8ZlA&52ENlq.o1#(#L8GD^A0>A;DMW-EtA+D[2Cj#:Y%Y['[&:0u1;ODU+s'e7t,D5s_NZMHKMl*,un#l)b,V_^9o^eh<gZEPa!7^kAL0*Y>=AY7&g@=oln2AIarB#hsn?/ofCL5?PTp<?.j%fneK;>FZidcBN?KVRPT->5+8ILg2f.`]^6$@E_@!=DPtf"d1K-W59&n^BBY8Um-_k*7p@.!,S[OlWqhN+t?C/.E7#oq:mnVUc>.(%l'=7?*N*(d.b3<q3ph9S'HPaZo%.9ANrq]]5@ZMf.YA+5NT0$.COjENeuPB!STeG$`raa.i#jS6)F\CG,3ql_8^WDl/mTgCdWP-U%Yif^IPt+H]q*8!qhJ6p5NX3"#5ee0p#8JL/d%R7n5p%%3=a]!e@7g&i*E><^Vi@W7*O_Vu>SG.+C=&RdB8B<sVUVF4[OA%Ll^k-?%+[?_86?qpTKd7Xm&loh6dUf3X%O+p0il$/f\?7Reea6n87k!Dp.6*G0C_gKsFP+Ikr%d,h&aD9^lD5AMED*,sj\.C(T>j$Jk:ddB%3u#'M(`K$Q6-R]SN!FPTDtsF-lTO]'X/>>7Ec^.eFZ:jm3$.a#jWG4ninkfqNm.)]nZ(@SOTqf/WL9O97SRJ:Aj2Jg$,;39_R$CG%5:7cg3chph&DTS8@U9heKs50*kiTsE9:hng.G9oSLFCXZcP_Ns`0Z@KgsA?ek!Q.7.WoLhkfa1Mlnn@VZ.)VLFKiFeS"9S(/8G2A%ga%]kUb-1J<%#p**2#5%$o6R*nFs^s[.l2fKUGVl&<F!emF^@JXu%NL!50d8Kbi'6H857QmGZec!+t.H)lE8MH`e%+kY2F5Bc8)b%-Y2NP837YAkiP^MA9VS*`[LLfjrk)N8.RJR^bM%.Ja^\'1e;1Qh&P7Z?nqP_oZ7bsT$iSK7:(H,XPiA/A3R>oN9i!\+HEgJ-5C+e%d&uF@*6B-T4\mh$(<(;JgQ2`\:_0k[V!!JsXVSTH6SNQH[`H*a`pCms-We`(FW2YuU$]+qOq+k'q\_IJ#OP";&Zn/0X$sX_)oa'*%BX#_Am=S;X,7]G9lI1s(6$WRdls2I$0a%>@Y[KG7WjjLe.@]@ad8)i+e=4E+*58Ggip$c7CXS@[=4c<j-jG;sF+J@@f>S&1JW&*e%)u?9rH(B>'o+6UZ71KF%KYHWhro31(C62&Yg+BmI_IE4QkgTE-jUAt(<k/bmTrh]bGX_URW1qe0L58QIRJ4o&%4B(":_`G/q=m[>%ps!n7gB_BE5fJ=tE7h5plB`!N+t%KIS8+(%)6gZ")Z'5?_,%4"^/do#k7c*Ame27m-pp\:;UI[gMp@cJnHD]DO1'40VI.QKnI-FK%V/9"ITRk8%0'h?=+kX$p8XkU/EgngEIMr)`6?u\G$X*Y`OL0/1#?)M=^b\ehTICRcQVFD4)J_VtLNYe49buiu.62`e#?8*:`<g]u%LcT-]LP*jAPA--$S@U_lD8B]T@Hk\)61[f4o:]KIH4_.<d_FuMbBc09TaM0!&HT[Y:(r<-,.8YiV&XSr$&*D=gQ5"Gcj_>'9k[/2%\Y5iFg@%###%?`HDUE;?(:Pr$+1%3ZoF.4&[-Ga]&-)6X1)NFVGjpB=L-<4cWd_<=_@*tuoMorn.H)uI*umF5fc9D,Q8JVkF%kk?%4(P8RS3++MPhVYOn\ae8C&mI04QH07c;kCiUEMAO#j8!]L;qjV(4-7O[=u`@DB0bHLnBo5]@&(IN?p_5I@r,Xi>G,G1\XhT@5`?[%kpa(rMrBHANtXG>9<4<nlHq)h*%3m8!P4HZKb@e%b=GcW58CIqZg'bn\r=AQmGR-#*j+d[6W&iV`V71ZeKf81hgu<L?\aB*EZ;;E%I[U*J&qk1j=am=oNLo!r",o3?""Luf87Bj2'31.ifc?l"'/J1kK<DNmZ/asi9%BUKCrg8WDpJlh"[Y8G)Pk>9VKRl8gT\29g%oe/%75P@0.UIr'e,/D4N#1:GW$.E#hBH,dAV;r"D.)I`$/q8-X?`)an8sAh$BCU2Ej3>.&$h,@afVhEk9769ld%p[U[pA\[kCr-**kjj%OXrWPfm93L/rs9uPrFeUHtakn,i"n;=Z1P$1P,Fg,4=pib:b(#:XT?W(jUeo0Q(;m_83Y##tpVP]#>P+^RS&WB^%YtI9H=6WZ\6$%BG2"H>d4Np#GYn)!"'t'"b&np&jWa?Ad<%3G.!Da8(X0CHuPR:8_'LR9^)$0\Y4$UY!ALVK66>,cI$LH(:OfY+'o]35G8knTa2I@%2\57A#nTKJ;f2.lkU7t"JDf])q=-"Ja\a43(r"5=aWjB(V&`[[kg?du7J'F@?Ci>7bA"A`[cY`sbJ'k^C*q6s8rdaoH!>cKZHETf%)'1=7"6`(3*:Aji^5!0^4`bA.3B^ZI_)(ZgA_I=\`7e46gh,(KApB1YFMCT$PjU4j\U>Fnn>;ij+6/B+dlZ3=e:[6NU=q&nXe+]m%09/0cgp,[2%[(00[pP8kJtB,ZK>GNC+XU+m/e%\34=?@FWi&7;m[)OAd<VMX(LeTg5.h!FBNia<?Mg?*YWuJZKpNO);F6HFg*:<_%kQrEt!e'ok53S)Rb8B!YbsV1*H4ZXKOl5W:iD*;]M-d2JpWI@8kb\fIgR#$<rL?[rL&KkJ;%^1kj8nD#CaSPYA48U*3`lLLX;J;e%FB9BqG_>/"LAW3LK:.KC<(Chf\\!li*#IQ=nhLYX]qF'ah6t+dI9HDKR2OWE4G=pOVQ2Z&JS<K]):+'7AKGYi,FkSgqoTnJ(b6l,%)\6.S4%dHeeo5ZbR#:%a%;'HHEA5>1OeHMbZsi^p:i]KP@lDA'X.K`G&+lP_?rG$gLipBOPhFUijXO+Q*(Z"sN^SM@gb2G+"h%89%(*4o#<NgL`E_+_ZOGA/!(#*>RqhC3F3(*,#;ef/i`Jr?%FoS,'G@;m=K#c@(Z^A4Q./4E+aKi4TU%"1EIh@OjQm"X:k&Lu5'(BuP%DfkTp(1K$ZE+81?cElS@L%s.u&!7(@$K.r<VHX6UDI8,^FV2rgT_TD4LG`b;liUd9i*U:bN%4-AW\i_^mI/D(isCR2W2Nu=H0a^h%7dFl.*hlUS]"u56BoX-A*-+'8)K`a,G)OZ#@,/J4I<=Ch3!&M?b-%17]a#l30D0mhe-[<YQK5n.(gr%ThA:?NM7UdOQ':deNYe;G%KIGH,:(3\M_V9&t9LCk[:<80iIZA;MZ+,3!qr%<D>jmOsn95Ym3j=PF)N[#D\7Vd9+RF@12fcZ`jU6B[WnKu4S/ak@3mKFT<MA=C%k(Ggsk/Acg^RS&_AuWJrHlD`9gS/a!Nuj7^^U0'=##W*piGWBQbiYP-?Y,c\p(B\_l%6:(.GGG]3n]X7b1k\kA5[QKJS]nm[:5hL%_nB[m?Do%AbNUpa[K2<:\"QUBD/iPbLF\k"ZP:j-&@@05.mWrbaUP@0&_g:u5(3,,1^#NfM!)SOZ)M]3<Y%q=RIYIT_?M!hRhMMR%;=J2@S&kQ^>&>a%NH+g%n'Qh*e0W7>nr.OiT25+=cN#Nce&7rEp%\^504Y=8PK(ljT6+.EQ#Xji@l_h='9@>9m%,A@faoXk,o_$B%%M^q!2e@%-1A^G]'=sCJWg>OS[;I_4SD]+n*gBFNj&h%O)gPI48ekLlF[<</B38kf(tS)Q0kA;i5[q!<%a-H0B]S4gd1bm]B[H_K%MCglm5+2AcbbmE$g]]JESZ.k-`F`O6c_L>86'/PS4^`Jg>'Qu&YRq"qak'i0.X4/0%:eq]Le5KSYqX[$7ObsgM4L:O(p`3s"T?>>%VhmC8NR,(N:YFg-!Vp>CQcp,k6?(a3BD'f7.jM,pNb5qF%NE1a%Om^gdE#1EFhB&bolh&o@hs`j_MW=3a[?iHbmQ9,"`L7nP@c:+%R=(CnP]m7SIFdc=?J5#:^`ii+$80R**2R=SKhEI0g?W5m2tN:i>Nfn'Lf.$rF)hQJkr?Rkf7>0.j4(J']p%&\-$uQ?U0=!=:7q5C%Hl1LRC0tO1f4"U$`fPk*djB72Q0#n\MSFrWJ?7W'K]MKW4_)(_5rVUOCE2+fA3r$#K;B(n0t@a8ND#%+K2h-cDUCJNN7k,&:Y-b'%Q,Q(^aM#&,dLJpon%qd&>N,r%d#8B%T7d$QQ@[>'-@2,\=-/?$6RY[L/PKLDp3)s&$ELWfc2MU)-`YRgEEX<R:YVIUR*+F+ZZa7[%N`Dhj"E,dEhQ^c6NbGp;`ic#.>:m1F%FIeBEZ-U&lEZF!S's\tSCK5l9MWm7Ts-PN,q7.>>FluT\$T=<;t7ij_mlVfNaWS6VV@IT%npZ0,'$('<h!/,[7aVSL2UbjVc(TcXqjT4\QDi+%6b+46[%R_lYo\4/kcFb,eKC,<[<$HEL;iPteu,6,#`ON1!nA,][5!'!BS6I5%GHTe9cAK].bV%E$6X"s%ia&mcPNBM6=ClPXckNKI2otD/NZ5l`jA/P9K^P2UcI4AON7k,&:YSs@'#MTi!(6%^HTf0cm/]Q,qUKko%_&5jL#Rj]2CC[uL6s[1_Jtp9,cq]<*)VT,T@3*>[B/H9$6iR!SVd.,!G\af;SL'3SQcW#n*r2NDCT*uX7-m&,GYG"kUj4iS3?cu\%qd^`p(f7ge4b[F+[IeR+i>7NDLN;`>EaoQ(0qK9"`R+e'#rUpqH0#g42o3"P>5C)UU)5=;$n3;L?i-4:XPl8O.*(*W.]ekb1<(,'%@8'3RMP@;U-U[<X()L?%4>\nAgL8ZDeFBP0Np)6hKC5(-c-]5f(:-duT3J6^B)]$RS/.$'(eWUud#OVA=:bOV1g,_NNU&>-ekQK'%J-Jg'8V]0*O!BS;L/]QjHE?FF[$c%NQgKQ)K@K?DQ!8@eX?PC=S<j/,m]Kf$;-#UY%Gl3"S1npkB+NOoOeZ'+qOuH>`IfUKc!;hM%J2sVL2+))_g5q0@OW2N2V#X;'Z40Bm.\'1bXM([6[ckA(`pLsrVsF/=7TiEXB?t`:XDf:?QtWWWfR=5"R-Ye3WYO%l)7sj</I:IY%OX*6]j/0^>TZQWAbsNgXLDh"Lb)8l)gfQMH2(s)=\=R']:!hQI\c'@qLY!lJm3)R"i)/!-oaX?s?Ck9h$;tl.n`fgIZ7bGNJS0q@%2?t*^6Pj6u(,H2p9RINqX+aX#Ri+?"j,durrUQs_ZGS)%p1<Ds=U(*)$?i[=/uqY.ci@,bCG7$g[0,GH9OJHg[ZOcE3lk+S%^PC:%H_>Xr$Sn\^<5Chc^Z8%q\Y4d2?.E/Z5odMEgP"==c1&p5Vj`A2qd:dOE2(aI(C/o6!IrF;<6.PBMg@c.*O$+B4[3%u@oHsgUFqRh%""4Sq**/17mhd@a+EZVk]L[-:3NB(P@W\"2YQmY,4cM$\0OACjfEkjnAKr/,k_6uK");!S6:6\$:It2S\1:6hcb&FP*S)]'S"#0]%<JO<\mO).e4ZBVcKg!(JKC5)XcI#?*(:Pr$T2*pp/aB%F_=@*t#1S/',j0E`I9:2-&F.uEG=":VFuUX@3lYqUbT)eqqg2^^Y`.4H%'n=&ZlQn$$^V"$FC27ah^9%5;\JAm56Cm(IBdHtW'TGXrqs,cuNXISKCm'CKEu'aB(m?$QcC[m![$SeemMTod6sIsU7dC[s%'f&d%%D&HJ_^t1alF8:VKp1J^eP@It&Calc,!hE=Ilt^Pj='POC<=\(7%uA?Xb]re>1eXs#DaZQ8(B4TD/W/g0mQr`^bC-Q=_j]K-hOXS%R[7Xmj=RJLe^AhbqR#^*ej[WXa=I:hQ.d"*r&HbM@`pr;3Y;+$Q&SMF1Y2c^67#n!CEt/j)&D*p/fRVQ*4(a`$FVS,UgKQ<]*(iY%*E6"+7H4e!QVWO2%Ruf)h9#X5/M-NlaFU:K<].S3W^C=@>`h$;bUH^$p($:[)GW%o,8S>C+XU)WDQoJ1FH[U-$dbTOA/_2&X_ZJ0%:pRteAbL!(;tM(#Zl.O.&AlEbapDD@4`rJd\`d(hk0aOgk;a^\MlpFG,bq+p*m>+M6?V>l&`=G^NYb=\O)Tn3#iTi/[7.P60OEX[%5.iTb9mg&*"/WahDI[0IR)_*W^=AO:!KX<T/.*+TYqXR"7".3u+N9#DW>Omf),7oB@FU#MF%S?[L325/Kc,JN9;P)=9JK;7`]]T&%OKBmC)`_E(Mse0175Uu5D+,R1d6l(Eeo7E=UEpW[iFXX7\R@S`Y[XD\R3>3K"tiS[BA<tM<e+]iN_\YemakLad4Lh'ZVN*Dl8Bcn%K40`O=-P8jYTOq=.OlW1>\u8F7c))-Jd<6nj:fm$$G!/a`+[NYP80)oRt[dlXkI.oC4IKXFn<EhF9O>A&<'g3/ZPZ?iq-[5;jnV>%rR.0h<0O%ZC(!D3PO/'`26@N.H68it-n_n\#.72oPJu6`Tq+W+$*SKtBd"f6iuHV][,O((DQjR'c]J%cZs$GS)WUI(hm7[A1CS,H%L4;rL,</lm_)IpmA!OM?87K*d7+=S0fY#[326NUDdmB@Ig0l#NL>rF"_%jUF6d1t$=tM5%\T.JQmiQ**Fj9p+:egIB:iO-";_LO.%e756b)/Xp8F*NMtjU4^q3safY?r\Dkcs\8ikM(t?8:S3<-HBZsl9lS%H$WE09t5&n%)8lmHqmUF^k>]=,0kbN%>LnRcUG*s[s2Re%`a1qE1,F]372?om=6m]I6^0X(OFg=F$i3sF2jn3?qO4ip_sGF3qJFAd`a\^SmUI<uYb)2fE1puQg'q)i'4;k*4Sdh2Z5Sjl;;Eed%%9^UDMb[8Bf;pBoj0g(o3cbi[fSfGd?JJB+KmT4>eKC&jg2/l`f];a?lVi`^o2Upo,g0<</agJp6LC<8O^"<3Pfh-pJj_Y@-3B5J%%`rs:2\eGF]mEKfRIYIT`,\4ff?L9N&@+?B'=hIS.o/%)R@HJ.HePj""XUgt)9).1C%>(dce$#T?#3;f>iqE0</0C,jQ<rn\QO,U%K4+hQdm@6*_\P)9RbqT(iN2EQS09r=P]B_rn\sasmO<N.fk6,8!H=b4GYD^#FDLq4RU0[l<YJg:`;5r:5o<$[+AqW-`NhK^VhLL#%N,r)e>cm%NZkejhB?:$l=tM4:NH+g%n+kg-diMAI'4!WchID.7K8+X2&@I`^gn^:m9/*kb6$e#(O5c?UB\'fY2Be9a6T:AM8*m`_%=?E;sUdM&'Mp<8RgqITQ9"opJ2!VMW>YK#pYhH,D)@Kg67?NON/g0u,;0F-SL1@4HGZ+3BANCU)Ki"A$1CT0np8"0VeGE]&cO_+0%=tQbNq;V$\hc'P%'_GhiiJ(Wl[Vo=dH83U,B8cN$<oQQ;Qm2+h\uJ-YA^5=VfA#4TPu/("AB/C/-;VZ"L0uBs.NPE1gJjS-S301,%Qd]\H/^5Z@0DcfW@>$BlQ/Ih!=0ciJ)m-kW"9L_,a'blE'VfJ\Jh'qpg;)MuXGP;pf;>.&7HEIEE'kt?K0>[24gSY>-**Z4%5ZC1%a[LJWBH4dhI`aF(/2GL+n5lZZA@=/p2TaaG4)QS,ZN1bT/VKLiYRmUW+jcT,j!I,&?_5\(ZON<r*P0(=LZ5jQRo=qUC'[:Hh%lD7%b'8?'q<5cb[KEal,i-H\BT;9c7a;/&eRCGK=RlK<K$99[(gY5m5Ag7m9T70h*'HdE2L;*#"6CLe/4n(?E0:[B?\aZ2En`AFIG+O;%VFFGaqfq&*Q7Ws.83!j6`kT8#)3V.c/0#$hl@=1D+Co%g\800W%M!@LHf*TuA5[R6#3A6Yhi:pL6`?20+]Qrog2/lhQu`)4oq+YJ%o8@8CSIrbsni%95O"UmBn#X&%/6l@s""-QE1J`rI?uWa;lZ\T7]OW;ka3e<BS"gdWE4_#uT$7jI"rJoRA5CFt"ADHY\ZFI(^[6Jp%;BoDZI>!U$(7S71"&[r8ZES8.blUh<(,&C<$k!OX7F?WApN4c%Tl$CS7SK\>ggFWa36)FfM0MilW'M93Q!8@e/E?G8l#T;&W5n[Y%-i!96<n'A<Pl&*ib`!j?2:<87`RTRc+e,S28p/Q"1Cr1+U^(m!P*O"-it]l`e<'RhF`V*BK#R*"dYF)<ZVXcO3P@ic^N`TK/h$XN%.e<3[!D+]sBpIg$K"Xgn]GV6cMB^dAi3a_lM4km,6*%#=afWI%>J*d"0QO/$W4)\`f9`%(?,]rPOf8UgL!sF6nI;5bL\q>g(RmNF%,:QOQ1E_N_lP#C&&$aB\.IO/RI#nT2M3pOK\A=.#8"LNkTL=qZBoigqROpR=PB$ITo<Ed%[SGOMM=)CTO<'3l=_=]n"K&G'1jXad%HI's0XLIOM-M*tI[hd*APk&($h:W2QA<JrrJI*L$Qqn_a"F,l(Y!VmK:iOg!4#X](MuQ)(m7u7_gAK)_]?M\W)m+sbs#BC'HH&d'%--_$;=Z<Mt]6,s$0of"(Rj3=Mo,&cXa6\X,/\f65j+jMHoR8g2L7-hrTr4EHG^^_m5P@EYE!g(#M&Z(FoI4Vkjn^V<am*[l"=WOM%?pUEsi?1&57%'usd\0)6h3OPdJu2cl]?sN.KrujhG*tnWbFK3b/d38h[r1d6ZM<Z%>o/Z3i&HjO808`RZG>s&0PE8pUm:2kZL&V_%>McWgD%=DaMal,S?TG]4&Z(uM7&EWdgt7F/><,jFrCC1nVo4F"gf/)eH'=3;\!?udF9T96n<1HVS7_/GM&'=u>.KEHKb;m)3=AAk%*Ar=VO0u<QIM0MI^jIBIE+:6KC0+(CSjPQs2a`8oL(DC\=m:gCj/1V?Ckc:t5FkH0MoWL($_aNQ(?kfP<#`rMCC8!d]Ndfa&X5@X%.YD\47(G/*oA+N*\:/Dg&>e[=$$NFgm($Q6a+NfGC(Q,;m2"Nd@<)1Mor3N^>hG$K"&uI]N#aspM[_u143DkFM5i`*3Jt[F>.)3i%e5F2uN&La.Y4^3RDB>NO*P0(EDQ]QM!j</YkbK,m`S[P9MpC'bgqITQ$D^2TGdbsap)#<i*E^]5?`5E('g[r&4b#lEiogrlm\6.f%32dDNFZ%Le+^HaW*EIYYVSR.F'pTkrQY2,ohO@Q+au!Iq54*]%dP%XRU5@2sr:iN5)i+U>Kl*?!l]nh.jb<K=i@m;,&EV?W5q,on%/EaZ+*`uc<O>e)cCAYgZiKp=0Z44EQLR+NP>-g2;g\itl5TIN'?F29XO2ke7%S%00$s&$L2H?,6JelC6aA!3!#gF#+.j%Q$Z<;Z1%ZS&c*.ba4]pL_=3'ZJ6NjF0+K(=giY1&A9Dkm2j!?1sDrIHoAU#iWVJ8p[g]D!'SRMlq.gWG>9HK<V,3W9Z9(kQW9g%rN=)>5-a%%\GO8SlaS*"+=&Vi&05Gq/ZNBtB(]a!;p#7Z1+T:82>>@(nADP`+kfR!^"[D&$\7l'8@RtS2"BO62WLYQLhXu&dm?a"N\cV7I?_l6%+b<sK?RO/2N*BI;WhoONoP*4?5E?:5#(N2%Q0@^"%d_']72[f1!Qq]RC?Sh%:DE[//ED8RbS]fX2\h4Nf7T8W.$*CHf&5t=S>'V^%4*bi.TKB86e^dtcIG+@ZpkLJ7\m<H^=`klY2]?Ah,B$cGOf.eg$q\Ys\9/$"4?LVBQ!XD`-^1%nR9\MeU`qO6@hmNEOHdGH<VUad%+k31^jcu<WbCI_#_oAT:*/bNmFkNTtd#B2QMB?R4V<qCgM7@WDV/^Fq+c&j0W3%-O1@2VJ<XUX5(q;9,h.;VsAqb;'3$]DOEO;at%U0>,]<hC-k?7qn]YJsrmnD`Va1.sHuTEHksp`UCW@%[usXrH?qmFOl6&Lr,_nSU(%#c-]5K2>k`rlE'6WTDA41PG)f<68"*g5F@6%D,3IT%9bM(OmahWfGo_*FbI)r:WPpV>]9^@GN;.'P!+9!S@#%0pi=BjC-s=G7rE9RYMbckJFbfi)M3N5YsmbK10.a_5$Y0'p(Eem%,)",<*$G(XUZl&M+b.4XnhF2K,leieFCml6Mb2HYfp\D5B`emlD*oWb6T9fp)3j*#ggnT+a!oO]%,KVh\o#@Ep1<Pgfb<_!R?9hF%%Q>a_G[2k.JjNqZ;FKIfbZ':70Kmu#d`0CGoQnk=BR(TQ4@H.clG6Ye[Uu,dJsMqt;@QO';nGK]D(oj7[Q_Vun6SC-oo#Z63kP*&%/Cf@3NGPAHMc@^&ZhuI?=#h1;jQ<t'Wh>AeBQ/^dZk/FVEJFFG'"b!Ho!P`SpSK2ucm<[!.[#[[FO^<NFrL1`Yt*B79M(SZ('!ep%L=7J*FUkm-%'])EeQh?MRY^CY#7Eb5.MQ6&\X(4V+dAjjgP0]Sddr!/6KaXbH[1@E4O_GMl)ih)j"5VZQ?7i>VmN'0$RftK@s6Ae%MXac'f/1:^gnI/<bNS4CGUhK"CMCc0aWi]P*a%Uu_<-F'H#t7endN'9:9.*s2-3O[p-!dS/Yge,<dmYt*@D?`6N([BOhUOB=\PcE%'`&arEc^$o4mJo][6tLrP=$`/iuD*>3T`<[%rt]kndJB@VNmo[RP.F6I8AgXE!EW_8An@KE+V8K:ln;(YgY>.P/'=nH=8VfQ5k"Q%o<<Veon0EE4q;HOU/W/E_2@PhcOFbI,UYXP#2Lr9h4jL!(q2/&+!ZXeb/,r;3MS2td>0!-L-k&R;A6X\H1\rh(:X_"/<G]Caqdtm%is-kGTbpOZ*i%rromq;BaubUeQ/K\3gG"h.8o?t6b@LBZots:Rp;AMM,1F0Dj\5kpdSU)B=%Pscda=.IINFp4=D<3cpT(#t@4`Eb%CCBOMAm@6%JhUk).&:h$pZ@('$MZ<A,QhS??.p.&e28SF#!GCl,$1p[^!OnZB[l/K=asG8)H3Q_[op-U$D0%sC*<kT6mX3u[6<3^%elRmbL.nNUh;D\q=N:k6.8'8"%CohP[mfH(11jmZ5'LQeK71CcJ##a;^b-Vj$7eRm%<q5r+_,SX@c>U<6d:.X0TV'SW\EjMF)hQJ%l*uE^oV6Jt&>dd;QY2-J@POu#Q.+MJIG4G&Oi97$\[.,J9m%M+-7BfUf`AoCQ45*kc82aj#(i60"l.o5egOa(7oZlKVdj8YQ=p(k%"*"Wu\F%BG<IfAQ2gP#`(hGaFP&8BOo4?cW!'%XR\?A?D:=b;,*m;(-bUiC=Q%@%H3>#tqasNj6gnV@<W@DN/kW(YVnhA?t]gUt"%SC!9I$nop<Q"O8\WhoONFP?I'du2S!/WhYTi&^VQK1IN,(rP+5\.ZZ:LD\4Y/of]5#WH06STrMT6ZbQ&D.lP\cj^3?U1*9FL):uu%2k8A(h(P\^U2u&`DVqld\"-1YH];4LZfdi&W)f.N8OkH(T\CYH-1@9=a$d;h*'<[MWeO[tg$r3qMUG?+Z1cc'Z%3isAlpG)&Bu.n%N>Bo@H*TGiHFi>J8GT#nVdbG'-j0e71JW8]aA$`)&8j97,.oa7&8n-$[;>.*?$&&][<QZFO@dur)pI%2D0*US'hboNW<V03YFVHC%L)IHR>9?$MeApgYcF"6'&Vo>,?K@;<pd;$<<*W"+PhKi=r$EVk0FQ740XRUt]HQ1&(1QiVgqk8l--&S8Sa`dCH%t*-Vq%M^eek;\%qjrBj)d7pc7WGi[33YG"Z7hf_!$rDE*2k\.*25_6OX71AZKms=0oVNUXB1.o\@2`^c\s;.c-%q3,=&,@Mej?:R!m]aPXpCT3>[>;%0J]oEJ-/4PPX\6S_IcImT[9($+Xc0s*-*h?-#<M=-A,fs46Xq*6RGcfDK'"Hk..1QKWH1hW$*"gF^&D5/7\Bbks)+sR4@sm\C+0Z%!p7APVMmqj0<ML8.Q(M4@b)BNK<uJ,:RWiHkR]U-o2(F9LPd_H#M)LETps`N`QTcQkZuH4gnNOM/8hA^O(Z:d1h.:aD[6p*ADmX8%SU59S^2662fHuj9d:Haq%M"cqTVFpD/d>cHL*!+'No"HiB/8<K8!Kh6VeCcXZDm'/VBMPcLWL(`-?N9uC,,;8&o1l9/8C<3_!kBN%_BSQX)\K,QW;rGXkk83k,..4qd5+s^M:6GP9*fQYS01n1LFpf%qrMp?7*??UoP*.1@Z;He>7$B.U+Y"9%!K@8pB&emOK;1/.tZ6%%K/?KEU),a/C'eSQoO>6P'<8kt)jE!F78.SY?H7Lc2+XR4Ef8/2A^%k>IC`?1eoaBh6*/c5F(-]/%n&R2"48>rOd^@EaN\_"igOa`%Tfm%lSs)Mims],4&UeU,D,u13QaS1m84BOf#G(Nbn_?ka+24>__@CbIN9hnN0GI?G71R"3$W","_oN#pI9+P((=c)a2G`GcCsfJ1%IJ-n]@^7\(@7,r0CdtA]K@6`'g-dX?1tk>jl,Dl8[&5\01->(ib$9>V2EL3Aob!'\ZWo(g:6>XF&bGjgp(^L/-%$=dp/OnRna:VI%Bd"f6iuBCY@9I"T-T6/kZ7<s5Ekf%`S'"lDS3H=e>*n@*1KE_=>a6[gpglHfAk'9?]r42G5NMV2[X/'7H:Gh8Y<5@.;ot:EQNa<1%N\LZJN9"X.9Ono,97nh;!7]nqb"S8#mc<qId:3>QKR:&p_p4/85T;MoJ40q6's)BK_mt[/h'U'<&no]UdO/I[/Eu:6HHaf:%MX,S%QVFWH,<@$ml;&b\+KK!4FkhZ)QHepBlDO8:@9dEJ[E<4l%RYjX>fj98Oh(6Bk%u5scs6WljH(RAmDUEpB]nCN9Yc>GW!Oaa=EA;5%XQ-%pQ=[l1EXFh$AV`);2!s7c_)pN3!_4k@@L4cM`QX2>\AYFa5D%6:<"6X^g;RM,L>3b-(k/ll:nEO"0c-aIW'$$nQn/mFi#JX,%G`$V6'N'-SX%bH/hjdI=So/lD+uTl;l%M:=&$2LU+\GgU9k8a)U-N=+ie_?JXK&*-**(V1nXIi--qm,[1sebPmC49(n-WKf+Z_)T%R%"[>SL:%*_]Bj%1*$(SG!s.0hSWj/]OfYhC_rs/#'=?VJSYWN)P.57.5IYDHRdh*[d6"7AE]KC0K:.-*G:nBln)]?ndNq2NM_u9%1<gW5:\u2CPN]en4>^dp1ehgI:p#<YXQcp>itL`j"(RkcJo2SK[<;(,Gj3cP_/NluD50$NZp_[h-q?iCZLsq$ZGBI0:Uk8p$pUim%qr^p/Ee*[3Za:gg*sZqq@SC]PCbs<2_HeO(:U8/[EQJ)FgG8Vl(Y0.(EH#rSMS!47$CCIYhi&-GKZp_RDB^9B.CH+?ieu9`FUoFu%!T,J(&!q[9R<`obM^[Nqhrs=Ho_&YQ#4f2HO':k%:ZTO"g?U_t3m4mW7M@Lr*4N0u>7&=ui="jUS08ka3c1U.MXgMHm4lFiB:\#Q%e@g\D'9=#em>)YpK[AJJ:q2mBDpYU,8fM!S3]^6\@nY%bbTW3b,8Gl951%Nm/7Z@!h$]d8jTMQ'#G#&V\:%QWe@9<sj`Gle(JF6<%=@IZNONbQspn2V$_f08dPQmeCfVMGJ'.Q+VZ&kcd3=lPH@>;o%MCqP^&M>8<TC/KmEke,:Nloj0:>a&S"_o4FL]&B"q3;2W`X0Lb%Pp1P>l.ljK'F(7AKrPSKi)H*^Cn@e4C>WX3OfV"O:U$N(s2h@;,0MFBCZ1RX3MZ0](q2.kTC,.1(rR7he5T"5iUJ$?a_#BHVN#[N%>Z[RB-R+TgRCJpEDH'OtkYRNl*R$EN1A-rSJdqN?p$J.j/aUW8:kPjAROP`0[KVTDQ_j^iGt*ksbL^0@r8Y&4\:1lDjoWX7!s*gg%1^7FQDL=a/"@d=9geL2U[)RaW`_<TGSfhK5\Zg",8AGMbdpPe>d+T5AEY*-S(;EXts$7OC5]8!P'N6)bQ>t^D<A^uaaY\m_eT3.3%R%237X_qhJ"HN&)GGq,R4dK]odXejJQu'gJWu']UD4&G:>&HrNc/eY2pJ[^l6F)1I^4a>n#nG.gif8?FQ)Z$rl0W-h(tn-/&-Rrb%h>o]f/ukZ/7)s!b-;VZ6X>8RYF2EA@H]Ti*OSe.HE`C4#j7I'C;uLQdENm(^.MZ+dh?27Anq'RN.oE"]&W;sKHp\:d6)]NtKNOgZ%2BAXr3dN\C%i+EfH[qQWFDr2lqNO%J1Ae',U>%RC[kCsXlB!-1+mAT&$]J%FYZ,.:"X9Eg]fNo)l%/ZH//:/We-"[#mRbo17r:&&%#fZ$^_rQ0^c0&]g[B-NpAr,"i0qB*1dX*_F[-jpc83r)$<]Yt5-*m0!#6U+j=9^%Vb5fsT;%)4q$^hR#/+=f$jh9p*`&f!`*7D\B%BNRWD\;m&[;#B3=Ud8&M`)Kr_gOR91bL!0A<8:_7<!_Y^q@tnHi9CWY&Oj*(hAN)O:;ks6_ESSq1D/DW,16hA`hjX[#&Km[7&E)*%>?J]66[3NEkUf`H3!1jLlEk5j.>uHKEW;[Y?Y4-b(;L?b-D+]P5Rgo`Xt]nXd"P"i2DRB<"O\DgOp?M+LN7;LMp3nm%T9!(Qu?GQ%aY;R`1R#kE;+'"C2+VNS[1i0Z/8h)G5'SCdUtVp28s'!-4Hg_:q`2C$6r'DLN"dL*6?gM1@I<n6lJlDbIlC4EZ_2tHGajO@_'n1/%,T4Hr;kHdlc'XGR%!tUR7F!R"]<W$n#WhlD^oVNF.!?7S[n$Qh*,GYt_6c18QL!N#\`p-eIrO1$A5Y.(K:$]?>PHnapql;\>H1!`%bA4TN[LJ/LQ`X'X*76Zq&^Qg&9d^^N<>McagPGurW0I[f1KJZb#R+VheSrmW+eNmO*B+Mn;LW*Q7Q`K>9aL3/64MAiKrLT;gEmcH%:J7;m>%Gq(XI5T.?&9#=*JWR*%=-kP8Ml5?7WI%IM2]FeXG.k>AGiHf"L[-iOr^$OQnY%d*EEQK3[u*"cQ->T+cs)'=]EZVA+OEf%dsbZtba5l.d\uH5>Sp,&j(1Z:$29Mt>0L7\8sKp1E9fV@Zu!M2a>l;CrTEfNB!V#i8]=L:b)RLq<LXp/H"&kS)MVPseo)1I_oV6"%e>J,+8GTRG6[X[OR;T+aU&j!m31o/Y/NBV;1EjMMJhLp`U*,UBR0C+!O?MD?TD<\pKe\<=1djWXK#Ih9KO!/r,XW.)[IdU$9BXF]%bHcWEnkQNF'/$OG9;6j-Tf9So)]E(;\iI2h5\3\;##B&AgTg=8Vk!L.NhM)_]!"kJkfW8E2&Z97=!85='jPk;Nlg_4ieNf_6@:.I%5i<IHn`!/_J@q$&FO!(]n.lgCiILPqB;$KS,$YS2=,3]Z&pKq4LF<c[2]-NFLnU:UH<\JT`lg1E6apfgDB#giI2VnVp'`rld_Wid%("M04NT(Le^(tR'!f0/3Cn'+)L^rIKM!><lS<VZ^[ra=ZO@eSBO7plI<1>&J)!^J?Bqcte9bU2l8*MUq*5AS(Epr!t/A.UpqHh^e%lTsD+A/=7cWC<I1U$Nq_JjX%i%Dj%$l;@)(Nl_a%RtiClLMj>VpW9Hp"JHnm$/Md`2l#s[OOohiNtlnMB>BU1%?8f!?Q6*A6<LJs%g#8>9Oq-^6@+l./]-_,IE4RoChNS;9cR6U6R:$uG^sP"YBX:(lm$LSbL06[RWT'dsk"UT&(-c*B,,;V&UCt=aAmH,V_MNsF7gM=e%6oCWh_\f&dl<+M+3HUph\u-Lg)iY*3%@L0(ocW^74ZB/ITh^K/C62&Yg,Z`]f])U5lVeTpj<Kqa^F\^Gr#D@LdX+:;9GEP`6O:(S%R;(&N29I'Ja,rfB-XB5s5kXGR[NQ<!SMV/80#[<?DTJ/8h$Z+$IX0`bR5`<VI9HDg<A;cTL:\o,.:E`D&$j#.;P2=":G;`E`rl-A%E6DQ]EL`+Ki>UJm3kB"X5+A$o9^;TI+Ne2Qrc[&up4CNs2<93Hh'SCC@']VeoI8X]-&shKmV8gGi@t((=n*,']B7U$e50\T^0b'b%_#SrVW3;XPOo3)/BjQ06@)B9S8@/N$;#+?C)l-">:0AoZ!j".o$8&!KoO@H(g>>,P&bWO$=2o@,MP_?0OZ:)\,58GI3'Pdi*XPDh%E<Gr.TYZ3hM[$<-C_3#9^RH2\ZQL6jjlbAl.aEae#r:FfD.P'=dWT[,[-4Is**Sr<[PA1Y'lIDAf[7$AYSEXD,.d1o)j9OgNPVT4%6J;jN%d"^H3gngVQu4]aLrm#QE"d$(F`TmoVh@^9/TF&n3&Pc!hC)t/A`cpMXfPn9B\epT4]DVjd0&dJ[CT^30YP,H(OIW+i-o)V%KsV=c6bh:5iW6+5[isgh>ku(D<89ME-cl?Vf1p/kgA2_S0:O#[M2q!qm%/`cF8DL=/2.,DV<.?L@F.#lpnHJ`?N?+5op98+9G6.A%Yg_LhiXj8LW.cCcYe1dAKJ:VIS>_;"YH?-J=uoGCT8#M"QK>eSbVA(aJ9K[e+G*]I]5VGe%H[oT(R.-pQ=j<]ALhbijle7paY@"U%aj^HmKb[WQFKB!t&htgrOTqf+WS4*<<Z/A"6_E.Q/6.aV\"W5>d6&N^`kij)SG1\cW=B'3Te.A/6D`fe\AX+ZrAj'[2mJC4LF?/X%:([ETd,'eP5T'a@SC@l$0;mX'gGUU#?a`.Qqr#9>Gk6o"BIi8X_+XYk'"`a]<'WBN?>auBlBUWg/#q>CO+`N+BleAB3K>%WdBb%#%JV^Jk^1&ldhtO!R,F7PM=ap`VdSXml2TJUoT?i7K'uT+_PJa13lT`/m'jLa(Mfl(3D`j-DRFr1<Q!Yl6kHkhhO1a`.H#@]p&>e[F%E.\=0YNLY^-65Df;41@l9skF4X?I&@\-bOlHMnlBkSrkeFFjZL,bW"0"b6ZE?@YKsd6Y(>n5<5p[>V2^Kl&o]H&,@@kQFbl<5(07%/]%6#%]KZg0<^qARl2g8?a`-GB+EcrApapS#6#SbVE'cr"A!t+J635#j[h'm1Fs42WuW(9Y*O^nL;n=.T&>E-P;A1;505'+r"_=*%:!PTO2OQMIR!i-62";][O\';EcM1&u#]:>f1&Jr,-&@]8`.<K!,E&F,3T0l)`2lP\'j6dF;5.Mpb9t>a:"^NRdE7,Aa)S==9fQZZ%Cj+E./KL[sEH:u_qoQ=ocr0rIA9Mm6W,KM)ng]SW+Pg9'@bk9/eZY,uUo4./Ct+*?"P/.YgcS!(3cos_D2^MtE^Ssg2@c\jh(Ptf%U>%RWDI9h94<3,_1;?#Y![L/#4E_Ihjh@,GV&f_!'aI#S16\2[&75_sS#/S*3nQ2N$c^CX6R0!%Ln!aiR*NsYkq::TD0%MsPZq\A%JApj'bbl,<-,1c"T-u7#jKT%f%\$BU6ZOX>JW9NMh'&-cA4*EVO-?Rd*%lJ2*hb]VRhuW")$(#$;u0LU\``#kK!WnRC/[jO-`8Wp%Sq<^e;L[j]c$D#B3C(fKLcQ.sC\:&J&G&d&H17nh^*&(XQ.^>*e"PAd3k9)U0+Yl"VQ+iCP?CAp8Nh_FFMGJ/Nc*UJbe>WV.Pu^<%2gKI!C"95+-5JEVm]pkAM(MjE2;o1e)d%"2riW(AY):e?PCf?0Jn)%c'r,7E?"h.*Z4`;C?T@Yq;Sj3W+cJ7+4Ita'R!fhF<9G(Y%31sn0A9/jZTU`EEW&]q>?*$$/Y+X$,W4JJF"QcFhSp*3)H&+41FG#DCAOZF>X[(MfeY)g$[9Ib%K#R&nb,5fD!qkNrM":(C=^ut?%LbdH#+G7F2r>Q"u6$J3>YX`NL-A#WqWr?0lKnq`_&rtLs9VdF59JGEZg#&A=kD=H)2!BC6eJ?t!?uc'!oI5M)XVijYG@'R?fY569%*U/u#9p%u.k?f+b(:_JRLk``W<oN^NPlXIGdmg?[AFp_A]#K)<64)+g743!tg@7hDg/M;Jam%9gV[Q"!enNc*#]'[X+ga'C_DB'>%KB"WQApQh;fO\oe-\<EkTZg=(<&0B9n)*-3&JM)&(,cL-9.`mo?_Y;uP@k0l':2a`b1WMJ5)oI:BCXmYcC+S/0E:_Dn,IY2YQ'.8%HN-e3hgb[`pr!+\s7="<A9*l>p8ADEkibuiiBQO`#[dUc3hcWalJDR?hdh72Xm[\<rV-=:J,,_u&-%DMs)2C[[i3?t7,]M\GN]uQ%Np2j5)YI[iC`kDT+lju'&-d;s!l5@VP9k.>qG+"og8qQ#\"f4b;G"!_qDm`f0TEto__8cb_ag0qnSl^L<g$;d&.AWO:o;<eGDlY:%]1EOrK/,fY,n)PgXI]R7l^"*85><1CS-k`i`]%Bte8".^KS,3;(JdGYT+>5@%'Y(Xg"tG;Pgas6d(jk9a<-%Q@r:3]Imj&T.d5(r%Q!6+!S&M;Q)Op13JPEQ_q(cmpCgpQ=DHp=.'>N(u_k_*eD,WpiEDtLBf;@-l9C8A/Z$=u>6$*-i`lOdhjCtOl8O`_s;W(HB5hn_s%JG',O/ESk[b2cGJQR.rd!$)fZ'MfiM9m+Oc/a-MQ)[cC3k<iU=cQPgk?%\'I%(gDNq^=fZ>Z(-a\nK!ck>EH1paj%U66#WU?7&29%hV<^>Xm])>QE_6BX]/T33qd(IWqp*PgY1C=dX#_UgB?9\]=p08n&uc[VB?8*a`ThmNie.(/.amTV-qRrAAWA!06*DT7mMN69e3[L%aX[hJB?2rpf'Yc=b>,CGlIE.:EtZd7!\AD0Z;p!RagJK5ROY",hg)@q<Lo?^-\D*!&'/X%5[)KK1<I4n>LcoE:(GA&g-c;YaM7J?%2?:X#b-gBJAd'#p"6uo;Z)b5h\ne;2I+MtoZDr>$Fb\bEdhDm<B!R;_#-taG;ZtuNTl`Wq1nC8@E;'%$X-Y?.>t2W*S#[8:GB(J(%&N?1m+Z"%Z5)d!N$YGfAH`\WNc+0dW[:o+EFPc[`X;ds/SUAT0YX[2m,Xc_9;c\6g.uOanhJ.@F'`VER&Z<`%;N8@s^l)^dj]akK%h?i&MO`WJHQmli'm^h*KD&V3kgGHUX2CEE=+t*Xo)'+f\_TVDaOATtm-MiR^0gnRh7hJ1SH3>Id*OS1'mH@(-0oY/>!\d'3S;F+T%=s>eFE^=1gdcCVuX'B+.5-#!(V3]5O%3Tbk_(o=QOBt&mJHb9oJ`9G)WQ5V3WMc28Q.QK*q^U[+AOk[L-[cK/(jHYQE_`3Gn!W*@%c[6ucbJg&E%!9.#VQD8SXk`e+n6(^C/M]JW[LphZ$c.8b'.]-nJal9X45!BOe=PS5F-`TSrt8OBcsoSMc7sQ+\K!%4c,j+W\3Eq3%kNp)1a<sYVCJ54hD$KQr'I=/X4LL2=%QmL,kP3/Shn648)MasNXRbiOIqSPI/HW<'V.M.1jdmJ:K=&!n28eoGbZHo`*s%CK!51c9%U)PBBr_Ogh0FN(1-9$Lu@3/M&71'*WfV:67.&.c'il$Tt>Tp<c#$Z+];qO,X5O"jtE1J%"77K[c1Z:mYLg6h1@2MDk)2]Wcb$a*,%..(1D#uEE\q(`MKH?b&8c`^1qj=p:LF;BFP3,O#7-JeGA]\a(WK;LD]T3N95VJQ2#8LFVTem=i7MD)C7c6:E&hIIQgL(,65h4$FB%n+GX*Fhf:n&(K"_\((XPaAe-=(5<dM94J,JMWF]C'SIJ3.+gUCbFd$P'7Y1%>iOs=C`*uo<b.T7;K%*5o:c!(A3q2D`[+)2W(e@'%C`sQ96'0Ko#_6d_TH&3gg&o1b-5Pr3d^M+)IpOYgY7GhaI@G]_nG)O$q<*&c*Y3I=5?o845M[rAr->sr*hG$7?\chbj3u35jnb>B%cgYnc5/059Y/Bl":S0&?5M<'oh0o(tS&<!VI)o+~>%AI9_PrivateDataEnd